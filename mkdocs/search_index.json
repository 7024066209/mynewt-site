{
    "docs": [
        {
            "location": "/", 
            "text": "Apache Mynewt is a community-driven, permissively licensed open source initiative for constrained, embedded applications. The emergence of the Internet of Things is proving that \nanything that can be connected will be connected \n. Many of these connected devices\u2014wristbands and other wearables, light bulbs and locks\u2014must be operated for long periods of time, but are constrained in terms of power, memory, and storage. Apache Mynewt flexibly addresses these constraints while remaining hardware agnostic.", 
            "title": "Home"
        }, 
        {
            "location": "/documentation/", 
            "text": "Documentation Organization\n\n\nThe technical literature for Apache Mynewt is organized into three manuals. The first describes the Real Time Operating System (RTOS), its features and capabilites, and how to get it running on your target device. The second one demonstrates how to use the build and packaging tool, \nNewt\n, to easily choose firmware modules for your target and compose them into a working executable. The third manual shows how the device management tool, \nNewtmgr\n, can communicate with a remote device running Mynewt OS and monitor, configure, and upgrade it.\n\n\nFor you to learn and get some hands-on experience, each manual includes one or more tutorials. We encourage that you try them, and do send us your feedback.", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#documentation-organization", 
            "text": "The technical literature for Apache Mynewt is organized into three manuals. The first describes the Real Time Operating System (RTOS), its features and capabilites, and how to get it running on your target device. The second one demonstrates how to use the build and packaging tool,  Newt , to easily choose firmware modules for your target and compose them into a working executable. The third manual shows how the device management tool,  Newtmgr , can communicate with a remote device running Mynewt OS and monitor, configure, and upgrade it.  For you to learn and get some hands-on experience, each manual includes one or more tutorials. We encourage that you try them, and do send us your feedback.", 
            "title": "Documentation Organization"
        }, 
        {
            "location": "/download/", 
            "text": "For general information on using Git at Apache, go to https://git-wip-us.apache.org.\n\n\nIf you are not a committer, follow the proposed non-committer workflow to share your work. The direct link to the proposed workflow is https://git-wip-us.apache.org/docs/workflow.html.\n\n\nTo clone the Mynewt OS development repository:\n\n\nNon Committers\n\n\n    $ git clone http://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git\n\n\n\n\nCommitters\n\n\n    $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git", 
            "title": "Download"
        }, 
        {
            "location": "/community/", 
            "text": "Mailing Lists\n\n\nTo subscribe to a mailing list, you simply send an email to a special subscription address. For example, to subscribe to the dev list, send an email to \ndev-subscribe@mynewt.incubator.apache.org\n.\n\n\nThe following mailing lists can be used to get help with MyNewt.", 
            "title": "Community"
        }, 
        {
            "location": "/community/#mailing-lists", 
            "text": "To subscribe to a mailing list, you simply send an email to a special subscription address. For example, to subscribe to the dev list, send an email to  dev-subscribe@mynewt.incubator.apache.org .  The following mailing lists can be used to get help with MyNewt.", 
            "title": "Mailing Lists"
        }, 
        {
            "location": "/events/", 
            "text": "Events\n\n\nPlease take a look at our upcoming events! We hope to see you there.", 
            "title": "Events"
        }, 
        {
            "location": "/events/#events", 
            "text": "Please take a look at our upcoming events! We hope to see you there.", 
            "title": "Events"
        }, 
        {
            "location": "/os/get_started/introduction/", 
            "text": "Introduction\n\n\nWelcome to Apache Mynewt\n\n\nApache Mynewt is an operating system that makes it easy to develop\napplications for microcontroller environments where power and cost \nare driving factors. Examples of these devices are connected locks, \nlights, and wearables.\n\n\nMicrocontroller environments have a number of characteristics that \nmakes the operating system requirements for them unique: \n\n\n\n\n\n\nLow memory footprint: memory on these systems range from \n8-16KB (on the low end) to 16MB (on the high end).\n\n\n\n\n\n\nReduced code size: code often runs out of flash, and total available code size ranges from 64-128KB to 16-32MB.\n\n\n\n\n\n\nLow processing speed: processor speeds vary from 10-12MHz to 160-200MHz.  \n\n\n\n\n\n\nLow power operation: devices operate in mostly sleeping mode, in order to conserve\nbattery power and maximize power usage.\n\n\n\n\n\n\nAs more and more devices get connected, these interconnected devies perform complex tasks. To\nperform these tasks, you need low-level operational functionality built into the operating system.\nTypically, connected devices built with these microcontrollers perform a myriad of low-level tasks: \n\n\n\n\n\n\nNetworking Stacks: Bluetooth Low Energy and Thread\n\n\n\n\n\n\nPeripherals: PWM to drive motors, ADCs to measure sensor data, and RTCs\nto keep time.\n\n\n\n\n\n\nScheduled Processing: actions must happen on a calendared or periodic basis.\n\n\n\n\n\n\nApache Mynewt accomplishes all the above easily, by providing a complete\noperating system for constrained devices, including:\n\n\n\n\n\n\nA fully open-source Bluetooth Low Energy stack with both Host and \nController implementations. \n\n\n\n\n\n\nA pre-emptive, multi-tasking Real Time operating system kernel\n\n\n\n\n\n\nA Hardware Abstraction Layer (HAL) that abstracts the MCU's \nperipheral functions, allowing developers to easily write cross-platform\ncode.\n\n\n\n\n\n\nNewt\n\n\nIn order to provide all this functionality, and operate in an \nextremely low resource environment, Mynewt provides a very fine-grained source \npackage management and build system tool, called \nnewt\n. \n\n\nYou can install and build \nnewt\n for \nLinux\n or \nMac\n. \n\n\nBuild your first Mynewt App with Newt\n\n\nBefore you start your first Mynewt application, you must first create a new Mynewt\napplication with the \nnewt\n tool: \n\n\n$ newt new my_app\nDownloading application skeleton from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-tadpole.git... ok!\nApplication my_app successfully created in /Users/mynewt/dev/my_app\n$ \n\n\n\n\nThis new application contains the core of the operating system and the hardware abstraction layer, which all fits into less than 5KB of compiled code size.\n\n\nOnce the application is created, you can then install the packages you need, as Mynewt will automatically download them, along with their dependencies into your application.\n\n\nFor example, let's install a file system into the \"my_app\" application.\n\n\nFirst, we'll search for file system packages: \n\n\n$ newt pkg search fs\nPackage list larva has package fs/nffs@0.8.0\nPackage list larva has package fs/fs@0.0.0\nPackage list larva has package project/ffs2native@0.0.0\n\n\n\n\nOnce found, you can install the nffs package (Newtron Flash File System) with \nnewt\n:\n\n\n$ newt pkg install fs/nffs\nDownloading larva from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva/master... ok!\nInstalling fs/nffs\nInstalling fs/fs\nInstallation was a success!\n\n\n\n\nAt this point you have your first Mynewt application. And it's that simple!\n\n\nMynewt contains all the packages and reusable software components you need to develop a device using a 32-bit \nMicrocontroller. And by providing a robust package management and build system, to help you build building blocks, Mynewt allows you to scale from 5KB of code size to MBs of compiled code size.\n\n\nNext, try doing your first project using \nnewt.\n In the next section, \nGet Started\n, we guide you how get a LED on a target board blink. \n\n\nSo get on with it!", 
            "title": "Introduction"
        }, 
        {
            "location": "/os/get_started/introduction/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/os/get_started/introduction/#welcome-to-apache-mynewt", 
            "text": "Apache Mynewt is an operating system that makes it easy to develop\napplications for microcontroller environments where power and cost \nare driving factors. Examples of these devices are connected locks, \nlights, and wearables.  Microcontroller environments have a number of characteristics that \nmakes the operating system requirements for them unique:     Low memory footprint: memory on these systems range from \n8-16KB (on the low end) to 16MB (on the high end).    Reduced code size: code often runs out of flash, and total available code size ranges from 64-128KB to 16-32MB.    Low processing speed: processor speeds vary from 10-12MHz to 160-200MHz.      Low power operation: devices operate in mostly sleeping mode, in order to conserve\nbattery power and maximize power usage.    As more and more devices get connected, these interconnected devies perform complex tasks. To\nperform these tasks, you need low-level operational functionality built into the operating system.\nTypically, connected devices built with these microcontrollers perform a myriad of low-level tasks:     Networking Stacks: Bluetooth Low Energy and Thread    Peripherals: PWM to drive motors, ADCs to measure sensor data, and RTCs\nto keep time.    Scheduled Processing: actions must happen on a calendared or periodic basis.    Apache Mynewt accomplishes all the above easily, by providing a complete\noperating system for constrained devices, including:    A fully open-source Bluetooth Low Energy stack with both Host and \nController implementations.     A pre-emptive, multi-tasking Real Time operating system kernel    A Hardware Abstraction Layer (HAL) that abstracts the MCU's \nperipheral functions, allowing developers to easily write cross-platform\ncode.", 
            "title": "Welcome to Apache Mynewt"
        }, 
        {
            "location": "/os/get_started/introduction/#newt", 
            "text": "In order to provide all this functionality, and operate in an \nextremely low resource environment, Mynewt provides a very fine-grained source \npackage management and build system tool, called  newt .   You can install and build  newt  for  Linux  or  Mac .", 
            "title": "Newt"
        }, 
        {
            "location": "/os/get_started/introduction/#build-your-first-mynewt-app-with-newt", 
            "text": "Before you start your first Mynewt application, you must first create a new Mynewt\napplication with the  newt  tool:   $ newt new my_app\nDownloading application skeleton from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-tadpole.git... ok!\nApplication my_app successfully created in /Users/mynewt/dev/my_app\n$   This new application contains the core of the operating system and the hardware abstraction layer, which all fits into less than 5KB of compiled code size.  Once the application is created, you can then install the packages you need, as Mynewt will automatically download them, along with their dependencies into your application.  For example, let's install a file system into the \"my_app\" application.  First, we'll search for file system packages:   $ newt pkg search fs\nPackage list larva has package fs/nffs@0.8.0\nPackage list larva has package fs/fs@0.0.0\nPackage list larva has package project/ffs2native@0.0.0  Once found, you can install the nffs package (Newtron Flash File System) with  newt :  $ newt pkg install fs/nffs\nDownloading larva from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva/master... ok!\nInstalling fs/nffs\nInstalling fs/fs\nInstallation was a success!  At this point you have your first Mynewt application. And it's that simple!  Mynewt contains all the packages and reusable software components you need to develop a device using a 32-bit \nMicrocontroller. And by providing a robust package management and build system, to help you build building blocks, Mynewt allows you to scale from 5KB of code size to MBs of compiled code size.  Next, try doing your first project using  newt.  In the next section,  Get Started , we guide you how get a LED on a target board blink.   So get on with it!", 
            "title": "Build your first Mynewt App with Newt"
        }, 
        {
            "location": "/os/get_started/project1/", 
            "text": "Blinky, Your Hello World!\n\n\nObjective\n\n\nLearn how to use packages from a default application repository of Mynewt to build your first \nHello World\n application (Blinky) on a target board. Once built using \nnewt\n tool, this application will blink the LED lights on the target board. Fun stuff!\n\n\nThis tutorial will guide to achieve the following: \n\n\n\n\nSet up the environment on your computer to use Mynewt OS and newt tool. \n\n\nDownload packages for building and testing the project \non a simulated target\n.\n\n\nDownload packages and use tools to create a runtime image for a board to make its LED blink. You have two choices here:\n\n\nDownload an image to SRAM\n, or \n\n\nDownload it to flash\n.\n\n\n\n\n\n\n\n\n Time Requirement\n: Allow yourself a couple of hours for this project if you are relatively new to embedded systems and playing with development boards. Those jumpers can be pesky!\n\n\nWhat you need\n\n\n\n\nSTM32-E407 development board from Olimex. You can order it from \nhttp://www.mouser.com\n, \nhttp://www.digikey.com\n, and other places.\n\n\nARM-USB-TINY-H connector with JTAG interface for debugging ARM microcontrollers (comes with the ribbon cable to hook up to the board)\n\n\nUSB A-B type cable to connect the debugger to your personal computer\n\n\nPersonal Computer with Mac OS (Mac: OS X Yosemite Version 10.10.5) or Linux box (Ubuntu 14.10: Utopic Unicorn)\n\n\nAn account on Github repository and \ngit\n installed on your computer.\n\n\n\n\nAlso, we assume that you're familiar with UNIX shells.\n\n\nLet's gets started!\n\n\nSet up toolchain for Mac\n\n\n\n\nInstall gcc/libc that will produce 32-bit executables, using \nbrew\n. \n\n\n\n\n        $ brew install gcc\n        ...\n        ...\n        ==\n Summary\n        \ud83c\udf7a  /usr/local/Cellar/gcc/5.2.0: 1353 files, 248M\n\n\n\n\n\n\nInstall the PX4 Toolchain and check the version installed. ARM maintains a pre-built GNU toolchain with a GCC source branch targeted at Embedded ARM Processors, namely Cortex-R/Cortex-M processor families. After installing, ensure that the symbolic link installed by Homebrew points to the correct version of the debugger. If not, you can either change the symbolic link using the \"ln -f -s\" command or just go ahead and try with the version it points to!\n\n\n\n\n        $ brew tap PX4/homebrew-px4\n        $ brew update\n        $ brew install gcc-arm-none-eabi-49\n        $ arm-none-eabi-gcc --version  \n        arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 4.9.3 20150529 (release) [ARM/embedded-4_9-branch revision 224288]\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        This is free software; see the source for copying conditions.  There is NO\n        warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n        $ ls -al /usr/local/bin/arm-none-eabi-gdb\n        lrwxr-xr-x  1 aditihilbert  admin  69 Sep 22 17:16 /usr/local/bin/arm-none-eabi-gdb -\n /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/arm-none-eabi-gdb\n\n\n\n\nNote: If no version is specified, brew will install the latest version available. Mynewt OS will eventually work with multiple versions available, including the latest releases. However, at present we have tested only with this version and recommend it for getting started. \n\n\n\n\nInstall OpenOCD (Open On-Chip Debugger), which is an open-source software that will allow you to interface with the JTAG debug connector/adaptor for the Olimex board, debug, and test embedded target devices, including the Olimex board. For more on OpenOCD go to \nhttp://openocd.org\n.\n\n\n\n\n        $ brew install open-ocd\n        $ which openocd\n        /usr/local/bin/openocd\n        $ ls -l $(which openocd)\n        lrwxr-xr-x  1 \nuser\n  admin  36 Sep 17 16:22 /usr/local/bin/openocd -\n ../Cellar/open-ocd/0.9.0/bin/openocd\n\n\n\n\nAt this point you have installed all the necessary software to build and test code on a simluator for the Mac OS.\n* Proceed to the \nBuild test code on simulator\n section.\n\n\nSet up toolchain for Linux\n\n\n\n\nInstall gcc/ ibc that will produce 32-bit executables: \n\n\n\n\n        $ sudo apt-get install gcc-multilib libc6-i386\n\n\n\n\n\n\nFor the LED project on the Olimex hardware, you should install gcc for AM 4.9.3.  This package can be installed with apt-get as documented below. The steps are explained in depth at \nhttps://launchpad.net/~terry.guo/+archive/ubuntu/gcc-arm-embedded\n.\n\n\n\n\n        $ sudo apt-get remove binutils-arm-none-eabi gcc-arm-none-eabi \n        $ sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded \n        $ sudo apt-get update \n        $ sudo apt-get install gcc-arm-none-eabi\n\n\n\n\n\n\n\n\nAnd finally, install OpenOCD (Open On-Chip Debugger), which is an open-source software that will allow you to interface with the JTAG debug connector/adaptor for the Olimex board, debug your program and test embedded target devices which, including the Olimex board.\n\n\nIf you are running Ubuntu 15.x, then you are in luck and you can simply run: \n\n\n\n\n\n\n        $ sudo apt-get install openocd \n\n\n\n\nFor this project, you should download the openocd 0.8.0 package from \nhttps://launchpad.net/ubuntu/vivid/+source/openocd\n. The direct link to the amd64 build is \nhttp://launchpadlibrarian.net/188260097/openocd_0.8.0-4_amd64.deb\n. \n\n\n\n\nAt this point you have installed all the necessary software to build and test code on a simluator for Linux. Proceed to the \nBuild test code on simulator\n section.\n\n\n\n\nInstall newt tool\n\n\nThere are two ways to install the \nnewt\n tool on your computer. The easy way (and the recommeded way for this project) is to download the respective \nnewt\n binaries from the links below:\n\n Mac OS \n\n Linux\n\n\nInclude the \nnewt\n in your $PATH.\n\n\nOr if you're an adventurer then you can set up the environment on your computer, install the Go language, and build the \nnewt\n tool from source as explained in the tutorials in the Newt Tool Manual. See \nInstall newt from source on Mac\n and \nInstall newt from source on Linux\n.\n\n\nBuild test code on simulator\n\n\n1. Clone the larva repository from the Apache git repository into a local directory named \nlarva\n.\n\n\n        $ cd ~/dev \n        $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git larva\n        $ ls\n\n        go  larva\n        $ ls larva\n        DISCLAIMER  NOTICE      app.yml     compiler    hw      net     project     sys\n        LICENSE     README.md   autotargets fs  libs    pkg-list.yml    scripts\n\n\n\n\n2. Create a target using the newt tool. \n\n\n        $ cd larva\n        $ newt target create sim_test\n        Creating target sim_test\n        Target sim_test sucessfully created!\n        $ newt target show\n        sim_test\n            name: sim_test\n            arch: sim\n\n\n\n\n3. Now continue to populate and build out the sim project.\n\n\n        $ newt target set sim_test project=test\n        Target sim_test successfully set project to test\n        $ newt target set sim_test compiler_def=debug\n        Target sim_test successfully set compiler_def to debug\n        $ newt target set sim_test bsp=hw/bsp/native\n        Target sim_test successfully set bsp to hw/bsp/native\n        $ newt target set sim_test compiler=sim\n        Target sim_test successfully set compiler to sim\n        $ newt target show sim_test\n        sim_test\n            arch=sim\n            bsp=hw/bsp/native\n            compiler=sim\n            compiler_def=debug\n            name=sim_test\n            project=test\n\n\n\n\n4. Configure \nnewt\n to use the gnu build tools native to OS X or Linux. In order for sim to work properly, it needs the 32-bit gcc (gcc-5). Replace \n~/dev/larva/compiler/sim/compiler.yml\n with the \ncompiler/sim/osx-compiler.yml\n or \nlinux-compiler.yml\n file, depending on the system. On a Windows machine, follow the instruction for the Linux machine as you are running commands in a Linux VM.\n\n\nFor a Mac OS X environment:\n\n\n        $ cp compiler/sim/osx-compiler.yml compiler/sim/compiler.yml \n\n\n\n\nFor a Linux machine:\n\n\n        $ cp compiler/sim/linux-compiler.yml compiler/sim/compiler.yml\n\n\n\n\n5. Next, build the packages for the sim project using the \nnewt\n tool. For extra details, specify the VERBOSE option.\n\n\n        $ newt target build sim_test\n        Building target sim_test (project = test)\n        ...\n        ...\n        Successfully run!\n\n\n\n\nYou can specify the VERBOSE option if you want to see the gory details.\n\n\n        $newt -l VERBOSE target build sim_test\n        2015/09/29 09:46:12 [INFO] Building project test\n        2015/09/29 09:46:12 [INFO] Loading Package /Users/aditihilbert/dev/larva/libs//bootutil...\n        2015/09/29 09:46:12 [INFO] Loading Package /Users/aditihilbert/dev/larva/libs//cmsis-core...\n        2015/09/29 09:46:12 [INFO] Loading Package /Users/aditihilbert/dev/larva/libs//ffs..\n        ...\n        Successfully run!\n\n\n\n\n6. Run the test suite executable inside this project and enjoy your first successful test!\n\n\n        $ project/test/bin/sim_test/test.elf\n        [pass] os_mempool_test_suite/os_mempool_test_case\n        [pass] os_mutex_test_suite/os_mutex_test_basic\n        [pass] os_mutex_test_suite/os_mutex_test_case_1\n        ...\n        ...\n        [pass] cbmem_test_suite/cbmem_test_case_3\n\n\n\n\nUse SRAM to make LED blink\n\n\nIf you wish to build the image to run from the onboard SRAM on Olimex board, follow the steps below:\n\n\nPreparing the Software\n\n\n\n\n\n\nMake sure the PATH environment variable includes the $HOME/dev/go/bin directory. \n\n\n\n\n\n\nIf you have cloned the larva repository for the simulator test in the previous section, you can skip this step. Otherwise, you have to create a repository for the project. Go to ~/dev and clone the larva repository from the apache git repository into a local directory named \nlarva\n.\n\n\n\n\n\n\n        $ cd ~/dev \n        $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git larva\n        $ ls\n\n        go  larva\n        $ ls larva\n        DISCLAIMER  NOTICE      app.yml     compiler    hw      net     project     sys\n        LICENSE     README.md   autotargets fs  libs    pkg-list.yml    scripts\n\n\n\n\n\n\n\n\nChange directory to ~dev/larva directory and build the \nblinky\n project inside larva, using the \nnewt\n tool. Starting with the target name, assign specific aspects of the project, as shown below, to pull the appropriate packages and build the right bundle or list for the board. For example, we set the architecture (arch), compiler, board support package (bsp), project, and compiler mode.\n\n\n(Remember to prefix each command with \"newtvm\" if you are executing the newt command in a Linux virtual machine on your Windows box!)\n\n\n\n\n\n\n        $ newt target create blinky\n        Creating target blinky\n        Target blinky sucessfully created!\n        $ newt target set blinky arch=cortex_m4\n        Target blinky successfully set arch to arm\n        $ newt target set blinky compiler=arm-none-eabi-m4\n        Target blinky successfully set compiler to arm-none-eabi-m4\n        $ newt target set blinky project=blinky\n        Target blinky successfully set project to blinky\n        $ newt target set blinky compiler_def=debug\n        Target blinky successfully set compiler_def to debug\n        $ newt target set blinky bsp=hw/bsp/olimex_stm32-e407_devboard\n        Target blinky successfully set bsp to hw/bsp/olimex_stm32-e407_devboard\n        $ newt target show blinky\n        blinky\n            arch=cortex_m4\n            bsp=hw/bsp/olimex_stm32-e407_devboard\n            compiler=arm-none-eabi-m4\n            compiler_def=debug\n            name=blinky\n            project=blinky\n\n\n\n\n\n\nNext, let's build the image with the above values assigned. By default, the linker script within the \nhw/bsp/olimex_stm32-e407_devboard\n package builds an image for flash memory, which we don't want; instead, we want an image for the SRAM, so you need to switch that script with \nrun_from_sram.ld\n. \n\n\n\n\n\n(We are working to simplify this scheme whereby an executable for a project will correctly elect the linker scripts and generate the relevant image. For example, the scheme will key on project identity such as bootloader, RAM, Flash (default) and build accordingly. \n.)\n\n\nAfer you build the target, you can find the executable *blinky.elf* in the project directory *~/dev/larva/project/blinky/bin/blinky.*\n\n\n\n        $ cd ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n        $ diff olimex_stm32-e407_devboard.ld run_from_sram.ld\n        (some diff will be displayed)\n        $ cp run_from_sram.ld olimex_stm32-e407_devboard.ld\n        $ cd ~/dev/larva/project/blinky/\n        $ newt target build blinky\n        Building target blinky (project = blinky)\n        Compiling case.c\n        Compiling suite.c\n        ...\n        Successfully run!\n        $ ls bin/blinky\n        blinky.elf  blinky.elf.bin  blinky.elf.cmd  blinky.elf.lst  blinky.elf.map\n\n\n\n\n\n\nCheck if you have all the scripts needed to launch OpenOCD and interact with the project's specific hardware. Depending on your system (Ubuntu or Windows) you may already have the scripts in your \n/usr/share/openocd/scripts/\n directory, as they may have been part of the openocd download. If they exist, you are all set and can proceed to prepare the hardware. Otherwise check the \n~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n directory for a file named \nf407.cfg\n. Used by OpenOCD, this config enables us to interact with this specific hardware. \n\n\n\n\nYou are all set if you see the file.\n\n\n        $ ls ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n        bin     include     olimex_stm32-e407_devboard_download.sh  run_from_loader.ld\n        boot-olimex_stm32-e407_devboard.ld  olimex_stm32-e407_devboard.ld   pkg.yml     run_from_sram.ld\n        f407.cfg        olimex_stm32-e407_devboard_debug.sh run_from_flash.ld           src\n\n\n\n\nPrepare the hardware to boot from embedded SRAM\n\n\n\n\n\n\nLocate the boot jumpers on the board.\n\n\n\n\n\n\n\n\n\nB1_1/B1_0 and B0_1/B0_0 are PTH jumpers. Note that because the markings on the board may not always be accurate, when in doubt, you should always refer to the manual for the correct positioning. Since the jumpers are a pair, they should move together, and as such, the pair is responsible for the boot mode when bootloader is present. \nTo locate the bootloader, the board searches in three places: User Flash Memory, System Memory or the Embedded SRAM. For this Blinky project, we will configure it to boot from SRAM by jumpering \nB0_1\n and \nB1_1\n.\n\n\n\n\n\n\nConnect USB-OTG#2 in the picture above to a USB port on your computer (or a powered USB hub to make sure there is enough power available to the board). \n\n\n\n\n\n\nThe red PWR LED should be lit. \n\n\n\n\n\n\nConnect the JTAG connector to the SWD/JTAG interface on the board. The other end of the cable should be connected to the USB port or hub of your computer.\n\n\n\n\n\n\nLet's Go!\n\n\n\n\nEnsure that you are in the blinky project directory with the \nblinky.elf\n executable. Run the debug command in the \nnewt\n tool. You'll see some status messages as shown below. In case you need to halt the debugging session, you can issue an \n-c \"reset halt\"\n command.\n\n\n\n\n        $ cd ~/dev/larva/project/blinky/bin/blinky\n        $ newt target debug blinky\n        Debugging with /Users/aditihilbert/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_debug.sh blinky\n        Debugging /Users/aditihilbert/dev/larva/project/blinky/bin/blinky/blinky.elf\n        GNU gdb (GNU Tools for ARM Embedded Processors) 7.8.0.20150604-cvs\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        License GPLv3+: GNU GPL version 3 or later \nhttp://gnu.org/licenses/gpl.html\n\n        ...\n        (info)\n        ...\n        target state: halted\n        target halted due to debug-request, current mode: Thread \n        xPSR: 0x01000000 pc: 0x20000250 msp: 0x10010000\n        Info : accepting 'gdb' connection from 3333\n        Info : device id = 0x10036413\n        Info : flash size = 1024kbytes\n        Reset_Handler () at startup_STM32F40x.s:199\n        199     ldr    r1, =__etext\n\n\n\n\nCheck the value of the msp (main service pointer) register. If it is not 0x10010000 as indicated above, you will have to manually set it after you open the gdp tool and load the image on it. For example, \n\n\n        (gdb) set $msp=0x10010000\n\n\n\n\nNow load the image and type \"c\" or \"continue\" from the GNU debugger. \n\n\n        (gdb) load ~/dev/larva/project/blinky/bin/blinky/blinky.elf         \n        Loading section .text, size 0x4294 lma 0x20000000\n        Loading section .ARM.extab, size 0x24 lma 0x20004294\n        Loading section .ARM.exidx, size 0xd8 lma 0x200042b8\n        Loading section .data, size 0x874 lma 0x20004390\n        Start address 0x20000250, load size 19460\n        Transfer rate: 81 KB/sec, 2432 bytes/write.\n        (gdb) c\n        Continuing.\n\n\n\n\n\n\nVoil\u00e0! The board's LED should be blinking at 1 Hz. Success!\n\n\n\n\nUse flash to make LED blink\n\n\nIf you wish to build the image to run from the onboard flash memory on Olimex board, follow the steps below:\n\n\n\n\nConfigure the board to boot from flash by moving the two jumpers together to \nB0_0\n and \nB1_0\n. Refer to the pictures of the board under the section titled \n\"Prepare the hardware to boot from embedded SRAM\"\n.\n\n\n\n\nYou will have to reset the board once the image is uploaded to it.\n\n\n\n\nIf you skipped the first option for the project \n(downloading an image to SRAM)\n, then skip this step. Otherwise, continue with this step. \n\n\n\n\nBy default, the linker script (\nolimex_stm32-e407_devboard.ld\n) is configured to run from bootloader and flash. However, if you first ran the image from SRAM you had changed \nolimex_stm32-e407_devboard.ld\n to match \nrun_from_sram.ld\n. You will, therefore, return to defaults with \nolimex_stm32-e407_devboard.ld\n linker script matching the contents of 'run_from_loader.ld'. Return to the project directory.\n\n\n        $ cd ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n        $ diff olimex_stm32-e407_devboard.ld run_from_sram.ld\n        $ diff olimex_stm32-e407_devboard.ld run_from_loader.ld\n        (some diff will be displayed)\n        $ cp run_from_loader.ld olimex_stm32-e407_devboard.ld\n        $ cd ~/dev/larva/project/blinky/bin/blinky\n\n\n\n\n\n\nIn order to run the image from flash, you need to build the bootloader as well. The bootloader does the initial set up of the Olimex board and then transfers control to the image stored at a location in flash known to it. The bootloader in turn requires the \nbin2image\n tool to check the image header for version information, CRC checks etc. So, we will need to build these two additional targets (bootloader and bin2img).\n\n\n\n\nLet's first create bin2img:\n\n\n        $ newt target create bin2img\n        Creating target bin2img\n        Target bin2img successfully created!\n        $ newt target set bin2img arch=sim\n        Target bin2img successfully set arch to sim\n        $ newt target set bin2img compiler=sim\n        Target bin2img successfully set compiler to sim\n        $ newt target set bin2img project=bin2img\n        Target bin2img successfully set project to bin2img\n        $ newt target set bin2img compiler_def=debug\n        Target bin2img successfully set compiler_def to debug\n        $ newt target set bin2img bsp=hw/bsp/native\n        Target bin2img successfully set bsp to hw/bsp/native\n        $ newt target show bin2img\n        bin2img\n                arch=sim\n                bsp=hw/bsp/native\n                compiler=sim\n                compiler_def=debug\n                name=bin2img\n                project=bin2img\n\n\n\n\nAnd then let's create boot_olimex:\n\n\n        $ newt target create boot_olimex\n        Creating target boot_olimex\n        Target boot_olimex successfully created!\n        $ newt target set boot_olimex arch=cortex_m4\n        Target boot_olimex successfully set arch to cortex_m4\n        $ newt target set boot_olimex compiler=arm-none-eabi-m4\n        Target boot_olimex successfully set compiler to arm-none-eabi-m4\n        $ newt target set boot_olimex project=boot\n        Target boot_olimex successfully set project to boot\n        $ newt target set boot_olimex compiler_def=optimized\n        Target boot_olimex successfully set compiler_def to optimized\n        $ newt target set boot_olimex bsp=hw/bsp/olimex_stm32-e407_devboard\n        Target boot_olimex successfully set bsp to hw/bsp/olimex_stm32-e407_devboard\n        $ newt target show boot_olimex\n        boot_olimex\n                arch=cortex_m4\n                bsp=hw/bsp/olimex_stm32-e407_devboard\n                compiler=arm-none-eabi-m4\n                compiler_def=optimized\n                name=boot_olimex\n                project=boot\n\n\n\n\n\n\nNow let's build all the three targets now.\n\n\n\n\n        $ newt target build bin2img\n        Building target bin2img (project = bin2img)\n        Building project bin2img\n        ...\n        Successfully run!\n        $ newt target build boot_olimex\n        Building target boot_olimex (project = boot)\n        Building project boot\n        ...\n        Successfully run!\n        $ newt target build blinky\n        Building target blinky (project = blinky)\n        Building project blinky\n        Successfully run!\n\n\n\n\n\n\nGo to the project directory and download the bootloader and the image to flash ... in a flash! \n\n\n\n\n        $ cd ~/dev/larva/project/blinky/bin/blinky\n        $ newt target download boot_olimex\n        Downloading with ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh\n        $ newt target download blinky\n        Downloading with ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh\n\n\n\n\n\n\n\n\nVoil\u00e0! The LED should be blinking! Success!\n\n\n\n\n\n\nBut wait...not so fast. let's double check that it is indeed booting from flash and making the LED blink from the image in flash. Pull the USB cable off the Olimex JTAG adaptor, severing the debug connection to the JTAG port. Next power off the Olimex board by pulling out the USB cable from the board. Wait for a couple of seconds and plug the USB cable back to the board. \n\n\n\n\n\n\nThe LED light will start blinking again. Success!\n\n\nNote #1: If you want to download the image to flash and a gdb session opened up, use \nnewt target debug blinky\n instead of \nnewt target download blinky\n.\n\n\n        $ newt target debug blinky\n        Debugging with ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_debug.sh blinky\n        Debugging ~/dev/larva/project/blinky/bin/blinky/blinky.elf\n        GNU gdb (GNU Tools for ARM Embedded Processors) 7.8.0.20150604-cvs\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        License GPLv3+: GNU GPL version 3 or later \nhttp://gnu.org/licenses/gpl.html\n\n        ...\n        (info)\n        ...\n        target state: halted\n        target halted due to debug-request, current mode: Thread \n        xPSR: 0x01000000 pc: 0x08000250 msp: 0x10010000\n        Info : accepting 'gdb' connection from 3333\n        Info : device id = 0x10036413\n        Info : flash size = 1024kbytes\n        Reset_Handler () at startup_STM32F40x.s:199\n        199     ldr    r1, =__etext\n        (gdb)\n\n\n\n\nNote #2: If you want to erase the flash and load the image again you may use the following commands from within gdb. \nflash erase_sector 0 0 x\n tells it to erase sectors 0 through x. When you ask it to display (in hex notation) the contents of the sector starting at location 'lma,' you should see all f's. The memory location 0x8000000 is the start or origin of the flash memory contents and is specified in the olimex_stm32-e407_devboard.ld linker script. The flash memory locations is specific to the processor.\n\n\n        (gdb) monitor flash erase_sector 0 0 4\n        erased sectors 0 through 4 on flash bank 0 in 2.296712s\n        (gdb) monitor mdw 0x08000000 16\n        0x08000000: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \n        (0x08000020: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \n        (0x08000000: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \n        (0x08000020: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff         \n        (gdb) monitor flash info 0\n\n\n\n\nConclusion\n\n\nIn summation, you achieved and learned a fair amount in this hands-on tutorial. If this is your first time to embedded systems, this must feel like the best hands-on and low-level \"Hello World\" progam ever. \n\n\nGood, we have more fun tutorials for you to get your hands dirty. Be bold and try other Blinky-like \nTutorials\n.\n\n\nIf you see anything missing or want to send us feeback, please do so by signing up for appropriate mailing lists on our \nCommunity Page\n\n\nKeep on hacking and blinking!", 
            "title": "Blinky, The First Project"
        }, 
        {
            "location": "/os/get_started/project1/#blinky-your-hello-world", 
            "text": "", 
            "title": "Blinky, Your Hello World!"
        }, 
        {
            "location": "/os/get_started/project1/#objective", 
            "text": "Learn how to use packages from a default application repository of Mynewt to build your first  Hello World  application (Blinky) on a target board. Once built using  newt  tool, this application will blink the LED lights on the target board. Fun stuff!  This tutorial will guide to achieve the following:    Set up the environment on your computer to use Mynewt OS and newt tool.   Download packages for building and testing the project  on a simulated target .  Download packages and use tools to create a runtime image for a board to make its LED blink. You have two choices here:  Download an image to SRAM , or   Download it to flash .      Time Requirement : Allow yourself a couple of hours for this project if you are relatively new to embedded systems and playing with development boards. Those jumpers can be pesky!", 
            "title": "Objective"
        }, 
        {
            "location": "/os/get_started/project1/#what-you-need", 
            "text": "STM32-E407 development board from Olimex. You can order it from  http://www.mouser.com ,  http://www.digikey.com , and other places.  ARM-USB-TINY-H connector with JTAG interface for debugging ARM microcontrollers (comes with the ribbon cable to hook up to the board)  USB A-B type cable to connect the debugger to your personal computer  Personal Computer with Mac OS (Mac: OS X Yosemite Version 10.10.5) or Linux box (Ubuntu 14.10: Utopic Unicorn)  An account on Github repository and  git  installed on your computer.   Also, we assume that you're familiar with UNIX shells.  Let's gets started!", 
            "title": "What you need"
        }, 
        {
            "location": "/os/get_started/project1/#set-up-toolchain-for-mac", 
            "text": "Install gcc/libc that will produce 32-bit executables, using  brew .            $ brew install gcc\n        ...\n        ...\n        ==  Summary\n        \ud83c\udf7a  /usr/local/Cellar/gcc/5.2.0: 1353 files, 248M   Install the PX4 Toolchain and check the version installed. ARM maintains a pre-built GNU toolchain with a GCC source branch targeted at Embedded ARM Processors, namely Cortex-R/Cortex-M processor families. After installing, ensure that the symbolic link installed by Homebrew points to the correct version of the debugger. If not, you can either change the symbolic link using the \"ln -f -s\" command or just go ahead and try with the version it points to!           $ brew tap PX4/homebrew-px4\n        $ brew update\n        $ brew install gcc-arm-none-eabi-49\n        $ arm-none-eabi-gcc --version  \n        arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 4.9.3 20150529 (release) [ARM/embedded-4_9-branch revision 224288]\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        This is free software; see the source for copying conditions.  There is NO\n        warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n        $ ls -al /usr/local/bin/arm-none-eabi-gdb\n        lrwxr-xr-x  1 aditihilbert  admin  69 Sep 22 17:16 /usr/local/bin/arm-none-eabi-gdb -  /usr/local/Cellar/gcc-arm-none-eabi-49/20150609/bin/arm-none-eabi-gdb  Note: If no version is specified, brew will install the latest version available. Mynewt OS will eventually work with multiple versions available, including the latest releases. However, at present we have tested only with this version and recommend it for getting started.    Install OpenOCD (Open On-Chip Debugger), which is an open-source software that will allow you to interface with the JTAG debug connector/adaptor for the Olimex board, debug, and test embedded target devices, including the Olimex board. For more on OpenOCD go to  http://openocd.org .           $ brew install open-ocd\n        $ which openocd\n        /usr/local/bin/openocd\n        $ ls -l $(which openocd)\n        lrwxr-xr-x  1  user   admin  36 Sep 17 16:22 /usr/local/bin/openocd -  ../Cellar/open-ocd/0.9.0/bin/openocd  At this point you have installed all the necessary software to build and test code on a simluator for the Mac OS.\n* Proceed to the  Build test code on simulator  section.", 
            "title": "Set up toolchain for Mac"
        }, 
        {
            "location": "/os/get_started/project1/#set-up-toolchain-for-linux", 
            "text": "Install gcc/ ibc that will produce 32-bit executables:            $ sudo apt-get install gcc-multilib libc6-i386   For the LED project on the Olimex hardware, you should install gcc for AM 4.9.3.  This package can be installed with apt-get as documented below. The steps are explained in depth at  https://launchpad.net/~terry.guo/+archive/ubuntu/gcc-arm-embedded .           $ sudo apt-get remove binutils-arm-none-eabi gcc-arm-none-eabi \n        $ sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded \n        $ sudo apt-get update \n        $ sudo apt-get install gcc-arm-none-eabi    And finally, install OpenOCD (Open On-Chip Debugger), which is an open-source software that will allow you to interface with the JTAG debug connector/adaptor for the Olimex board, debug your program and test embedded target devices which, including the Olimex board.  If you are running Ubuntu 15.x, then you are in luck and you can simply run:             $ sudo apt-get install openocd   For this project, you should download the openocd 0.8.0 package from  https://launchpad.net/ubuntu/vivid/+source/openocd . The direct link to the amd64 build is  http://launchpadlibrarian.net/188260097/openocd_0.8.0-4_amd64.deb .    At this point you have installed all the necessary software to build and test code on a simluator for Linux. Proceed to the  Build test code on simulator  section.", 
            "title": "Set up toolchain for Linux"
        }, 
        {
            "location": "/os/get_started/project1/#install-newt-tool", 
            "text": "There are two ways to install the  newt  tool on your computer. The easy way (and the recommeded way for this project) is to download the respective  newt  binaries from the links below:  Mac OS   Linux  Include the  newt  in your $PATH.  Or if you're an adventurer then you can set up the environment on your computer, install the Go language, and build the  newt  tool from source as explained in the tutorials in the Newt Tool Manual. See  Install newt from source on Mac  and  Install newt from source on Linux .", 
            "title": "Install newt tool"
        }, 
        {
            "location": "/os/get_started/project1/#build-test-code-on-simulator", 
            "text": "1. Clone the larva repository from the Apache git repository into a local directory named  larva .          $ cd ~/dev \n        $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git larva\n        $ ls\n\n        go  larva\n        $ ls larva\n        DISCLAIMER  NOTICE      app.yml     compiler    hw      net     project     sys\n        LICENSE     README.md   autotargets fs  libs    pkg-list.yml    scripts  2. Create a target using the newt tool.           $ cd larva\n        $ newt target create sim_test\n        Creating target sim_test\n        Target sim_test sucessfully created!\n        $ newt target show\n        sim_test\n            name: sim_test\n            arch: sim  3. Now continue to populate and build out the sim project.          $ newt target set sim_test project=test\n        Target sim_test successfully set project to test\n        $ newt target set sim_test compiler_def=debug\n        Target sim_test successfully set compiler_def to debug\n        $ newt target set sim_test bsp=hw/bsp/native\n        Target sim_test successfully set bsp to hw/bsp/native\n        $ newt target set sim_test compiler=sim\n        Target sim_test successfully set compiler to sim\n        $ newt target show sim_test\n        sim_test\n            arch=sim\n            bsp=hw/bsp/native\n            compiler=sim\n            compiler_def=debug\n            name=sim_test\n            project=test  4. Configure  newt  to use the gnu build tools native to OS X or Linux. In order for sim to work properly, it needs the 32-bit gcc (gcc-5). Replace  ~/dev/larva/compiler/sim/compiler.yml  with the  compiler/sim/osx-compiler.yml  or  linux-compiler.yml  file, depending on the system. On a Windows machine, follow the instruction for the Linux machine as you are running commands in a Linux VM.  For a Mac OS X environment:          $ cp compiler/sim/osx-compiler.yml compiler/sim/compiler.yml   For a Linux machine:          $ cp compiler/sim/linux-compiler.yml compiler/sim/compiler.yml  5. Next, build the packages for the sim project using the  newt  tool. For extra details, specify the VERBOSE option.          $ newt target build sim_test\n        Building target sim_test (project = test)\n        ...\n        ...\n        Successfully run!  You can specify the VERBOSE option if you want to see the gory details.          $newt -l VERBOSE target build sim_test\n        2015/09/29 09:46:12 [INFO] Building project test\n        2015/09/29 09:46:12 [INFO] Loading Package /Users/aditihilbert/dev/larva/libs//bootutil...\n        2015/09/29 09:46:12 [INFO] Loading Package /Users/aditihilbert/dev/larva/libs//cmsis-core...\n        2015/09/29 09:46:12 [INFO] Loading Package /Users/aditihilbert/dev/larva/libs//ffs..\n        ...\n        Successfully run!  6. Run the test suite executable inside this project and enjoy your first successful test!          $ project/test/bin/sim_test/test.elf\n        [pass] os_mempool_test_suite/os_mempool_test_case\n        [pass] os_mutex_test_suite/os_mutex_test_basic\n        [pass] os_mutex_test_suite/os_mutex_test_case_1\n        ...\n        ...\n        [pass] cbmem_test_suite/cbmem_test_case_3", 
            "title": "Build test code on simulator"
        }, 
        {
            "location": "/os/get_started/project1/#use-sram-to-make-led-blink", 
            "text": "If you wish to build the image to run from the onboard SRAM on Olimex board, follow the steps below:", 
            "title": "Use SRAM to make LED blink"
        }, 
        {
            "location": "/os/get_started/project1/#preparing-the-software", 
            "text": "Make sure the PATH environment variable includes the $HOME/dev/go/bin directory.     If you have cloned the larva repository for the simulator test in the previous section, you can skip this step. Otherwise, you have to create a repository for the project. Go to ~/dev and clone the larva repository from the apache git repository into a local directory named  larva .            $ cd ~/dev \n        $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git larva\n        $ ls\n\n        go  larva\n        $ ls larva\n        DISCLAIMER  NOTICE      app.yml     compiler    hw      net     project     sys\n        LICENSE     README.md   autotargets fs  libs    pkg-list.yml    scripts    Change directory to ~dev/larva directory and build the  blinky  project inside larva, using the  newt  tool. Starting with the target name, assign specific aspects of the project, as shown below, to pull the appropriate packages and build the right bundle or list for the board. For example, we set the architecture (arch), compiler, board support package (bsp), project, and compiler mode.  (Remember to prefix each command with \"newtvm\" if you are executing the newt command in a Linux virtual machine on your Windows box!)            $ newt target create blinky\n        Creating target blinky\n        Target blinky sucessfully created!\n        $ newt target set blinky arch=cortex_m4\n        Target blinky successfully set arch to arm\n        $ newt target set blinky compiler=arm-none-eabi-m4\n        Target blinky successfully set compiler to arm-none-eabi-m4\n        $ newt target set blinky project=blinky\n        Target blinky successfully set project to blinky\n        $ newt target set blinky compiler_def=debug\n        Target blinky successfully set compiler_def to debug\n        $ newt target set blinky bsp=hw/bsp/olimex_stm32-e407_devboard\n        Target blinky successfully set bsp to hw/bsp/olimex_stm32-e407_devboard\n        $ newt target show blinky\n        blinky\n            arch=cortex_m4\n            bsp=hw/bsp/olimex_stm32-e407_devboard\n            compiler=arm-none-eabi-m4\n            compiler_def=debug\n            name=blinky\n            project=blinky   Next, let's build the image with the above values assigned. By default, the linker script within the  hw/bsp/olimex_stm32-e407_devboard  package builds an image for flash memory, which we don't want; instead, we want an image for the SRAM, so you need to switch that script with  run_from_sram.ld .    \n(We are working to simplify this scheme whereby an executable for a project will correctly elect the linker scripts and generate the relevant image. For example, the scheme will key on project identity such as bootloader, RAM, Flash (default) and build accordingly.  .)  Afer you build the target, you can find the executable *blinky.elf* in the project directory *~/dev/larva/project/blinky/bin/blinky.*          $ cd ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n        $ diff olimex_stm32-e407_devboard.ld run_from_sram.ld\n        (some diff will be displayed)\n        $ cp run_from_sram.ld olimex_stm32-e407_devboard.ld\n        $ cd ~/dev/larva/project/blinky/\n        $ newt target build blinky\n        Building target blinky (project = blinky)\n        Compiling case.c\n        Compiling suite.c\n        ...\n        Successfully run!\n        $ ls bin/blinky\n        blinky.elf  blinky.elf.bin  blinky.elf.cmd  blinky.elf.lst  blinky.elf.map   Check if you have all the scripts needed to launch OpenOCD and interact with the project's specific hardware. Depending on your system (Ubuntu or Windows) you may already have the scripts in your  /usr/share/openocd/scripts/  directory, as they may have been part of the openocd download. If they exist, you are all set and can proceed to prepare the hardware. Otherwise check the  ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard  directory for a file named  f407.cfg . Used by OpenOCD, this config enables us to interact with this specific hardware.    You are all set if you see the file.          $ ls ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n        bin     include     olimex_stm32-e407_devboard_download.sh  run_from_loader.ld\n        boot-olimex_stm32-e407_devboard.ld  olimex_stm32-e407_devboard.ld   pkg.yml     run_from_sram.ld\n        f407.cfg        olimex_stm32-e407_devboard_debug.sh run_from_flash.ld           src", 
            "title": "Preparing the Software"
        }, 
        {
            "location": "/os/get_started/project1/#prepare-the-hardware-to-boot-from-embedded-sram", 
            "text": "Locate the boot jumpers on the board.     B1_1/B1_0 and B0_1/B0_0 are PTH jumpers. Note that because the markings on the board may not always be accurate, when in doubt, you should always refer to the manual for the correct positioning. Since the jumpers are a pair, they should move together, and as such, the pair is responsible for the boot mode when bootloader is present. \nTo locate the bootloader, the board searches in three places: User Flash Memory, System Memory or the Embedded SRAM. For this Blinky project, we will configure it to boot from SRAM by jumpering  B0_1  and  B1_1 .    Connect USB-OTG#2 in the picture above to a USB port on your computer (or a powered USB hub to make sure there is enough power available to the board).     The red PWR LED should be lit.     Connect the JTAG connector to the SWD/JTAG interface on the board. The other end of the cable should be connected to the USB port or hub of your computer.", 
            "title": "Prepare the hardware to boot from embedded SRAM"
        }, 
        {
            "location": "/os/get_started/project1/#lets-go", 
            "text": "Ensure that you are in the blinky project directory with the  blinky.elf  executable. Run the debug command in the  newt  tool. You'll see some status messages as shown below. In case you need to halt the debugging session, you can issue an  -c \"reset halt\"  command.           $ cd ~/dev/larva/project/blinky/bin/blinky\n        $ newt target debug blinky\n        Debugging with /Users/aditihilbert/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_debug.sh blinky\n        Debugging /Users/aditihilbert/dev/larva/project/blinky/bin/blinky/blinky.elf\n        GNU gdb (GNU Tools for ARM Embedded Processors) 7.8.0.20150604-cvs\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        License GPLv3+: GNU GPL version 3 or later  http://gnu.org/licenses/gpl.html \n        ...\n        (info)\n        ...\n        target state: halted\n        target halted due to debug-request, current mode: Thread \n        xPSR: 0x01000000 pc: 0x20000250 msp: 0x10010000\n        Info : accepting 'gdb' connection from 3333\n        Info : device id = 0x10036413\n        Info : flash size = 1024kbytes\n        Reset_Handler () at startup_STM32F40x.s:199\n        199     ldr    r1, =__etext  Check the value of the msp (main service pointer) register. If it is not 0x10010000 as indicated above, you will have to manually set it after you open the gdp tool and load the image on it. For example,           (gdb) set $msp=0x10010000  Now load the image and type \"c\" or \"continue\" from the GNU debugger.           (gdb) load ~/dev/larva/project/blinky/bin/blinky/blinky.elf         \n        Loading section .text, size 0x4294 lma 0x20000000\n        Loading section .ARM.extab, size 0x24 lma 0x20004294\n        Loading section .ARM.exidx, size 0xd8 lma 0x200042b8\n        Loading section .data, size 0x874 lma 0x20004390\n        Start address 0x20000250, load size 19460\n        Transfer rate: 81 KB/sec, 2432 bytes/write.\n        (gdb) c\n        Continuing.   Voil\u00e0! The board's LED should be blinking at 1 Hz. Success!", 
            "title": "Let's Go!"
        }, 
        {
            "location": "/os/get_started/project1/#use-flash-to-make-led-blink", 
            "text": "If you wish to build the image to run from the onboard flash memory on Olimex board, follow the steps below:   Configure the board to boot from flash by moving the two jumpers together to  B0_0  and  B1_0 . Refer to the pictures of the board under the section titled  \"Prepare the hardware to boot from embedded SRAM\" .   You will have to reset the board once the image is uploaded to it.   If you skipped the first option for the project  (downloading an image to SRAM) , then skip this step. Otherwise, continue with this step.    By default, the linker script ( olimex_stm32-e407_devboard.ld ) is configured to run from bootloader and flash. However, if you first ran the image from SRAM you had changed  olimex_stm32-e407_devboard.ld  to match  run_from_sram.ld . You will, therefore, return to defaults with  olimex_stm32-e407_devboard.ld  linker script matching the contents of 'run_from_loader.ld'. Return to the project directory.          $ cd ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard\n        $ diff olimex_stm32-e407_devboard.ld run_from_sram.ld\n        $ diff olimex_stm32-e407_devboard.ld run_from_loader.ld\n        (some diff will be displayed)\n        $ cp run_from_loader.ld olimex_stm32-e407_devboard.ld\n        $ cd ~/dev/larva/project/blinky/bin/blinky   In order to run the image from flash, you need to build the bootloader as well. The bootloader does the initial set up of the Olimex board and then transfers control to the image stored at a location in flash known to it. The bootloader in turn requires the  bin2image  tool to check the image header for version information, CRC checks etc. So, we will need to build these two additional targets (bootloader and bin2img).   Let's first create bin2img:          $ newt target create bin2img\n        Creating target bin2img\n        Target bin2img successfully created!\n        $ newt target set bin2img arch=sim\n        Target bin2img successfully set arch to sim\n        $ newt target set bin2img compiler=sim\n        Target bin2img successfully set compiler to sim\n        $ newt target set bin2img project=bin2img\n        Target bin2img successfully set project to bin2img\n        $ newt target set bin2img compiler_def=debug\n        Target bin2img successfully set compiler_def to debug\n        $ newt target set bin2img bsp=hw/bsp/native\n        Target bin2img successfully set bsp to hw/bsp/native\n        $ newt target show bin2img\n        bin2img\n                arch=sim\n                bsp=hw/bsp/native\n                compiler=sim\n                compiler_def=debug\n                name=bin2img\n                project=bin2img  And then let's create boot_olimex:          $ newt target create boot_olimex\n        Creating target boot_olimex\n        Target boot_olimex successfully created!\n        $ newt target set boot_olimex arch=cortex_m4\n        Target boot_olimex successfully set arch to cortex_m4\n        $ newt target set boot_olimex compiler=arm-none-eabi-m4\n        Target boot_olimex successfully set compiler to arm-none-eabi-m4\n        $ newt target set boot_olimex project=boot\n        Target boot_olimex successfully set project to boot\n        $ newt target set boot_olimex compiler_def=optimized\n        Target boot_olimex successfully set compiler_def to optimized\n        $ newt target set boot_olimex bsp=hw/bsp/olimex_stm32-e407_devboard\n        Target boot_olimex successfully set bsp to hw/bsp/olimex_stm32-e407_devboard\n        $ newt target show boot_olimex\n        boot_olimex\n                arch=cortex_m4\n                bsp=hw/bsp/olimex_stm32-e407_devboard\n                compiler=arm-none-eabi-m4\n                compiler_def=optimized\n                name=boot_olimex\n                project=boot   Now let's build all the three targets now.           $ newt target build bin2img\n        Building target bin2img (project = bin2img)\n        Building project bin2img\n        ...\n        Successfully run!\n        $ newt target build boot_olimex\n        Building target boot_olimex (project = boot)\n        Building project boot\n        ...\n        Successfully run!\n        $ newt target build blinky\n        Building target blinky (project = blinky)\n        Building project blinky\n        Successfully run!   Go to the project directory and download the bootloader and the image to flash ... in a flash!            $ cd ~/dev/larva/project/blinky/bin/blinky\n        $ newt target download boot_olimex\n        Downloading with ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh\n        $ newt target download blinky\n        Downloading with ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh    Voil\u00e0! The LED should be blinking! Success!    But wait...not so fast. let's double check that it is indeed booting from flash and making the LED blink from the image in flash. Pull the USB cable off the Olimex JTAG adaptor, severing the debug connection to the JTAG port. Next power off the Olimex board by pulling out the USB cable from the board. Wait for a couple of seconds and plug the USB cable back to the board.     The LED light will start blinking again. Success!  Note #1: If you want to download the image to flash and a gdb session opened up, use  newt target debug blinky  instead of  newt target download blinky .          $ newt target debug blinky\n        Debugging with ~/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_debug.sh blinky\n        Debugging ~/dev/larva/project/blinky/bin/blinky/blinky.elf\n        GNU gdb (GNU Tools for ARM Embedded Processors) 7.8.0.20150604-cvs\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        License GPLv3+: GNU GPL version 3 or later  http://gnu.org/licenses/gpl.html \n        ...\n        (info)\n        ...\n        target state: halted\n        target halted due to debug-request, current mode: Thread \n        xPSR: 0x01000000 pc: 0x08000250 msp: 0x10010000\n        Info : accepting 'gdb' connection from 3333\n        Info : device id = 0x10036413\n        Info : flash size = 1024kbytes\n        Reset_Handler () at startup_STM32F40x.s:199\n        199     ldr    r1, =__etext\n        (gdb)  Note #2: If you want to erase the flash and load the image again you may use the following commands from within gdb.  flash erase_sector 0 0 x  tells it to erase sectors 0 through x. When you ask it to display (in hex notation) the contents of the sector starting at location 'lma,' you should see all f's. The memory location 0x8000000 is the start or origin of the flash memory contents and is specified in the olimex_stm32-e407_devboard.ld linker script. The flash memory locations is specific to the processor.          (gdb) monitor flash erase_sector 0 0 4\n        erased sectors 0 through 4 on flash bank 0 in 2.296712s\n        (gdb) monitor mdw 0x08000000 16\n        0x08000000: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \n        (0x08000020: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \n        (0x08000000: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff \n        (0x08000020: ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff         \n        (gdb) monitor flash info 0", 
            "title": "Use flash to make LED blink"
        }, 
        {
            "location": "/os/get_started/project1/#conclusion", 
            "text": "In summation, you achieved and learned a fair amount in this hands-on tutorial. If this is your first time to embedded systems, this must feel like the best hands-on and low-level \"Hello World\" progam ever.   Good, we have more fun tutorials for you to get your hands dirty. Be bold and try other Blinky-like  Tutorials .  If you see anything missing or want to send us feeback, please do so by signing up for appropriate mailing lists on our  Community Page  Keep on hacking and blinking!", 
            "title": "Conclusion"
        }, 
        {
            "location": "/os/get_started/vocabulary/", 
            "text": "Glossary\n\n\nApplication workspace or app\n\n\nThe application workspace (app) is the base directory of your embedded software. It is meant to be the workspace containing a logical collection of the source code for one or more of your projects. An app can contain multiple projects, and reflect multiple end products. \n\n\nAs the base repository of your source code, the app has a master branch and several other branches off it. The \nmaster\n is typically what developers commit to. When it is time to get the code ready for a release, a code freeze occurs on the \nmaster\n branch. A temporary \ndevelop\n branch is opened up for contributors to continue committing their code to. After the release is tagged off the \nmaster\n, the \ndevelop\n branch is merged into \nmaster\n. Developers can thereafter go back to commiting changes to \nmaster\n. The \ndevelop\n branch is subsequently deleted. You may also choose to create your own branch and work there.\n\n\nYou can have several \nprojects\n in your app repository since an application can be used in several projects. Each project in your app will, in turn, consist of several \npackages or pkgs\n. A project could be a package (pkg) itself as well. In addition to pkgs, your app repository will contain additional items such as \ntarget\n or build definitions, \npackage list or pkg-list\n description files, scripts etc.\n\n\n \n\n\nA walk through the \"larva\" app at \nhttps://github.com/mynewt/larva.git\n shows you all the different files involved. The app.yml file in the larva directory indicates that it is an app. Pkgs such as fs (file system), nimble (BLE stack), blinky (project), log, stats etc. each has a pkg.yml file. Each board support package for a particular chip is a pkg, the API for the hardware abstraction layer is a pkg, and so on. \n\n\nThe newt tool offers the \napp\n command to create and manage apps. In general, commands represent actions and flags are modifiers for those actions. A command can have children commands and optionally run an action. A full description of the \napp\n command can be found in the command list in the \nNewt Tool Manual\n.\n\n\n    newt app [flags]\n    newt app [child-commands] \n\n\n\n\nProject\n\n\nProjects represent the individual build configurations of your embedded system and essentially defines your application. The project files are what dictate the resulting binary that is generated. \n\n\nLayout-wise, a project is a directory inside an app and contains packages required for a certain application. For example, the \nblinky\n pkg sits in \nproject/blinky\n directory of the \nlarva\n app. This pkg is used in the blinky project (application) outlined in \nGet Started\n. \n\n\nA project has the following concepts or properties associated with it. You can find them in the \nproject-name\n.yml\n file in the project directory. For example, the \nproject/blinky\n directory has the \nblinky.yml\n file indicating some or all of the properties below. Only the name of a project is required for the project to exist, however additional properties may need to be specified for the pkgs in it to compile properly and produce an executable. \n\n\n\n\nProject name\n\n\nBase path of the project (app/project/project-name by default)\n\n\npkgs belonging to the project\n\n\nCapabilities\n that are required for the project or target \n\n\nIdentity\n to classify the type of project or target\n\n\nCompiler flags to call out any specific compiler requirement\n\n\n\n\nA project could itself be a pkg if it is a distributable package for a specific application. \n\n\nThe newt tool offers various commands that you can use with a project. For example, if your project is a pkg, you can use the following command to install a project from an app.\n\n\n    newt pkg install [flags] \nproject pkg name\n\n\n\n\n\nPackage or pkg\n\n\nA package (pkg) is a distributable bundle of libraries. Just as a pkg in nature has various parts each of which serves a certain purpose, the Mynewt pkg consists of software parcels or modules that have different functions. However, unlike the pkg in nature these software modules can exist by itself and may be distributed; therefore, they too are essentially pkgs. Once this concept is grasped it is easy to see how a pkg may consist of other pkgs.\n\n\nThe two main directories in a pkg are \n/include\n and \n/src\n.\n\n\nThe newt tool offers several pkg commands to list, inspect, install, and do other operations on pkgs. For example, the following command\n\n\n    newt pkg list \n\n\n\n\noutputs all the pkgs in the current app where each pkg has details on its version, path, and dependencies. A sample output for a pkg is given below.\n\n\n    pkg libs/os, version 0.1.0\n    path: /Users/aditihilbert/dev/test_project/libs/os\n    deps: libs/testutil@none#stable \n\n\n\n\nA complete list of all the pkg commands can be found in the newt tool command list in \nNewt Tool Manual\n.\n\n\nPackage list or pkg-list\n\n\nA pkg-list is a snapshot of all pkgs in a remote app at any point in time. On any given github branch, an app with a pkg-list of pkgs will contain a \npkg-list.yml\n file that specifies the version number, dependencies, and hash value for each constituent pkg as well as the name of the entire pkg-list and the github url for it. [Note: Currently ]\n\n\nYou may download multiple pkg-lists into your local app as long as the names of the pkg-lists are different. This allows you to mix and match various features and functionality coming from different pkg-lists of pkgs. You can see all the pkg-lists in the \n.app/pkg-lists\n directory in your app.\n\n\nThe newt tool offers pkg-list management commands within the \nnewt app\n command. For example, the following command creates a new pkg-list using all the pkgs in the current directory. It requires that a pkg-list name be specified and the url for the location of that pkg-list in the online repository. These two inputs go into the \npkg-list.yml\n file in the app.\n\n\n    newt app generate-pkg-list \nname\n \nurl\n\n\n\n\n\nNote that a pkg-list merely defines the pkgs belonging together and requires the pkgs to be installed for the source code to be populated in the project. \n\n\nTarget\n\n\nA target is the hardware build or its software equivalent (e.g. test, simulator) set for a project. It tells the newt tool how to build the source code within a given app. Once a new target is created, its architecture and other details needs to be defined. An example of a defined target named \"blink_f3disc\" is given below.\n\n\n    blink_f3disc\n             compiler_def: debug\n             compiler: arm-none-eabi-m4\n             name: blink_f3disc\n             arch: cortex_m4\n             project: blinky\n             bsp: hw/bsp/stm32f3discovery\n\n\n\n\nThe newt tool offers commands to create, set up and manipulate targets. For example, the create command below creates an empty target named \nmy_target1\n and the set command sets one detail of its definition, namely the architecture.\n\n\n    newt target create my_target1\n    newt target set my_target1 arch=cortex_m4\n\n\n\n\nCapability\n\n\nCapability is functionality that is exposed by a pkg. A capability is tracked by its name and version. a pkg may require capabilities exposed by another pkg, thus establishing a dependency tracked through the pkg.yml files. \n\n\nThe newt tool can ascertain a map of all the pkg capabilities and use it to check dependencies and make sure all the necessary pkgs are in a project for a particular target.\n\n\nIdentity\n\n\nIdentity is a property of a target or project in the newt world. A target may inherit it from a project or vice versa. It may be used to determine what pkgs to include or how a pkg code should behave in a build or which linkerscripts to use. For example, the identity of a lock is different from the identity of a wearable monitor. Even if they were to be built on the same hardware target, different features and behavior are required. Their different identities result in differing sets of pkgs in the projects and/or the same pkg behaving differently depending on the identity.", 
            "title": "Glossary"
        }, 
        {
            "location": "/os/get_started/vocabulary/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/os/get_started/vocabulary/#application-workspace-or-app", 
            "text": "The application workspace (app) is the base directory of your embedded software. It is meant to be the workspace containing a logical collection of the source code for one or more of your projects. An app can contain multiple projects, and reflect multiple end products.   As the base repository of your source code, the app has a master branch and several other branches off it. The  master  is typically what developers commit to. When it is time to get the code ready for a release, a code freeze occurs on the  master  branch. A temporary  develop  branch is opened up for contributors to continue committing their code to. After the release is tagged off the  master , the  develop  branch is merged into  master . Developers can thereafter go back to commiting changes to  master . The  develop  branch is subsequently deleted. You may also choose to create your own branch and work there.  You can have several  projects  in your app repository since an application can be used in several projects. Each project in your app will, in turn, consist of several  packages or pkgs . A project could be a package (pkg) itself as well. In addition to pkgs, your app repository will contain additional items such as  target  or build definitions,  package list or pkg-list  description files, scripts etc.     A walk through the \"larva\" app at  https://github.com/mynewt/larva.git  shows you all the different files involved. The app.yml file in the larva directory indicates that it is an app. Pkgs such as fs (file system), nimble (BLE stack), blinky (project), log, stats etc. each has a pkg.yml file. Each board support package for a particular chip is a pkg, the API for the hardware abstraction layer is a pkg, and so on.   The newt tool offers the  app  command to create and manage apps. In general, commands represent actions and flags are modifiers for those actions. A command can have children commands and optionally run an action. A full description of the  app  command can be found in the command list in the  Newt Tool Manual .      newt app [flags]\n    newt app [child-commands]", 
            "title": "Application workspace or app"
        }, 
        {
            "location": "/os/get_started/vocabulary/#project", 
            "text": "Projects represent the individual build configurations of your embedded system and essentially defines your application. The project files are what dictate the resulting binary that is generated.   Layout-wise, a project is a directory inside an app and contains packages required for a certain application. For example, the  blinky  pkg sits in  project/blinky  directory of the  larva  app. This pkg is used in the blinky project (application) outlined in  Get Started .   A project has the following concepts or properties associated with it. You can find them in the  project-name .yml  file in the project directory. For example, the  project/blinky  directory has the  blinky.yml  file indicating some or all of the properties below. Only the name of a project is required for the project to exist, however additional properties may need to be specified for the pkgs in it to compile properly and produce an executable.    Project name  Base path of the project (app/project/project-name by default)  pkgs belonging to the project  Capabilities  that are required for the project or target   Identity  to classify the type of project or target  Compiler flags to call out any specific compiler requirement   A project could itself be a pkg if it is a distributable package for a specific application.   The newt tool offers various commands that you can use with a project. For example, if your project is a pkg, you can use the following command to install a project from an app.      newt pkg install [flags]  project pkg name", 
            "title": "Project"
        }, 
        {
            "location": "/os/get_started/vocabulary/#package-or-pkg", 
            "text": "A package (pkg) is a distributable bundle of libraries. Just as a pkg in nature has various parts each of which serves a certain purpose, the Mynewt pkg consists of software parcels or modules that have different functions. However, unlike the pkg in nature these software modules can exist by itself and may be distributed; therefore, they too are essentially pkgs. Once this concept is grasped it is easy to see how a pkg may consist of other pkgs.  The two main directories in a pkg are  /include  and  /src .  The newt tool offers several pkg commands to list, inspect, install, and do other operations on pkgs. For example, the following command      newt pkg list   outputs all the pkgs in the current app where each pkg has details on its version, path, and dependencies. A sample output for a pkg is given below.      pkg libs/os, version 0.1.0\n    path: /Users/aditihilbert/dev/test_project/libs/os\n    deps: libs/testutil@none#stable   A complete list of all the pkg commands can be found in the newt tool command list in  Newt Tool Manual .", 
            "title": "Package or pkg"
        }, 
        {
            "location": "/os/get_started/vocabulary/#package-list-or-pkg-list", 
            "text": "A pkg-list is a snapshot of all pkgs in a remote app at any point in time. On any given github branch, an app with a pkg-list of pkgs will contain a  pkg-list.yml  file that specifies the version number, dependencies, and hash value for each constituent pkg as well as the name of the entire pkg-list and the github url for it. [Note: Currently ]  You may download multiple pkg-lists into your local app as long as the names of the pkg-lists are different. This allows you to mix and match various features and functionality coming from different pkg-lists of pkgs. You can see all the pkg-lists in the  .app/pkg-lists  directory in your app.  The newt tool offers pkg-list management commands within the  newt app  command. For example, the following command creates a new pkg-list using all the pkgs in the current directory. It requires that a pkg-list name be specified and the url for the location of that pkg-list in the online repository. These two inputs go into the  pkg-list.yml  file in the app.      newt app generate-pkg-list  name   url   Note that a pkg-list merely defines the pkgs belonging together and requires the pkgs to be installed for the source code to be populated in the project.", 
            "title": "Package list or pkg-list"
        }, 
        {
            "location": "/os/get_started/vocabulary/#target", 
            "text": "A target is the hardware build or its software equivalent (e.g. test, simulator) set for a project. It tells the newt tool how to build the source code within a given app. Once a new target is created, its architecture and other details needs to be defined. An example of a defined target named \"blink_f3disc\" is given below.      blink_f3disc\n             compiler_def: debug\n             compiler: arm-none-eabi-m4\n             name: blink_f3disc\n             arch: cortex_m4\n             project: blinky\n             bsp: hw/bsp/stm32f3discovery  The newt tool offers commands to create, set up and manipulate targets. For example, the create command below creates an empty target named  my_target1  and the set command sets one detail of its definition, namely the architecture.      newt target create my_target1\n    newt target set my_target1 arch=cortex_m4", 
            "title": "Target"
        }, 
        {
            "location": "/os/get_started/vocabulary/#capability", 
            "text": "Capability is functionality that is exposed by a pkg. A capability is tracked by its name and version. a pkg may require capabilities exposed by another pkg, thus establishing a dependency tracked through the pkg.yml files.   The newt tool can ascertain a map of all the pkg capabilities and use it to check dependencies and make sure all the necessary pkgs are in a project for a particular target.", 
            "title": "Capability"
        }, 
        {
            "location": "/os/get_started/vocabulary/#identity", 
            "text": "Identity is a property of a target or project in the newt world. A target may inherit it from a project or vice versa. It may be used to determine what pkgs to include or how a pkg code should behave in a build or which linkerscripts to use. For example, the identity of a lock is different from the identity of a wearable monitor. Even if they were to be built on the same hardware target, different features and behavior are required. Their different identities result in differing sets of pkgs in the projects and/or the same pkg behaving differently depending on the identity.", 
            "title": "Identity"
        }, 
        {
            "location": "/os/tutorials/STM32F303/", 
            "text": "Blinky on STM32F303 board\n\n\nObjective\n\n\nDownload a generic firmware skeleton (\"bootstrap image\") that applies to any hardware and then throw in additional applicable pkgs to generate a build for a specific board, namely the STM32F303VC MCU from STMicroelectronics.\n\n\nHardware needed\n\n\n\n\nDiscovery kit with STM32F303VC MCU\n\n\nLaptop running Mac OS\n\n\n\n\nStep by Step Instructions to build image\n\n\n\n\nThe first step is to download the generic skeleton of the project. The pkgs constituting the skeleton are not hardware architecture specific. The skeleton is maintained as an app in a separate repository on Apache. You know it is an app because there is an app.yml file. \n\n\n\n\n        [user:~/dev]$ newt app create test_project\n        Downloading app skeleton from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-tadpole.git... ok!\n        app test_project successfully created in ~/dev/go/test_project\n\n        [user:~/dev]$ cd test_project/\n        [user:~/dev/test_project]$ ls\n        README.md   compiler    hw      libs    app.yml\n\n\n\n\n\n\nNext, the pkg-list named larva is added from the app (also named larva) from another repository on Apache. This step simply downloads the pkg-list description file and does not actually install the pkgs that constitute the pkg-list. The pkg-list description file (\npkg-list.yml\n) will be used to check dependencies during the pkg install to ensure completeness. It serves as a reference for all the pkgs in the pkg-list that one can choose from and install.\n\n\n\n\n        [user:~/dev/test_project]$ newt app add-pkg-list larva https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git\n        Downloading pkg-list.yml from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git/master... ok!\n        Verifying pkg-list.yml format...\n        ok!\n        pkg-list larva successfully installed to app.\n\n\n\n\n\n\nThe next step is to install relevant pkgs from the larvan app on github. The instructions assume that you know what application or project you are interested in (the blinky application, in this case), what hardware you are using (STM32F3DISCOVERY board, in this case) and hence, what board support package you need. \n\n\n\n\n\n        [user:~/dev/test_project]$ newt pkg install project/blinky          \n        Downloading larva from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva/master... ok!\n        Installing project/blinky\n        Installing libs/console/full\n        Installing libs/shell\n        Installation was a success!\n\n        [user:~/dev/test_project]$ newt pkg install hw/bsp/stm32f3discovery\n        Downloading larva from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva/master... ok!\n        Installing hw/bsp/stm32f3discovery\n        Installing hw/mcu/stm/stm32f3xx\n        Installing libs/cmsis-core\n        Installing compiler/arm-none-eabi-m4\n        Installation was a success!\n\n\n\n\n\n\nIt's time to create a target for the project and define the target attributes. \n\n\n\n\n        [user:~/dev/test_project]$ newt target create blink_f3disc\n        Creating target blink_f3disc\n        Target blink_f3disc successfully created!\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc project=blinky\n        Target blink_f3disc successfully set project to blinky\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc bsp=hw/bsp/stm32f3discovery\n        Target blink_f3disc successfully set bsp to hw/bsp/stm32f3discovery\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc compiler_def=debug\n        Target blink_f3disc successfully set compiler_def to debug\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc compiler=arm-none-eabi-m4\n        Target blink_f3disc successfully set compiler to arm-none-eabi-m4\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc arch=cortex_m4\n        Target blink_f3disc successfully set arch to cortex_m4\n\n        [user:~/dev/test_project]$ newt target show blink_f3disc\n        blink_f3disc\n            arch: cortex_m4\n            project: blinky\n            bsp: hw/bsp/stm32f3discovery\n            compiler_def: debug\n            compiler: arm-none-eabi-m4\n            name: blink_f3disc\n\n\n\n\n\n\n\n\nNext, you get to build the target and generate an executable that can then be uploaded to the board. The STM32F3DISCOVERY board includes an ST-LINK/V2 embedded debug tool interface that will be used to program/debug the board. To program the MCU on the board, simply plug in the two jumpers on CN4, as shown in the picture in red. If you want to learn more about the board you will find the User Manual at \nhttp://www.st.com/st-web-ui/static/active/jp/resource/technical/document/user_manual/DM00063382.pdf\n\n\n\n\n\n\n\n\n\n\n\n\n        [user:~/dev/test_project]$ newt target build blink_f3disc\n        Building target blink_f3disc (project = blinky)\n        Compiling case.c\n        Compiling suite.c\n        Compiling testutil.c\n        Compiling testutil_arch_arm.c\n        Archiving libtestutil.a\n        Compiling os.c\n        Compiling os_callout.c\n        Compiling os_eventq.c\n        Compiling os_heap.c\n        Compiling os_mbuf.c\n        Compiling os_mempool.c\n        Compiling os_mutex.c\n        Compiling os_sanity.c\n        Compiling os_sched.c\n        Compiling os_sem.c\n        Compiling os_task.c\n        Compiling os_time.c\n        Compiling os_arch_arm.c\n        Assembling HAL_CM4.s\n        Assembling SVC_Table.s\n        Archiving libos.a\n        Compiling hal_gpio.c\n        Compiling stm32f3xx_hal_gpio.c\n        Archiving libstm32f3xx.a\n        Compiling cmsis_nvic.c\n        Compiling libc_stubs.c\n        Compiling os_bsp.c\n        Compiling sbrk.c\n        Compiling system_stm32f3xx.c\n        Assembling startup_stm32f303xc.s\n        Archiving libstm32f3discovery.a\n        Compiling main.c\n        Building project blinky\n        Linking blinky.elf\n        Successfully run!\n\n\n\n\n\n\nFinally, you have to download the image on to the board. You will see a blue light start to blink.\n\n\n\n\n        [user:~/dev/test_project]$ newt target download blink_f3disc\n        Downloading with /Users/user/dev/test_project/hw/bsp/stm32f3discovery/stm32f3discovery_download.sh", 
            "title": "Blinky on STM32F303"
        }, 
        {
            "location": "/os/tutorials/STM32F303/#blinky-on-stm32f303-board", 
            "text": "", 
            "title": "Blinky on STM32F303 board"
        }, 
        {
            "location": "/os/tutorials/STM32F303/#objective", 
            "text": "Download a generic firmware skeleton (\"bootstrap image\") that applies to any hardware and then throw in additional applicable pkgs to generate a build for a specific board, namely the STM32F303VC MCU from STMicroelectronics.", 
            "title": "Objective"
        }, 
        {
            "location": "/os/tutorials/STM32F303/#hardware-needed", 
            "text": "Discovery kit with STM32F303VC MCU  Laptop running Mac OS", 
            "title": "Hardware needed"
        }, 
        {
            "location": "/os/tutorials/STM32F303/#step-by-step-instructions-to-build-image", 
            "text": "The first step is to download the generic skeleton of the project. The pkgs constituting the skeleton are not hardware architecture specific. The skeleton is maintained as an app in a separate repository on Apache. You know it is an app because there is an app.yml file.            [user:~/dev]$ newt app create test_project\n        Downloading app skeleton from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-tadpole.git... ok!\n        app test_project successfully created in ~/dev/go/test_project\n\n        [user:~/dev]$ cd test_project/\n        [user:~/dev/test_project]$ ls\n        README.md   compiler    hw      libs    app.yml   Next, the pkg-list named larva is added from the app (also named larva) from another repository on Apache. This step simply downloads the pkg-list description file and does not actually install the pkgs that constitute the pkg-list. The pkg-list description file ( pkg-list.yml ) will be used to check dependencies during the pkg install to ensure completeness. It serves as a reference for all the pkgs in the pkg-list that one can choose from and install.           [user:~/dev/test_project]$ newt app add-pkg-list larva https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git\n        Downloading pkg-list.yml from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva.git/master... ok!\n        Verifying pkg-list.yml format...\n        ok!\n        pkg-list larva successfully installed to app.   The next step is to install relevant pkgs from the larvan app on github. The instructions assume that you know what application or project you are interested in (the blinky application, in this case), what hardware you are using (STM32F3DISCOVERY board, in this case) and hence, what board support package you need.    \n        [user:~/dev/test_project]$ newt pkg install project/blinky          \n        Downloading larva from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva/master... ok!\n        Installing project/blinky\n        Installing libs/console/full\n        Installing libs/shell\n        Installation was a success!\n\n        [user:~/dev/test_project]$ newt pkg install hw/bsp/stm32f3discovery\n        Downloading larva from https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva/master... ok!\n        Installing hw/bsp/stm32f3discovery\n        Installing hw/mcu/stm/stm32f3xx\n        Installing libs/cmsis-core\n        Installing compiler/arm-none-eabi-m4\n        Installation was a success!   It's time to create a target for the project and define the target attributes.            [user:~/dev/test_project]$ newt target create blink_f3disc\n        Creating target blink_f3disc\n        Target blink_f3disc successfully created!\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc project=blinky\n        Target blink_f3disc successfully set project to blinky\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc bsp=hw/bsp/stm32f3discovery\n        Target blink_f3disc successfully set bsp to hw/bsp/stm32f3discovery\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc compiler_def=debug\n        Target blink_f3disc successfully set compiler_def to debug\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc compiler=arm-none-eabi-m4\n        Target blink_f3disc successfully set compiler to arm-none-eabi-m4\n\n        [user:~/dev/test_project]$ newt target set blink_f3disc arch=cortex_m4\n        Target blink_f3disc successfully set arch to cortex_m4\n\n        [user:~/dev/test_project]$ newt target show blink_f3disc\n        blink_f3disc\n            arch: cortex_m4\n            project: blinky\n            bsp: hw/bsp/stm32f3discovery\n            compiler_def: debug\n            compiler: arm-none-eabi-m4\n            name: blink_f3disc    Next, you get to build the target and generate an executable that can then be uploaded to the board. The STM32F3DISCOVERY board includes an ST-LINK/V2 embedded debug tool interface that will be used to program/debug the board. To program the MCU on the board, simply plug in the two jumpers on CN4, as shown in the picture in red. If you want to learn more about the board you will find the User Manual at  http://www.st.com/st-web-ui/static/active/jp/resource/technical/document/user_manual/DM00063382.pdf               [user:~/dev/test_project]$ newt target build blink_f3disc\n        Building target blink_f3disc (project = blinky)\n        Compiling case.c\n        Compiling suite.c\n        Compiling testutil.c\n        Compiling testutil_arch_arm.c\n        Archiving libtestutil.a\n        Compiling os.c\n        Compiling os_callout.c\n        Compiling os_eventq.c\n        Compiling os_heap.c\n        Compiling os_mbuf.c\n        Compiling os_mempool.c\n        Compiling os_mutex.c\n        Compiling os_sanity.c\n        Compiling os_sched.c\n        Compiling os_sem.c\n        Compiling os_task.c\n        Compiling os_time.c\n        Compiling os_arch_arm.c\n        Assembling HAL_CM4.s\n        Assembling SVC_Table.s\n        Archiving libos.a\n        Compiling hal_gpio.c\n        Compiling stm32f3xx_hal_gpio.c\n        Archiving libstm32f3xx.a\n        Compiling cmsis_nvic.c\n        Compiling libc_stubs.c\n        Compiling os_bsp.c\n        Compiling sbrk.c\n        Compiling system_stm32f3xx.c\n        Assembling startup_stm32f303xc.s\n        Archiving libstm32f3discovery.a\n        Compiling main.c\n        Building project blinky\n        Linking blinky.elf\n        Successfully run!   Finally, you have to download the image on to the board. You will see a blue light start to blink.           [user:~/dev/test_project]$ newt target download blink_f3disc\n        Downloading with /Users/user/dev/test_project/hw/bsp/stm32f3discovery/stm32f3discovery_download.sh", 
            "title": "Step by Step Instructions to build image"
        }, 
        {
            "location": "/os/tutorials/nRF52/", 
            "text": "Blinky on nRF52 board\n\n\nObjective\n\n\nDownload a generic firmware skeleton (\"bootstrap image\") that applies to any hardware and then throw in additional applicable pkgs to generate a build for a specific board, namely the\nnRF52 Series chip from Nordic Semiconductors.\n\n\nHardware needed\n\n\n\n\nnRF52 Development Kit\n\n\nLaptop running Mac OS\n\n\n\n\nStep by Step Instructions to build image\n\n\n\n\nThe first step is to download the generic skeleton of the project. The eggs installed are not hardware architecture specific.\n\n\n\n\n        []user@~/dev]$ newt nest create nordic_blinky\n        Downloading nest skeleton from https://www.github.com/mynewt/tadpole... ok!\n        Nest nordic_blinky successfully created in ~dev/nordic_blinky\n\n        user@~/dev$ cd nordic_blinky/\n\n\n\n\n\n\nThen, the clutch of eggs named larva is added from the nest (also named larva) on the github. This step simply downloads the clutch description file and does not actually install the eggs that constitute the clutch. The clutch description file (\nclutch.yml\n) will be used to check dependencies during the egg install to ensure completeness. It serves as a reference for all the eggs in the clutch that one can choose from and install.\n\n\n\n\n        []user@~/dev/nordic_blinky]$ newt nest add-clutch larva https://github.com/mynewt/larva\n        Downloading clutch.yml from https://github.com/mynewt/larva/master... ok!\n        Verifying clutch.yml format...ok!\n        Clutch larva successfully installed to Nest.\n\n\n\n\n\n\nThe next step is to install relevant eggs from the larva nest on github. The instructions assume that you know what application or project you are interested in (the blinky application, in this case), what hardware you are using (STM32F3DISCOVERY board, in this case) and hence, what board support package you need. \n\n\n\n\n        [user@~/dev/nordic_blinky]$ newt egg install project/blinky \n        Downloading larva from https://github.com/mynewt/larva//master... ok!\n        Installing project/blinky\n        Installation was a success!\n\n\n        [user@~/dev/nordic_blinky]$ newt egg install hw/bsp/nrf52pdk\n        Downloading larva from https://github.com/mynewt/larva//master... ok!\n        Installing hw/bsp/nrf52pdk\n        Installing hw/mcu/nordic/nrf52xxx\n        Installing libs/cmsis-core\n        Installing compiler/arm-none-eabi-m4\n        Installation was a success!\n\n\n\n\n\n\nIt's time to create a target for the project and define the target attributes. \n\n\n\n\n        [user@~/dev/nordic_blinky]$ newt target create blink_nordic\n        Creating target blink_nordic\n        Target blink_nordic successfully created!\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic project=blinky\n        Target blink_nordic successfully set project to blinky\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic bsp=hw/bsp/nrf52pdk\n        Target blink_nordic successfully set bsp to hw/bsp/nrf52pdk\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic compiler_def=debug\n        Target blink_nordic successfully set compiler_def to debug\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic compiler=arm-none-eabi-m4\n        Target blink_nordic successfully set compiler to arm-none-eabi-m4\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic arch=cortex_m4\n        Target blink_nordic successfully set arch to cortex_m4\n        [user@~/dev/nordic_blinky]$ newt target show\n        blink_nordic\n            compiler: arm-none-eabi-m4\n            name: blink_nordic\n            arch: cortex_m4\n            project: blinky\n            bsp: hw/bsp/nrf52pdk\n            compiler_def: debug\n\n\n\n\n\n\nFinally, you get to build the target and generate an executable that can now be uploaded to the board via the on-board SEGGER J-Link debugger. \n\n\n\n\n        [user@~/dev/nordic_blinky]$ newt target build blink_nordic\n        Building target blink_nordic (project = blinky)\n        Compiling case.c\n        Compiling suite.c\n        Compiling testutil.c\n        Compiling testutil_arch_arm.c\n        Archiving libtestutil.a\n        Compiling os.c\n        Compiling os_callout.c\n        Compiling os_eventq.c\n        Compiling os_heap.c\n        Compiling os_mbuf.c\n        Compiling os_mempool.c\n        Compiling os_mutex.c\n        Compiling os_sanity.c\n        Compiling os_sched.c\n        Compiling os_sem.c\n        Compiling os_task.c\n        Compiling os_time.c\n        Compiling os_arch_arm.c\n        Assembling HAL_CM4.s\n        Assembling SVC_Table.s\n        Archiving libos.a\n        Compiling hal_cputime.c\n        Compiling hal_gpio.c\n        Compiling hal_uart.c\n        Archiving libnrf52xxx.a\n        Compiling cmsis_nvic.c\n        Compiling hal_bsp.c\n        Compiling libc_stubs.c\n        Compiling os_bsp.c\n        Compiling sbrk.c\n        Compiling system_nrf52.c\n        Assembling gcc_startup_nrf52.s\n        Archiving libnrf52pdk.a\n        Compiling main.c\n        Building project blinky\n        Linking blinky.elf\n        Successfully run!\n\n\n\n\n\n\n\n\nIn order to be able to communicate with the SEGGER J-Link debugger on the dev board, you have to download and install the J-Link GDB Server software on to your laptop. You may download the \"Software and documentation pack for Mac OS X\" from \nhttps://www.segger.com/jlink-software.html\n. The command line version of the server is used in the steps below. \n\n\n\n\n\n\nOpen a new terminal and start a J-Link session.\n\n\n\n\n\n\n        [user@~/dev/nordic_blinky/project/blinky/bin]$ which JLinkGDBServer\n        /usr/local/bin/JLinkGDBServer\n        [user@~/dev/nordic_blinky/project/blinky/bin]$ JLinkGDBServer -if SWD\n        SEGGER J-Link GDB Server V5.02f Command Line Version\n\n        JLinkARM.dll V5.02f (DLL compiled Oct  2 2015 20:55:03)\n\n        -----GDB Server start settings-----\n        GDBInit file:                  none\n        GDB Server Listening port:     2331\n        SWO raw output listening port: 2332\n        Terminal I/O port:             2333\n        Accept remote connection:      yes\n        Generate logfile:              off\n        Verify download:               off\n        Init regs on start:            off\n        Silent mode:                   off\n        Single run mode:               off\n        Target connection timeout:     0 ms\n        ------J-Link related settings------\n        J-Link Host interface:         USB\n        J-Link script:                 none\n        J-Link settings file:          none\n        ------Target related settings------\n        Target device:                 unspecified\n        Target interface:              SWD\n        Target interface speed:        1000kHz\n        Target endian:                 little\n\n        Connecting to J-Link...\n        J-Link is connected.\n        Firmware: J-Link OB-SAM3U128-V2-NordicSemi compiled Aug 28 2015 19:26:24\n        Hardware: V1.00\n        S/N: 682371959\n        Checking target voltage...\n        Target voltage: 3.30 V\n        Listening on TCP/IP port 2331\n        Connecting to target...Connected to target\n        Waiting for GDB connection...Connected to 127.0.0.1\n\n\n\n\n\n\nYou need a configuration file for the GDB session to be opened correctly and the image (\"blinky.elf\") you built for this target downloaded to flash. A sample config script is given below. Alternatively, you could choose to type each command at the gdb prompt.\n\n\n\n\n         [user@~/dev/nordic_blinky/project/blinky/bin/blink_nordic]$ cat jlink-gdb.cfg \n         echo ***Setting up the environment for debugging gdb.***\\n\n         set complaints 1\n         set prompt (gdb) \n         set endian little\n         echo \\n*** Set target charset ASCII\\n\n         set target-charset ASCII\n         echo \\n*** Connecting over port #2331 ***\\n\n         target remote localhost:2331\n         echo \\n*** Enable flash write and set device to nrf52 ***\\n\n         monitor flash download=1\n         monitor flash device=nRF52\n         echo \\n*** loading blinky.elf ***\\n\n         load ~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf \n         symbol-file ~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf\n         echo \\n*** Resetting target ***\\n\n         monitor reset\n         echo \\n*** Halting target ***\\n\n         monitor halt\n\n\n\n\n\n\nStart the gdb session and monitor that it loads the image, resets the target, and halts for a command to continue. \n\n\n\n\n        [user@~/dev/nordic_blinky/project/blinky/bin/blink_nordic]$ arm-none-eabi-gdb -x ~/dev/nordic_blinky/project/blinky/bin/blink_nordic/jlink-gdb.cfg\n\n        GNU gdb (GNU Tools for ARM Embedded Processors) 7.8.0.20150604-cvs\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        License GPLv3+: GNU GPL version 3 or later \nhttp://gnu.org/licenses/gpl.html\n\n        This is free software: you are free to change and redistribute it.\n        There is NO WARRANTY, to the extent permitted by law.  Type \nshow copying\n\n        and \nshow warranty\n for details.\n        This GDB was configured as \n--host=x86_64-apple-darwin10 --target=arm-none-eabi\n.\n        Type \nshow configuration\n for configuration details.\n        For bug reporting instructions, please see:\n        \nhttp://www.gnu.org/software/gdb/bugs/\n.\n        Find the GDB manual and other documentation resources online at:\n        \nhttp://www.gnu.org/software/gdb/documentation/\n.\n        For help, type \nhelp\n.\n        Type \napropos word\n to search for commands related to \nword\n.\n\n        ***Setting up the environment for debugging gdb.***\n        The target is assumed to be little endian\n\n        *** Set target charset ASCII\n\n        *** Connecting over port #2331 ***\n        0x00003c34 in ?? ()\n\n        *** Enable flash write and set device to nrf52 ***\n        Flash download enabled\n        Selecting device: nRF52\n\n        *** loading blinky.elf ***\n        Loading section .text, size 0x5c84 lma 0x0\n        Loading section .ARM.extab, size 0x24 lma 0x5c84\n        Loading section .ARM.exidx, size 0xd8 lma 0x5ca8\n        Loading section .data, size 0x8f8 lma 0x5d80\n        Start address 0x48c, load size 26232\n        Transfer rate: 12808 KB/sec, 2914 bytes/write.\n        During symbol reading, unexpected overlap between:\n         (A) section `.text' from `~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf' [0x0, 0x5c84)\n         (B) section `*COM*' from `~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf' [0x0, 0x0).\n        Will ignore section B.\n\n        *** Resetting target ***\n        Resetting target\n\n        *** Halting target ***\n\n\n\n\n\n\nType 'c' to continue. The LED on the board will start to blink. You will also see some activity in the terminal showing the open J-Link GDB server connection. The LED will continue to blink after you quit out of that connection.\n\n\n\n\n        (gdb) c\n        Continuing.", 
            "title": "Blinky on nRF52"
        }, 
        {
            "location": "/os/tutorials/nRF52/#blinky-on-nrf52-board", 
            "text": "", 
            "title": "Blinky on nRF52 board"
        }, 
        {
            "location": "/os/tutorials/nRF52/#objective", 
            "text": "Download a generic firmware skeleton (\"bootstrap image\") that applies to any hardware and then throw in additional applicable pkgs to generate a build for a specific board, namely the\nnRF52 Series chip from Nordic Semiconductors.", 
            "title": "Objective"
        }, 
        {
            "location": "/os/tutorials/nRF52/#hardware-needed", 
            "text": "nRF52 Development Kit  Laptop running Mac OS", 
            "title": "Hardware needed"
        }, 
        {
            "location": "/os/tutorials/nRF52/#step-by-step-instructions-to-build-image", 
            "text": "The first step is to download the generic skeleton of the project. The eggs installed are not hardware architecture specific.           []user@~/dev]$ newt nest create nordic_blinky\n        Downloading nest skeleton from https://www.github.com/mynewt/tadpole... ok!\n        Nest nordic_blinky successfully created in ~dev/nordic_blinky\n\n        user@~/dev$ cd nordic_blinky/   Then, the clutch of eggs named larva is added from the nest (also named larva) on the github. This step simply downloads the clutch description file and does not actually install the eggs that constitute the clutch. The clutch description file ( clutch.yml ) will be used to check dependencies during the egg install to ensure completeness. It serves as a reference for all the eggs in the clutch that one can choose from and install.           []user@~/dev/nordic_blinky]$ newt nest add-clutch larva https://github.com/mynewt/larva\n        Downloading clutch.yml from https://github.com/mynewt/larva/master... ok!\n        Verifying clutch.yml format...ok!\n        Clutch larva successfully installed to Nest.   The next step is to install relevant eggs from the larva nest on github. The instructions assume that you know what application or project you are interested in (the blinky application, in this case), what hardware you are using (STM32F3DISCOVERY board, in this case) and hence, what board support package you need.            [user@~/dev/nordic_blinky]$ newt egg install project/blinky \n        Downloading larva from https://github.com/mynewt/larva//master... ok!\n        Installing project/blinky\n        Installation was a success!\n\n\n        [user@~/dev/nordic_blinky]$ newt egg install hw/bsp/nrf52pdk\n        Downloading larva from https://github.com/mynewt/larva//master... ok!\n        Installing hw/bsp/nrf52pdk\n        Installing hw/mcu/nordic/nrf52xxx\n        Installing libs/cmsis-core\n        Installing compiler/arm-none-eabi-m4\n        Installation was a success!   It's time to create a target for the project and define the target attributes.            [user@~/dev/nordic_blinky]$ newt target create blink_nordic\n        Creating target blink_nordic\n        Target blink_nordic successfully created!\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic project=blinky\n        Target blink_nordic successfully set project to blinky\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic bsp=hw/bsp/nrf52pdk\n        Target blink_nordic successfully set bsp to hw/bsp/nrf52pdk\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic compiler_def=debug\n        Target blink_nordic successfully set compiler_def to debug\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic compiler=arm-none-eabi-m4\n        Target blink_nordic successfully set compiler to arm-none-eabi-m4\n        [user@~/dev/nordic_blinky]$ newt target set blink_nordic arch=cortex_m4\n        Target blink_nordic successfully set arch to cortex_m4\n        [user@~/dev/nordic_blinky]$ newt target show\n        blink_nordic\n            compiler: arm-none-eabi-m4\n            name: blink_nordic\n            arch: cortex_m4\n            project: blinky\n            bsp: hw/bsp/nrf52pdk\n            compiler_def: debug   Finally, you get to build the target and generate an executable that can now be uploaded to the board via the on-board SEGGER J-Link debugger.            [user@~/dev/nordic_blinky]$ newt target build blink_nordic\n        Building target blink_nordic (project = blinky)\n        Compiling case.c\n        Compiling suite.c\n        Compiling testutil.c\n        Compiling testutil_arch_arm.c\n        Archiving libtestutil.a\n        Compiling os.c\n        Compiling os_callout.c\n        Compiling os_eventq.c\n        Compiling os_heap.c\n        Compiling os_mbuf.c\n        Compiling os_mempool.c\n        Compiling os_mutex.c\n        Compiling os_sanity.c\n        Compiling os_sched.c\n        Compiling os_sem.c\n        Compiling os_task.c\n        Compiling os_time.c\n        Compiling os_arch_arm.c\n        Assembling HAL_CM4.s\n        Assembling SVC_Table.s\n        Archiving libos.a\n        Compiling hal_cputime.c\n        Compiling hal_gpio.c\n        Compiling hal_uart.c\n        Archiving libnrf52xxx.a\n        Compiling cmsis_nvic.c\n        Compiling hal_bsp.c\n        Compiling libc_stubs.c\n        Compiling os_bsp.c\n        Compiling sbrk.c\n        Compiling system_nrf52.c\n        Assembling gcc_startup_nrf52.s\n        Archiving libnrf52pdk.a\n        Compiling main.c\n        Building project blinky\n        Linking blinky.elf\n        Successfully run!    In order to be able to communicate with the SEGGER J-Link debugger on the dev board, you have to download and install the J-Link GDB Server software on to your laptop. You may download the \"Software and documentation pack for Mac OS X\" from  https://www.segger.com/jlink-software.html . The command line version of the server is used in the steps below.     Open a new terminal and start a J-Link session.            [user@~/dev/nordic_blinky/project/blinky/bin]$ which JLinkGDBServer\n        /usr/local/bin/JLinkGDBServer\n        [user@~/dev/nordic_blinky/project/blinky/bin]$ JLinkGDBServer -if SWD\n        SEGGER J-Link GDB Server V5.02f Command Line Version\n\n        JLinkARM.dll V5.02f (DLL compiled Oct  2 2015 20:55:03)\n\n        -----GDB Server start settings-----\n        GDBInit file:                  none\n        GDB Server Listening port:     2331\n        SWO raw output listening port: 2332\n        Terminal I/O port:             2333\n        Accept remote connection:      yes\n        Generate logfile:              off\n        Verify download:               off\n        Init regs on start:            off\n        Silent mode:                   off\n        Single run mode:               off\n        Target connection timeout:     0 ms\n        ------J-Link related settings------\n        J-Link Host interface:         USB\n        J-Link script:                 none\n        J-Link settings file:          none\n        ------Target related settings------\n        Target device:                 unspecified\n        Target interface:              SWD\n        Target interface speed:        1000kHz\n        Target endian:                 little\n\n        Connecting to J-Link...\n        J-Link is connected.\n        Firmware: J-Link OB-SAM3U128-V2-NordicSemi compiled Aug 28 2015 19:26:24\n        Hardware: V1.00\n        S/N: 682371959\n        Checking target voltage...\n        Target voltage: 3.30 V\n        Listening on TCP/IP port 2331\n        Connecting to target...Connected to target\n        Waiting for GDB connection...Connected to 127.0.0.1   You need a configuration file for the GDB session to be opened correctly and the image (\"blinky.elf\") you built for this target downloaded to flash. A sample config script is given below. Alternatively, you could choose to type each command at the gdb prompt.            [user@~/dev/nordic_blinky/project/blinky/bin/blink_nordic]$ cat jlink-gdb.cfg \n         echo ***Setting up the environment for debugging gdb.***\\n\n         set complaints 1\n         set prompt (gdb) \n         set endian little\n         echo \\n*** Set target charset ASCII\\n\n         set target-charset ASCII\n         echo \\n*** Connecting over port #2331 ***\\n\n         target remote localhost:2331\n         echo \\n*** Enable flash write and set device to nrf52 ***\\n\n         monitor flash download=1\n         monitor flash device=nRF52\n         echo \\n*** loading blinky.elf ***\\n\n         load ~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf \n         symbol-file ~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf\n         echo \\n*** Resetting target ***\\n\n         monitor reset\n         echo \\n*** Halting target ***\\n\n         monitor halt   Start the gdb session and monitor that it loads the image, resets the target, and halts for a command to continue.            [user@~/dev/nordic_blinky/project/blinky/bin/blink_nordic]$ arm-none-eabi-gdb -x ~/dev/nordic_blinky/project/blinky/bin/blink_nordic/jlink-gdb.cfg\n\n        GNU gdb (GNU Tools for ARM Embedded Processors) 7.8.0.20150604-cvs\n        Copyright (C) 2014 Free Software Foundation, Inc.\n        License GPLv3+: GNU GPL version 3 or later  http://gnu.org/licenses/gpl.html \n        This is free software: you are free to change and redistribute it.\n        There is NO WARRANTY, to the extent permitted by law.  Type  show copying \n        and  show warranty  for details.\n        This GDB was configured as  --host=x86_64-apple-darwin10 --target=arm-none-eabi .\n        Type  show configuration  for configuration details.\n        For bug reporting instructions, please see:\n         http://www.gnu.org/software/gdb/bugs/ .\n        Find the GDB manual and other documentation resources online at:\n         http://www.gnu.org/software/gdb/documentation/ .\n        For help, type  help .\n        Type  apropos word  to search for commands related to  word .\n\n        ***Setting up the environment for debugging gdb.***\n        The target is assumed to be little endian\n\n        *** Set target charset ASCII\n\n        *** Connecting over port #2331 ***\n        0x00003c34 in ?? ()\n\n        *** Enable flash write and set device to nrf52 ***\n        Flash download enabled\n        Selecting device: nRF52\n\n        *** loading blinky.elf ***\n        Loading section .text, size 0x5c84 lma 0x0\n        Loading section .ARM.extab, size 0x24 lma 0x5c84\n        Loading section .ARM.exidx, size 0xd8 lma 0x5ca8\n        Loading section .data, size 0x8f8 lma 0x5d80\n        Start address 0x48c, load size 26232\n        Transfer rate: 12808 KB/sec, 2914 bytes/write.\n        During symbol reading, unexpected overlap between:\n         (A) section `.text' from `~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf' [0x0, 0x5c84)\n         (B) section `*COM*' from `~/dev/nordic_blinky/project/blinky/bin/blink_nordic/blinky.elf' [0x0, 0x0).\n        Will ignore section B.\n\n        *** Resetting target ***\n        Resetting target\n\n        *** Halting target ***   Type 'c' to continue. The LED on the board will start to blink. You will also see some activity in the terminal showing the open J-Link GDB server connection. The LED will continue to blink after you quit out of that connection.           (gdb) c\n        Continuing.", 
            "title": "Step by Step Instructions to build image"
        }, 
        {
            "location": "/os/tutorials/arduino_zero/", 
            "text": "", 
            "title": "Blinky on Arduino Zero"
        }, 
        {
            "location": "/os/tutorials/unit_test/", 
            "text": "How to Test an Egg", 
            "title": "Unit Testing a Package"
        }, 
        {
            "location": "/os/tutorials/unit_test/#how-to-test-an-egg", 
            "text": "", 
            "title": "How to Test an Egg"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/", 
            "text": "How to Edit Docs\n\n\nObjective\n\n\nLearn the process of editing docs by adding some content to a test document.\n\n\nMarkdown, MkDocs, Mou\n\n\nThe Mynewt documentation you see on the Apache incubator website is a bunch of HTML files generated using MkDocs which is a simple static site generation tool geared towards building project documentation. You can read about it at \nhttp://www.mkdocs.org\n. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Markdown is a lightweight markup language with plain text formatting syntax designed so that it can be converted to HTML and many other formats using a tool (which in our case is MkDocs).\n\n\nYou do not need to install MkDocs unless you want to actually render your documentation in HTML in order to preview it before pushing your content to the remote repository. Typically, using a Markdown editor such as \nMou\n is enough to check how it will look after the document has gone through MkDocs. Go ahead and download \nMou\n. If you are on a Windows machine, download the \neditor of your choice\n.\n\n\nCurrently someone in the project is designated to use MkDocs to generate the HTML pages periodically after changes have been reviewed and accepted into the master branch.\n\n\nAccess to the Apache repo\n\n\nGet an account on Apache. You do not need a committer account to view the website or clone the repository but you need it to push changes to it.\n\n\nIf you are not a committer, you may follow the proposed non-committer workflow to share your work. The direct link to the proposed workflow is \nhttps://git-wip-us.apache.org/docs/workflow.html\n. You will find the steps described in more detail later in this tutorial.\n\n\nMaking a local copy\n\n\n\n\nCopy the document source files into a local directory and look at the contents of the copied directory to get an idea of the directory structure. Use http instead of https if you are a non-committer.\n\n\n\n\n        $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git\n        Cloning into 'incubator-mynewt-site'...\n        remote: Counting objects: 330, done.\n        remote: Compressing objects: 100% (263/263), done.\n        remote: Total 330 (delta 120), reused 0 (delta 0)\n        Receiving objects: 100% (330/330), 4.34 MiB | 830.00 KiB/s, done.\n        Resolving deltas: 100% (120/120), done.\n        Checking connectivity... done.\n        $ ls\n        incubator-mynewt-site\n        $ ls incubator-mynewt-site/\n        docs        images      mkdocs.yml\n\n\n\n\n\n\nCreate a new branch to work on your documentation and move to that branch.\n\n\n\n\n        $ git checkout -b \nyour-branch-name\n\n\n\n\n\nFile to be edited\n\n\nThe file you will edit is named try_markdown.md. It is in the incubator-mynewt-site/docs/os/tutorials/ directory.\n\n\nEditing an existing page\n\n\n\n\n\n\nOpen the application Mou.\n\n\n\n\n\n\nOpen the file incubator-mynewt-site/docs/os/tutorials/try_markdown.md in Mou.\n\n\n\n\n\n\nEdit the last item on the list.\n\n\n\n\n\n\nSave and quit the application.\n\n\n\n\n\n\nAdding a new page\n\n\nIf you create a new file somewhere in the \ndocs\n subdirectory to add a new page, you have to add a line in the \nmkdocs.yml\n file at the correct level. For example, if you add a new module named \"Ethernet\" by creating a new file named \nethernet.md\n in the \nmodules\n subdirectory, you have to insert the following line under \nModules:\n in the \nmkdocs.yml\n file.\n\n\n        - 'Ethernet': 'modules/ethernet.md'\n\n\n\n\nPushing changes to remote as a committer\n\n\nIf you are not a committer yet, skip this section and proceed to the \nnext section\n.\n\n\n\n\nCheck whether your remote git repository is set up. If you see the remote location as shown below you can skip the next step.\n\n\n\n\n        $ git remote -v\n        origin  https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git (fetch)\n        origin  https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git (push)\n\n\n\n\n\n\nIf, however, you do not see your remote repository, then set it up as follows.\n\n\n\n\n        $ git remote add origin https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git \n\n\n\n\n\n\nFirst check the git status. It will show you that the \ntry_markdown.md\n document has been modified. So you will stage a commit, and then commit the change. Finally, you will push the changes to the remote repository. \n\n\n\n\nDuring staging below using \ngit add\n, we use the \n-A\n option indicating you want to stage all your modifications. Instead, you can choose to specify only the files that you want to. The commit message (specified after \n-m\n) should summarize what your changes are about.\n\n\n        $ git status\n        $ git add -A \n        $ git commit -m \nMy first doc change as a trial run\n\n        $ git push -u origin \nyour-branch-name\n\n\n\n\n\n\n\n\n\nYou can see the changed Markdown file if you traverse the tree on the git repository \n https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git\n.\n\n\n\n\n\n\nA commit notification automatically goes out to the commits@mynewt.incubator.apache.org mailing list. The \"upstream\" manager pulls the notified changes, reviews it, and merges it to the master branch if all is well. Otherwise you get an email for further changes.\n\n\n\n\n\n\nSharing changes as a non-committer\n\n\nWe suggest you follow the proposed non-committer workflow at Apache to share your work. The direct link to the proposed workflow is \nhttps://git-wip-us.apache.org/docs/workflow.html\n. \n\n\n\n\nAssuming you have made changes to the example file, you will first commit your changes.\n\n\n\n\n        $ git add -A \n        $ git commit -m \nMy first doc change as a trial run\n\n\n\n\n\n\n\nOnce you're ready to share your changes with the rest of the project team, you can use the git format-patch command to produce a patch file (or a nice set of patches in the future) and email the patch file to dev@mynewt.incubator.apache.org. Later on you may attach multiple files in your email to the mailing list as part of an existing thread or a new one. Remember to summarize the issue you have tackled and your work if the commit message is not detailed enough.\n\n\n\n\nIf there is a JIRA ticket associated with your work you should post your patch files to the ticket.\n\n\n        $ git format-patch origin/trunk\n\n\n\n\n\n\nAlternatively, you can use the mirror on github.com to submit a pull request. The mirror is located at \nhttps://github.com/apache/incubator-mynewt-site\n. It is up to you to decide whether to create a fork or a branch to work in and submit pull requests from. Remember you cannot push changes to the master on the github mirror, so you have to create a fork or a branch first. Your pull request will be reviewed by a committer for docs and merged into the master branch when the changes are understood and accepted. \n\n\n\n\nConversion to HTML\n\n\nThe conversion of the Markdown files to HTML for the website happens manually and statically using MkDocs. You cannot see automatic and immediate rendering in HTML upon making a change in the Markdown file. You can choose to stop here and proceed to changing other Markdown files in your branch.\n\n\nLocal preview of HTML files\n\n\nHowever, you have the option to download MkDocs and do a local conversion yourself to preview the pages using the built-in devserver that comes with MkDocs. But first you will have to install MkDocs for that. In order to install MkDocs you'll need Python installed on your system, as well as the Python package manager, pip. You can check if you have them already (usually you will).\n\n\n        $ python --version\n        Python 2.7.2\n        $ pip --version\n        pip 1.5.2\n        $ pip install mkdocs\n\n\n\n\nYou will then run the built-in webserver from the root of the documentation directory using the command \nmkdocs serve\n. The root directory for documentation is \nincubator-mynewt-site\n or the directory with the \nmkdocs.yml\n file.\n\n\n        $ ls\n        docs        images      mkdocs.yml\n        $ mkdocs serve\n\n\n\n\nThen go to \nhttp://127.0.0.1:8000\n to preview your pages and see how they will look on the website! Remember that the Myself website itself will not be updated.\n\n\nFor more information on MkDocs go to \nhttp://www.mkdocs.org\n.", 
            "title": "Edit Docs"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#how-to-edit-docs", 
            "text": "", 
            "title": "How to Edit Docs"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#objective", 
            "text": "Learn the process of editing docs by adding some content to a test document.", 
            "title": "Objective"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#markdown-mkdocs-mou", 
            "text": "The Mynewt documentation you see on the Apache incubator website is a bunch of HTML files generated using MkDocs which is a simple static site generation tool geared towards building project documentation. You can read about it at  http://www.mkdocs.org . Documentation source files are written in Markdown, and configured with a single YAML configuration file. Markdown is a lightweight markup language with plain text formatting syntax designed so that it can be converted to HTML and many other formats using a tool (which in our case is MkDocs).  You do not need to install MkDocs unless you want to actually render your documentation in HTML in order to preview it before pushing your content to the remote repository. Typically, using a Markdown editor such as  Mou  is enough to check how it will look after the document has gone through MkDocs. Go ahead and download  Mou . If you are on a Windows machine, download the  editor of your choice .  Currently someone in the project is designated to use MkDocs to generate the HTML pages periodically after changes have been reviewed and accepted into the master branch.", 
            "title": "Markdown, MkDocs, Mou"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#access-to-the-apache-repo", 
            "text": "Get an account on Apache. You do not need a committer account to view the website or clone the repository but you need it to push changes to it.  If you are not a committer, you may follow the proposed non-committer workflow to share your work. The direct link to the proposed workflow is  https://git-wip-us.apache.org/docs/workflow.html . You will find the steps described in more detail later in this tutorial.", 
            "title": "Access to the Apache repo"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#making-a-local-copy", 
            "text": "Copy the document source files into a local directory and look at the contents of the copied directory to get an idea of the directory structure. Use http instead of https if you are a non-committer.           $ git clone https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git\n        Cloning into 'incubator-mynewt-site'...\n        remote: Counting objects: 330, done.\n        remote: Compressing objects: 100% (263/263), done.\n        remote: Total 330 (delta 120), reused 0 (delta 0)\n        Receiving objects: 100% (330/330), 4.34 MiB | 830.00 KiB/s, done.\n        Resolving deltas: 100% (120/120), done.\n        Checking connectivity... done.\n        $ ls\n        incubator-mynewt-site\n        $ ls incubator-mynewt-site/\n        docs        images      mkdocs.yml   Create a new branch to work on your documentation and move to that branch.           $ git checkout -b  your-branch-name", 
            "title": "Making a local copy"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#file-to-be-edited", 
            "text": "The file you will edit is named try_markdown.md. It is in the incubator-mynewt-site/docs/os/tutorials/ directory.", 
            "title": "File to be edited"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#editing-an-existing-page", 
            "text": "Open the application Mou.    Open the file incubator-mynewt-site/docs/os/tutorials/try_markdown.md in Mou.    Edit the last item on the list.    Save and quit the application.", 
            "title": "Editing an existing page"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#adding-a-new-page", 
            "text": "If you create a new file somewhere in the  docs  subdirectory to add a new page, you have to add a line in the  mkdocs.yml  file at the correct level. For example, if you add a new module named \"Ethernet\" by creating a new file named  ethernet.md  in the  modules  subdirectory, you have to insert the following line under  Modules:  in the  mkdocs.yml  file.          - 'Ethernet': 'modules/ethernet.md'", 
            "title": "Adding a new page"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#pushing-changes-to-remote-as-a-committer", 
            "text": "If you are not a committer yet, skip this section and proceed to the  next section .   Check whether your remote git repository is set up. If you see the remote location as shown below you can skip the next step.           $ git remote -v\n        origin  https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git (fetch)\n        origin  https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git (push)   If, however, you do not see your remote repository, then set it up as follows.           $ git remote add origin https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git    First check the git status. It will show you that the  try_markdown.md  document has been modified. So you will stage a commit, and then commit the change. Finally, you will push the changes to the remote repository.    During staging below using  git add , we use the  -A  option indicating you want to stage all your modifications. Instead, you can choose to specify only the files that you want to. The commit message (specified after  -m ) should summarize what your changes are about.          $ git status\n        $ git add -A \n        $ git commit -m  My first doc change as a trial run \n        $ git push -u origin  your-branch-name     You can see the changed Markdown file if you traverse the tree on the git repository   https://git-wip-us.apache.org/repos/asf/incubator-mynewt-site.git .    A commit notification automatically goes out to the commits@mynewt.incubator.apache.org mailing list. The \"upstream\" manager pulls the notified changes, reviews it, and merges it to the master branch if all is well. Otherwise you get an email for further changes.", 
            "title": "Pushing changes to remote as a committer"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#sharing-changes-as-a-non-committer", 
            "text": "We suggest you follow the proposed non-committer workflow at Apache to share your work. The direct link to the proposed workflow is  https://git-wip-us.apache.org/docs/workflow.html .    Assuming you have made changes to the example file, you will first commit your changes.           $ git add -A \n        $ git commit -m  My first doc change as a trial run    Once you're ready to share your changes with the rest of the project team, you can use the git format-patch command to produce a patch file (or a nice set of patches in the future) and email the patch file to dev@mynewt.incubator.apache.org. Later on you may attach multiple files in your email to the mailing list as part of an existing thread or a new one. Remember to summarize the issue you have tackled and your work if the commit message is not detailed enough.   If there is a JIRA ticket associated with your work you should post your patch files to the ticket.          $ git format-patch origin/trunk   Alternatively, you can use the mirror on github.com to submit a pull request. The mirror is located at  https://github.com/apache/incubator-mynewt-site . It is up to you to decide whether to create a fork or a branch to work in and submit pull requests from. Remember you cannot push changes to the master on the github mirror, so you have to create a fork or a branch first. Your pull request will be reviewed by a committer for docs and merged into the master branch when the changes are understood and accepted.", 
            "title": "Sharing changes as a non-committer"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#conversion-to-html", 
            "text": "The conversion of the Markdown files to HTML for the website happens manually and statically using MkDocs. You cannot see automatic and immediate rendering in HTML upon making a change in the Markdown file. You can choose to stop here and proceed to changing other Markdown files in your branch.", 
            "title": "Conversion to HTML"
        }, 
        {
            "location": "/os/tutorials/how_to_edit_docs/#local-preview-of-html-files", 
            "text": "However, you have the option to download MkDocs and do a local conversion yourself to preview the pages using the built-in devserver that comes with MkDocs. But first you will have to install MkDocs for that. In order to install MkDocs you'll need Python installed on your system, as well as the Python package manager, pip. You can check if you have them already (usually you will).          $ python --version\n        Python 2.7.2\n        $ pip --version\n        pip 1.5.2\n        $ pip install mkdocs  You will then run the built-in webserver from the root of the documentation directory using the command  mkdocs serve . The root directory for documentation is  incubator-mynewt-site  or the directory with the  mkdocs.yml  file.          $ ls\n        docs        images      mkdocs.yml\n        $ mkdocs serve  Then go to  http://127.0.0.1:8000  to preview your pages and see how they will look on the website! Remember that the Myself website itself will not be updated.  For more information on MkDocs go to  http://www.mkdocs.org .", 
            "title": "Local preview of HTML files"
        }, 
        {
            "location": "/os/core_os/mynewt_os/", 
            "text": "Mynewt OS\n\n\nInsert introduction here  \n\n\nReal-Time Kernel \n\n\nDescription\n\n\nReal-Time OS \n\n\nDescription\n\n\nInsert topic of your choice\n\n\nDescription\n\n\nFeatures\n\n\n\n\n\n\nScheduler/context switching\n\n\nTime\n\n\nTasks\n\n\nEvent queues/callouts\n\n\nSemaphores\n\n\nMutexes\n\n\nMemory pools\n\n\nHeap\n\n\nMbufs\n\n\nSanity\n\n\nCallouts\n\n\nPorting OS to other platforms\n\n\n\n\nOS Functions\n\n\nThe functions available at the OS level are:\n\n\n\n\nos_init\n\n\nos_start\n\n\nos_started", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/mynewt_os/#mynewt-os", 
            "text": "Insert introduction here", 
            "title": "Mynewt OS"
        }, 
        {
            "location": "/os/core_os/mynewt_os/#real-time-kernel", 
            "text": "Description", 
            "title": "Real-Time Kernel "
        }, 
        {
            "location": "/os/core_os/mynewt_os/#real-time-os", 
            "text": "Description", 
            "title": "Real-Time OS "
        }, 
        {
            "location": "/os/core_os/mynewt_os/#insert-topic-of-your-choice", 
            "text": "Description", 
            "title": "Insert topic of your choice"
        }, 
        {
            "location": "/os/core_os/mynewt_os/#features", 
            "text": "Scheduler/context switching  Time  Tasks  Event queues/callouts  Semaphores  Mutexes  Memory pools  Heap  Mbufs  Sanity  Callouts  Porting OS to other platforms", 
            "title": "Features"
        }, 
        {
            "location": "/os/core_os/mynewt_os/#os-functions", 
            "text": "The functions available at the OS level are:   os_init  os_start  os_started", 
            "title": "OS Functions"
        }, 
        {
            "location": "/os/core_os/os_init/", 
            "text": "", 
            "title": "os_init"
        }, 
        {
            "location": "/os/core_os/os_start/", 
            "text": "", 
            "title": "os_start"
        }, 
        {
            "location": "/os/core_os/os_started/", 
            "text": "", 
            "title": "os_started"
        }, 
        {
            "location": "/os/core_os/context_switch/context_switch/", 
            "text": "Scheduler/Context Switching\n\n\nScheduler's job is to maintain the list of tasks and decide which one should be running next.\n\n\nDescription\n\n\nTask states can be \nrunning\n, \nready to run\n or \nsleeping\n.\n\n\nWhen task is \nrunning\n, CPU is executing in that task's context. The program counter (PC) is pointing to instructions task wants to execute and stack pointer (SP) is pointing to task's stack.\n\n\nTask which is \nready to run\n wants to get on the CPU to do its work.\n\n\nTask which is \nsleeping\n has no more work to do. It's waiting for someone else to wake it up.\n\n\nScheduler algorithm is simple: from among the tasks which are ready to run, pick the the one with highest priority (lowest numeric value in task's t_prio field), and make its state \nrunning\n.\n\n\nTasks which are either \nrunning\n or \nready to run\n are kept in linked list \ng_os_run_list\n. This list is ordered by priority.\n\n\nTasks which are \nsleeping\n are kept in linked list \ng_os_sleep_list\n.\n\n\nScheduler has a CPU architecture specific component; this code is responsible for swapping in the task which should be \nrunning\n. This process is called context switch. During context switching the state of the CPU (e.g. registers) for the currently \nrunning\n task is stored and the new task is swapped in.\n\n\nData structures\n\n\nList of Functions\n\n\nThe functions available in context_switch are:\n\n\n\n\nos_sched\n\n\nos_arch_ctx_sw\n\n\nos_arch_ctx_sw_isr\n\n\nos_sched_ctx_sw_hook\n\n\nos_sched_get_current_task\n\n\nos_sched_insert\n\n\nos_sched_next_task\n\n\nos_sched_os_timer_exp\n\n\nos_sched_resort\n\n\nos_sched_set_current_task\n\n\nos_sched_sleep\n\n\nos_sched_wakeup", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/context_switch/context_switch/#schedulercontext-switching", 
            "text": "Scheduler's job is to maintain the list of tasks and decide which one should be running next.", 
            "title": "Scheduler/Context Switching"
        }, 
        {
            "location": "/os/core_os/context_switch/context_switch/#description", 
            "text": "Task states can be  running ,  ready to run  or  sleeping .  When task is  running , CPU is executing in that task's context. The program counter (PC) is pointing to instructions task wants to execute and stack pointer (SP) is pointing to task's stack.  Task which is  ready to run  wants to get on the CPU to do its work.  Task which is  sleeping  has no more work to do. It's waiting for someone else to wake it up.  Scheduler algorithm is simple: from among the tasks which are ready to run, pick the the one with highest priority (lowest numeric value in task's t_prio field), and make its state  running .  Tasks which are either  running  or  ready to run  are kept in linked list  g_os_run_list . This list is ordered by priority.  Tasks which are  sleeping  are kept in linked list  g_os_sleep_list .  Scheduler has a CPU architecture specific component; this code is responsible for swapping in the task which should be  running . This process is called context switch. During context switching the state of the CPU (e.g. registers) for the currently  running  task is stored and the new task is swapped in.", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/context_switch/context_switch/#data-structures", 
            "text": "", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/context_switch/context_switch/#list-of-functions", 
            "text": "The functions available in context_switch are:   os_sched  os_arch_ctx_sw  os_arch_ctx_sw_isr  os_sched_ctx_sw_hook  os_sched_get_current_task  os_sched_insert  os_sched_next_task  os_sched_os_timer_exp  os_sched_resort  os_sched_set_current_task  os_sched_sleep  os_sched_wakeup", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched/", 
            "text": "os_sched \n\n\nvoid os_sched(struct os_task *next_t, int isr)\n\n\n\n\nPerforms context switch if needed. If \nnext_t\n is set, that task will be made \nrunning\n. If \nnext_t\n is NULL, highest priority \nready to run\n is swapped in. This function can be called when new tasks were made \nready to run\n or if the current task is moved to \nsleeping\n state.\n\n\nThis function will call the architecture specific routine to swap in the new task.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnext_t\n\n\nPointer to task which must run next (optional)\n\n\n\n\n\n\nisr\n\n\nFlag indicating whether function is called from interrupt handler or not\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nInterrupts must be disabled when calling this.\n\n\nExample\n\n\n\n\nos_error_t\nos_mutex_release(struct os_mutex *mu)\n{\n    ...\n    OS_EXIT_CRITICAL(sr);\n\n    /* Re-schedule if needed */\n    if (resched) {\n        os_sched(rdy, 0);\n    }\n\n    return OS_OK;\n\n}", 
            "title": "os_sched"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched/#os_sched", 
            "text": "void os_sched(struct os_task *next_t, int isr)  Performs context switch if needed. If  next_t  is set, that task will be made  running . If  next_t  is NULL, highest priority  ready to run  is swapped in. This function can be called when new tasks were made  ready to run  or if the current task is moved to  sleeping  state.  This function will call the architecture specific routine to swap in the new task.", 
            "title": " os_sched "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched/#arguments", 
            "text": "Arguments  Description      next_t  Pointer to task which must run next (optional)    isr  Flag indicating whether function is called from interrupt handler or not", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched/#notes", 
            "text": "Interrupts must be disabled when calling this.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched/#example", 
            "text": "os_error_t\nos_mutex_release(struct os_mutex *mu)\n{\n    ...\n    OS_EXIT_CRITICAL(sr);\n\n    /* Re-schedule if needed */\n    if (resched) {\n        os_sched(rdy, 0);\n    }\n\n    return OS_OK;\n\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw/", 
            "text": "os_arch_ctx_sw \n\n\nvoid os_arch_ctx_sw(struct os_task *next_t)\n\n\n\n\nChange the state of task pointed by \nnext_t\n to be \nrunning\n.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnext_t\n\n\nPointer to task which must run next\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nThis would get called from another task's context.\n\n\nExample\n\n\n\n\nvoid\nos_sched(struct os_task *next_t, int isr) \n{\n    os_sr_t sr;\n\n    OS_ENTER_CRITICAL(sr);\n\n    if (!next_t) {\n        next_t = os_sched_next_task();\n    }\n\n    if (next_t != g_current_task) {\n        OS_EXIT_CRITICAL(sr);\n        if (isr) {\n            os_arch_ctx_sw_isr(next_t);\n        } else {\n            os_arch_ctx_sw(next_t);\n        }\n\n    } else {\n        OS_EXIT_CRITICAL(sr);\n    }\n}", 
            "title": "os_arch_ctx_sw"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw/#os_arch_ctx_sw", 
            "text": "void os_arch_ctx_sw(struct os_task *next_t)  Change the state of task pointed by  next_t  to be  running .", 
            "title": " os_arch_ctx_sw "
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw/#arguments", 
            "text": "Arguments  Description      next_t  Pointer to task which must run next", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw/#notes", 
            "text": "This would get called from another task's context.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw/#example", 
            "text": "void\nos_sched(struct os_task *next_t, int isr) \n{\n    os_sr_t sr;\n\n    OS_ENTER_CRITICAL(sr);\n\n    if (!next_t) {\n        next_t = os_sched_next_task();\n    }\n\n    if (next_t != g_current_task) {\n        OS_EXIT_CRITICAL(sr);\n        if (isr) {\n            os_arch_ctx_sw_isr(next_t);\n        } else {\n            os_arch_ctx_sw(next_t);\n        }\n\n    } else {\n        OS_EXIT_CRITICAL(sr);\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw_isr/", 
            "text": "os_arch_ctx_sw_isr \n\n\nvoid os_arch_ctx_sw_isr(struct os_task *next_t)\n\n\n\n\nChange the state of task pointed by \nnext_t\n to be \nrunning\n.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnext_t\n\n\nPointer to task which must run next\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nThis would get called from interrupt context.\n\n\nExample\n\n\n\n\nvoid\nos_sched(struct os_task *next_t, int isr) \n{\n    os_sr_t sr;\n\n    OS_ENTER_CRITICAL(sr);\n\n    if (!next_t) {\n        next_t = os_sched_next_task();\n    }\n\n    if (next_t != g_current_task) {\n        OS_EXIT_CRITICAL(sr);\n        if (isr) {\n            os_arch_ctx_sw_isr(next_t);\n        } else {\n            os_arch_ctx_sw(next_t);\n        }\n\n    } else {\n        OS_EXIT_CRITICAL(sr);\n    }\n}", 
            "title": "os_arch_ctx_sw_isr"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw_isr/#os_arch_ctx_sw_isr", 
            "text": "void os_arch_ctx_sw_isr(struct os_task *next_t)  Change the state of task pointed by  next_t  to be  running .", 
            "title": " os_arch_ctx_sw_isr "
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw_isr/#arguments", 
            "text": "Arguments  Description      next_t  Pointer to task which must run next", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw_isr/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw_isr/#notes", 
            "text": "This would get called from interrupt context.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_arch_ctx_sw_isr/#example", 
            "text": "void\nos_sched(struct os_task *next_t, int isr) \n{\n    os_sr_t sr;\n\n    OS_ENTER_CRITICAL(sr);\n\n    if (!next_t) {\n        next_t = os_sched_next_task();\n    }\n\n    if (next_t != g_current_task) {\n        OS_EXIT_CRITICAL(sr);\n        if (isr) {\n            os_arch_ctx_sw_isr(next_t);\n        } else {\n            os_arch_ctx_sw(next_t);\n        }\n\n    } else {\n        OS_EXIT_CRITICAL(sr);\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_ctx_sw_hook/", 
            "text": "os_sched_ctx_sw_hook \n\n\nvoid os_sched_ctx_sw_hook(struct os_task *next_t)\n\n\n\n\nPerforms task accounting when context switching.\n\n\nThis function must be called from the architecture specific context switching routines \nos_arch_ctx_sw_isr()\n and \nos_arch_ctx_sw()\n before they resume execution of the \nrunning\n task.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nExample\n\n\n\n\nvoid\nos_arch_ctx_sw(struct os_task *t)\n{\n    os_sched_ctx_sw_hook(t);\n\n    /* Set PendSV interrupt pending bit to force context switch */\n    SCB-\nICSR = SCB_ICSR_PENDSVSET_Msk;\n}", 
            "title": "os_sched_ctx_sw_hook"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_ctx_sw_hook/#os_sched_ctx_sw_hook", 
            "text": "void os_sched_ctx_sw_hook(struct os_task *next_t)  Performs task accounting when context switching.  This function must be called from the architecture specific context switching routines  os_arch_ctx_sw_isr()  and  os_arch_ctx_sw()  before they resume execution of the  running  task.", 
            "title": " os_sched_ctx_sw_hook "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_ctx_sw_hook/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_ctx_sw_hook/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_ctx_sw_hook/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_ctx_sw_hook/#example", 
            "text": "void\nos_arch_ctx_sw(struct os_task *t)\n{\n    os_sched_ctx_sw_hook(t);\n\n    /* Set PendSV interrupt pending bit to force context switch */\n    SCB- ICSR = SCB_ICSR_PENDSVSET_Msk;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_get_current_task/", 
            "text": "os_sched_get_current_task \n\n\nstruct os_task *os_sched_get_current_task(void)\n\n\n\n\nReturns the pointer to task which is currently \nrunning\n.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nSee description.\n\n\nNotes\n\n\nExample\n\n\n\n\nvoid\nos_time_delay(int32_t osticks)\n{\n    os_sr_t sr;\n\n    if (osticks \n 0) {\n        OS_ENTER_CRITICAL(sr);\n        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);\n        OS_EXIT_CRITICAL(sr);\n        os_sched(NULL, 0);\n    }\n}", 
            "title": "os_sched_get_current_task"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_get_current_task/#os_sched_get_current_task", 
            "text": "struct os_task *os_sched_get_current_task(void)  Returns the pointer to task which is currently  running .", 
            "title": " os_sched_get_current_task "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_get_current_task/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_get_current_task/#returned-values", 
            "text": "See description.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_get_current_task/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_get_current_task/#example", 
            "text": "void\nos_time_delay(int32_t osticks)\n{\n    os_sr_t sr;\n\n    if (osticks   0) {\n        OS_ENTER_CRITICAL(sr);\n        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);\n        OS_EXIT_CRITICAL(sr);\n        os_sched(NULL, 0);\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_insert/", 
            "text": "os_sched_insert \n\n\nos_error_t\nos_sched_insert(struct os_task *t)\n\n\n\n\nInsert task into scheduler's \nready to run\n list.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to task\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns OS_EINVAL if task state is not \nREADY\n.\nReturns 0 on success.\n\n\nNotes\n\n\nYou probably don't need to call this.", 
            "title": "os_sched_insert"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_insert/#os_sched_insert", 
            "text": "os_error_t\nos_sched_insert(struct os_task *t)  Insert task into scheduler's  ready to run  list.", 
            "title": " os_sched_insert "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_insert/#arguments", 
            "text": "Arguments  Description      t  Pointer to task", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_insert/#returned-values", 
            "text": "Returns OS_EINVAL if task state is not  READY .\nReturns 0 on success.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_insert/#notes", 
            "text": "You probably don't need to call this.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_next_task/", 
            "text": "os_sched_next_task \n\n\nstruct os_task *os_sched_next_task(void)\n\n\n\n\nReturns the pointer to highest priority task from the list which are \nready to run\n.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nSee description.\n\n\nNotes\n\n\nShould be called with interrupts disabled.", 
            "title": "os_sched_next_task"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_next_task/#os_sched_next_task", 
            "text": "struct os_task *os_sched_next_task(void)  Returns the pointer to highest priority task from the list which are  ready to run .", 
            "title": " os_sched_next_task "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_next_task/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_next_task/#returned-values", 
            "text": "See description.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_next_task/#notes", 
            "text": "Should be called with interrupts disabled.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_os_timer_exp/", 
            "text": "os_sched_os_timer_exp \n\n\nvoid os_sched_os_timer_exp(void)\n\n\n\n\nInform scheduler that OS time has moved forward, and it should inspect tasks which are \nsleeping\n to check whether they should be moved to \ng_run_list\n or not.\n\n\nThis function should be called from code which handles moving OS time forward. After calling it, the highest priority task which is \nready to run\n might've changed, so call to \nos_sched()\n should be done.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nExample\n\n\n\n\nvoid\ntimer_handler(void)\n{\n    os_time_tick();\n    os_callout_tick();\n    os_sched_os_timer_exp();\n    os_sched(NULL, 1);\n}", 
            "title": "os_sched_os_timer_exp"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_os_timer_exp/#os_sched_os_timer_exp", 
            "text": "void os_sched_os_timer_exp(void)  Inform scheduler that OS time has moved forward, and it should inspect tasks which are  sleeping  to check whether they should be moved to  g_run_list  or not.  This function should be called from code which handles moving OS time forward. After calling it, the highest priority task which is  ready to run  might've changed, so call to  os_sched()  should be done.", 
            "title": " os_sched_os_timer_exp "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_os_timer_exp/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_os_timer_exp/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_os_timer_exp/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_os_timer_exp/#example", 
            "text": "void\ntimer_handler(void)\n{\n    os_time_tick();\n    os_callout_tick();\n    os_sched_os_timer_exp();\n    os_sched(NULL, 1);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_resort/", 
            "text": "os_sched_resort \n\n\nvoid os_sched_resort(struct os_task *t)\n\n\n\n\nInform scheduler that the priority of the task \nt\n has changed (e.g. in order to avoid priority inversion), and the \nready to run\n list should be re-sorted.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to a task whose priority has changed\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nt\n must be \nready to run\n before calling this.\n\n\nExample\n\n\n\n\nos_error_t\nos_mutex_pend(struct os_mutex *mu, uint32_t timeout)\n{\n    ....\n        /* Change priority of owner if needed */\n    if (mu-\nmu_owner-\nt_prio \n current-\nt_prio) {\n        mu-\nmu_owner-\nt_prio = current-\nt_prio;\n        os_sched_resort(mu-\nmu_owner);\n    }\n    ....\n}", 
            "title": "os_sched_resort"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_resort/#os_sched_resort", 
            "text": "void os_sched_resort(struct os_task *t)  Inform scheduler that the priority of the task  t  has changed (e.g. in order to avoid priority inversion), and the  ready to run  list should be re-sorted.", 
            "title": " os_sched_resort "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_resort/#arguments", 
            "text": "Arguments  Description      t  Pointer to a task whose priority has changed", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_resort/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_resort/#notes", 
            "text": "t  must be  ready to run  before calling this.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_resort/#example", 
            "text": "os_error_t\nos_mutex_pend(struct os_mutex *mu, uint32_t timeout)\n{\n    ....\n        /* Change priority of owner if needed */\n    if (mu- mu_owner- t_prio   current- t_prio) {\n        mu- mu_owner- t_prio = current- t_prio;\n        os_sched_resort(mu- mu_owner);\n    }\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_set_current_task/", 
            "text": "os_sched_set_current_task \n\n\nvoid \nos_sched_set_current_task(struct os_task *t)\n\n\n\n\nSets the currently running task to 't'.\n\n\nThis is called from architecture specific context switching code to update scheduler state. Call is made when state of the task 't' is made \nrunning\n.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to a task\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nThis function simply sets the global variable holding the currently running task. It does not perform a context switch or change the os run or sleep list.", 
            "title": "os_sched_set_current_task"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_set_current_task/#os_sched_set_current_task", 
            "text": "void \nos_sched_set_current_task(struct os_task *t)  Sets the currently running task to 't'.  This is called from architecture specific context switching code to update scheduler state. Call is made when state of the task 't' is made  running .", 
            "title": " os_sched_set_current_task "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_set_current_task/#arguments", 
            "text": "Arguments  Description      t  Pointer to a task", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_set_current_task/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_set_current_task/#notes", 
            "text": "This function simply sets the global variable holding the currently running task. It does not perform a context switch or change the os run or sleep list.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_sleep/", 
            "text": "os_sched_sleep \n\n\nint\nos_sched_sleep(struct os_task *t, os_time_t nticks)\n\n\n\n\nTask 't' state is changed from \nready to run\n to \nsleeping\n. Sleep time will be specified in \nnticks\n.\n\n\nTask will be woken up after sleep timer expires, unless there are other signals causing  it to wake up.\n\n\nIf \nnticks\n is set to \nOS_TIMEOUT_NEVER\n, task never wakes up with a sleep timer.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to task\n\n\n\n\n\n\nnticks\n\n\nNumber of ticks to sleep in OS ticks\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success.\n\n\nNotes\n\n\nMust be called with interrupts disabled.\n\n\nExample\n\n\n\n\nstruct os_event *\nos_eventq_get(struct os_eventq *evq)\n{\n    struct os_event *ev;\n    os_sr_t sr;\n\n    OS_ENTER_CRITICAL(sr);\npull_one:\n    ev = STAILQ_FIRST(\nevq-\nevq_list);\n    if (ev) {\n        STAILQ_REMOVE(\nevq-\nevq_list, ev, os_event, ev_next);\n        ev-\nev_queued = 0;\n    } else {\n        evq-\nevq_task = os_sched_get_current_task();\n        os_sched_sleep(evq-\nevq_task, OS_TIMEOUT_NEVER);\n        OS_EXIT_CRITICAL(sr);\n\n        os_sched(NULL, 0);\n\n        OS_ENTER_CRITICAL(sr);\n        evq-\nevq_task = NULL;\n        goto pull_one;\n    }\n    OS_EXIT_CRITICAL(sr);\n\n    return (ev);\n}", 
            "title": "os_sched_sleep"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_sleep/#os_sched_sleep", 
            "text": "int\nos_sched_sleep(struct os_task *t, os_time_t nticks)  Task 't' state is changed from  ready to run  to  sleeping . Sleep time will be specified in  nticks .  Task will be woken up after sleep timer expires, unless there are other signals causing  it to wake up.  If  nticks  is set to  OS_TIMEOUT_NEVER , task never wakes up with a sleep timer.", 
            "title": " os_sched_sleep "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_sleep/#arguments", 
            "text": "Arguments  Description      t  Pointer to task    nticks  Number of ticks to sleep in OS ticks", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_sleep/#returned-values", 
            "text": "Returns 0 on success.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_sleep/#notes", 
            "text": "Must be called with interrupts disabled.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_sleep/#example", 
            "text": "struct os_event *\nos_eventq_get(struct os_eventq *evq)\n{\n    struct os_event *ev;\n    os_sr_t sr;\n\n    OS_ENTER_CRITICAL(sr);\npull_one:\n    ev = STAILQ_FIRST( evq- evq_list);\n    if (ev) {\n        STAILQ_REMOVE( evq- evq_list, ev, os_event, ev_next);\n        ev- ev_queued = 0;\n    } else {\n        evq- evq_task = os_sched_get_current_task();\n        os_sched_sleep(evq- evq_task, OS_TIMEOUT_NEVER);\n        OS_EXIT_CRITICAL(sr);\n\n        os_sched(NULL, 0);\n\n        OS_ENTER_CRITICAL(sr);\n        evq- evq_task = NULL;\n        goto pull_one;\n    }\n    OS_EXIT_CRITICAL(sr);\n\n    return (ev);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_wakeup/", 
            "text": "os_sched_wakeup \n\n\nint\nos_sched_wakeup(struct os_task *t)\n\n\n\n\nCalled to make task \nready to run\n. If task is \nsleeping\n, it is woken up.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to task\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success.\n\n\nNotes\n\n\nExample\n\n\n\n\nvoid\nos_eventq_put2(struct os_eventq *evq, struct os_event *ev, int isr)\n{\n    ....\n        /* If task waiting on event, wake it up. */\n    resched = 0;\n    if (evq-\nevq_task) {\n        os_sched_wakeup(evq-\nevq_task);\n        evq-\nevq_task = NULL;\n        resched = 1;\n    }\n    ....\n}", 
            "title": "os_sched_wakeup"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_wakeup/#os_sched_wakeup", 
            "text": "int\nos_sched_wakeup(struct os_task *t)  Called to make task  ready to run . If task is  sleeping , it is woken up.", 
            "title": " os_sched_wakeup "
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_wakeup/#arguments", 
            "text": "Arguments  Description      t  Pointer to task", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_wakeup/#returned-values", 
            "text": "Returns 0 on success.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_wakeup/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/context_switch/os_sched_wakeup/#example", 
            "text": "void\nos_eventq_put2(struct os_eventq *evq, struct os_event *ev, int isr)\n{\n    ....\n        /* If task waiting on event, wake it up. */\n    resched = 0;\n    if (evq- evq_task) {\n        os_sched_wakeup(evq- evq_task);\n        evq- evq_task = NULL;\n        resched = 1;\n    }\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/time/os_time/", 
            "text": "OS_Time\n\n\nThe system time for ther Mynewt OS.\n\n\nDescription\n\n\nThe Mynewt OS contains an incrementing time that drives the OS scheduler and time delays. The time is a fixed size (e.g. 32 bits) and will eventually wrap back to zero. The time to wrap from zero back to zero is called the \nOS time epoch\n. \n\n\nThe frequency of the OS time tick is specified in the architecture-specific OS code \nos_arch.h\n and is named \nOS_TICKS_PER_SEC\n.\n\n\nData Structures\n\n\nTime is stored in Mynewt as an \nos_time_t\n value. \n\n\nList of Functions\n\n\nThe functions available in time are:\n\n\n\n\nos_time_delay\n\n\nos_time_get\n\n\nos_time_tick\n\n\n\n\nList of Macros\n\n\nSeveral macros help with the evalution of times with respect to each other.\n\n\n\n\nOS_TIME_TICK_LT(t1,t2)\n -- evaluates to true if t1 is before t2 in time.\n\n\nOS_TIME_TICK_GT(t1,t2)\n -- evaluates to true if t1 is after t2 in time \n\n\nOS_TIME_TICK_GEQ(t1,t2)\n -- evaluates to true if t1 is on or after t2 in time.\n\n\n\n\nNOTE:  For all of these macros the calculations are done modulo 'os_time_t'.  \n\n\nEnsure that comparison of OS time always uses the macros above (to compensate for the possible wrap of OS time)\n\n\nSpecial Notes\n\n\nIts important to understand how quickly the time wraps especially when doing time comparison using the macros above (or by any other means). \n\n\nFor example, if a tick is 1 millisecond and \nos_time_t\n is 32-bits the OS time will wrap back to zero in about 49.7 days or stated another way, the OS time epoch is 49.7 days.\n\n\nIf two times are more than 1/2 the OS time epoch apart, any time comparison will be incorrect.  Ensure at design time that comparisons will not occur between times that are more than half the OS time epoch.", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/time/os_time/#os_time", 
            "text": "The system time for ther Mynewt OS.", 
            "title": "OS_Time"
        }, 
        {
            "location": "/os/core_os/time/os_time/#description", 
            "text": "The Mynewt OS contains an incrementing time that drives the OS scheduler and time delays. The time is a fixed size (e.g. 32 bits) and will eventually wrap back to zero. The time to wrap from zero back to zero is called the  OS time epoch .   The frequency of the OS time tick is specified in the architecture-specific OS code  os_arch.h  and is named  OS_TICKS_PER_SEC .", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/time/os_time/#data-structures", 
            "text": "Time is stored in Mynewt as an  os_time_t  value.", 
            "title": "Data Structures"
        }, 
        {
            "location": "/os/core_os/time/os_time/#list-of-functions", 
            "text": "The functions available in time are:   os_time_delay  os_time_get  os_time_tick", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/time/os_time/#list-of-macros", 
            "text": "Several macros help with the evalution of times with respect to each other.   OS_TIME_TICK_LT(t1,t2)  -- evaluates to true if t1 is before t2 in time.  OS_TIME_TICK_GT(t1,t2)  -- evaluates to true if t1 is after t2 in time   OS_TIME_TICK_GEQ(t1,t2)  -- evaluates to true if t1 is on or after t2 in time.   NOTE:  For all of these macros the calculations are done modulo 'os_time_t'.    Ensure that comparison of OS time always uses the macros above (to compensate for the possible wrap of OS time)", 
            "title": "List of Macros"
        }, 
        {
            "location": "/os/core_os/time/os_time/#special-notes", 
            "text": "Its important to understand how quickly the time wraps especially when doing time comparison using the macros above (or by any other means).   For example, if a tick is 1 millisecond and  os_time_t  is 32-bits the OS time will wrap back to zero in about 49.7 days or stated another way, the OS time epoch is 49.7 days.  If two times are more than 1/2 the OS time epoch apart, any time comparison will be incorrect.  Ensure at design time that comparisons will not occur between times that are more than half the OS time epoch.", 
            "title": "Special Notes"
        }, 
        {
            "location": "/os/core_os/time/os_time_delay/", 
            "text": "os_time_delay\n\n\nvoid os_time_delay(int32_t ticks) \n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nticks\n\n\nNumber of ticks to delay. Less than or equal to zero means no delay\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nPassing \nOS_TIMEOUT_NEVER\n to this function will not block indefinitely but will return immediately.  Passing delays larger than 1/2 the OS time epoch should be avoided; behavior is unpredictable.\n\n\nExample\n\n\n\n\n    /* delay 3 seconds */\n    int32_t delay = OS_TICKS_PER_SEC * 3;\n    os_time_delay(delay);", 
            "title": "os_time_delay"
        }, 
        {
            "location": "/os/core_os/time/os_time_delay/#os_time_delay", 
            "text": "void os_time_delay(int32_t ticks)", 
            "title": "os_time_delay"
        }, 
        {
            "location": "/os/core_os/time/os_time_delay/#arguments", 
            "text": "Arguments  Description      ticks  Number of ticks to delay. Less than or equal to zero means no delay", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/time/os_time_delay/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/time/os_time_delay/#notes", 
            "text": "Passing  OS_TIMEOUT_NEVER  to this function will not block indefinitely but will return immediately.  Passing delays larger than 1/2 the OS time epoch should be avoided; behavior is unpredictable.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/time/os_time_delay/#example", 
            "text": "/* delay 3 seconds */\n    int32_t delay = OS_TICKS_PER_SEC * 3;\n    os_time_delay(delay);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/time/os_time_get/", 
            "text": "os_time_get\n\n\nos_time_t os_time_get(void) \n\n\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nThe current value of the OS time\n\n\nNotes\n\n\nSee the \nSpecial Notes\n on OS time epoch and comparison\n\n\nExample\n\n\n\n\n   os_time_t now = os_time_get();", 
            "title": "os_time_get"
        }, 
        {
            "location": "/os/core_os/time/os_time_get/#os_time_get", 
            "text": "os_time_t os_time_get(void)", 
            "title": "os_time_get"
        }, 
        {
            "location": "/os/core_os/time/os_time_get/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/time/os_time_get/#returned-values", 
            "text": "The current value of the OS time", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/time/os_time_get/#notes", 
            "text": "See the  Special Notes  on OS time epoch and comparison", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/time/os_time_get/#example", 
            "text": "os_time_t now = os_time_get();", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/time/os_time_tick/", 
            "text": "os_time_tick\n\n\nvoid os_time_tick(void) \n\n\n\n\nIncrements the OS time tick for the system.  Typically, this is called in one place by the architecture specific OS code (\nlibs/os/arch\n) \ntimer_handler\n which is in turn called by the BSP specific code assigned to drive the OS timer tick. See \nPorting Mynewt OS\n for details.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nCalled for every single tick by the architecture specific functions.\n\n\nExample\n\n\n\n\n   os_time_tick();", 
            "title": "os_time_tick"
        }, 
        {
            "location": "/os/core_os/time/os_time_tick/#os_time_tick", 
            "text": "void os_time_tick(void)   Increments the OS time tick for the system.  Typically, this is called in one place by the architecture specific OS code ( libs/os/arch )  timer_handler  which is in turn called by the BSP specific code assigned to drive the OS timer tick. See  Porting Mynewt OS  for details.", 
            "title": "os_time_tick"
        }, 
        {
            "location": "/os/core_os/time/os_time_tick/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/time/os_time_tick/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/time/os_time_tick/#notes", 
            "text": "Called for every single tick by the architecture specific functions.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/time/os_time_tick/#example", 
            "text": "os_time_tick();", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/task/task/", 
            "text": "Task\n\n\nA task, along with the scheduler, forms the basis of the Mynewt OS. A task \nconsists of two basic elements: a task stack and a task function. The task \nfunction is basically a forever loop, waiting for some \"event\" to wake it up. \nThere are two methods used to signal a task that it has work to do: event queues \nand semaphores (see the appropriate manual sections for descriptions of these \nfeatures).\n\n\nThe Mynewt OS is a multi-tasking, preemptive OS. Every task is assigned a task \npriority (from 0 to 255), with 0 being the highest priority task. If a higher \npriority task than the current task wants to run, the scheduler preempts the \ncurrently running task and switches context to the higher priority task. This is \njust a fancy way of saying that the processor stack pointer now points to the \nstack of the higher priority task and the task resumes execution where it left \noff.\n\n\nTasks run to completion unless they are preempted by a higher priority task. The \ndeveloper must insure that tasks eventually \"sleep\"; otherwise lower priority \ntasks will never get a chance to run (actually, any task lower in priority than \nthe task that never sleeps). A task will be put to sleep in the following cases: \nit puts itself to sleep using \nos_time_delay()\n, it waits on an event queue \nwhich is empty or attempts to obtain a mutex or a semaphore that is currently \nowned by another task.\n\n\nNote that other sections of the manual describe these OS features in more \ndetail.\n\n\nDescription\n\n\nIn order to create a task two data structures need to be defined: the task \nobject (struct os_task) and its associated stack. Determining the stack size can \nbe a bit tricky; generally developers should not declare large local variables \non the stack so that task stacks can be of limited size. However, all \napplications are different and the developer must choose the stack size \naccordingly. NOTE: be careful when declaring your stack! The stack is in units \nof \nos_stack_t\n sized elements (generally 32-bits). Looking at the example given \nbelow and assuming \nos_stack_t\n is defined to be a 32-bit unsigned value, \n\"my_task_stack\" will use 256 bytes. \n\n\nA task must also have an associated \"task function\". This is the function that \nwill be called when the task is first run. This task function should never \nreturn!\n\n\nIn order to inform the Mynewt OS of the new task and to have it added to the \nscheduler, the \nos_task_init()\n function is called. Once \nos_task_init()\n is \ncalled, the task is made ready to run and is added to the active task list. Note \nthat a task can be initialized (started) before or after the os has started \n(i.e. before \nos_start()\n is called) but must be initialized after the os has \nbeen initialized (i.e. 'os_init' has been called). In most of the examples and \ncurrent Mynewt projects, the os is initialized, tasks are initialized, and the \nthe os is started. Once the os has started, the highest priority task will be \nthe first task set to run.\n\n\nInformation about a task can be obtained using the \nos_task_info_get_next()\n \nAPI. Developers can walk the list of tasks to obtain information on all created \ntasks. This information is of type \nos_task_info\n and is described below.\n\n\nThe following is a very simple example showing a single application task. This \ntask simply toggles an LED at a one second interval.\n\n\n/* Create a simple \nproject\n with a task that blinks a LED every second */\n\n/* Define task stack and task object */\n#define MY_TASK_PRI         (OS_TASK_PRI_HIGHEST) \n#define MY_STACK_SIZE       (64) \nstruct os_task my_task; \nos_stack_t my_task_stack[MY_STACK_SIZE]; \n\n/* This is the task function */\nvoid my_task_func(void *arg) {\n    /* Set the led pin as an output */\n    hal_gpio_init_out(LED_BLINK_PIN, 1);\n\n    /* The task is a forever loop that does not return */\n    while (1) {\n        /* Wait one second */ \n        os_time_delay(1000);\n\n        /* Toggle the LED */ \n        hal_gpio_toggle(LED_BLINK_PIN);\n    }\n}\n\n/* This is the main function for the project */\nint main(void) {\n    int rc;\n\n    /* Initialize OS */\n    os_init();\n\n    /* Initialize the task */\n    os_task_init(\nmy_task, \nmy_task\n, my_task_func, NULL, MY_TASK_PRIO, \n                 OS_WAIT_FOREVER, my_task_stack, MY_STACK_SIZE);\n\n    /* Start the OS */\n    os_start();\n\n    /* os start should never return. If it does, this should be an error */\n    assert(0);\n\n    return rc;\n}\n\n\n\n\nData structures\n\n\n/* The highest and lowest task priorities */\n#define OS_TASK_PRI_HIGHEST         (0)\n#define OS_TASK_PRI_LOWEST          (0xff)\n\n/* Task states */\ntypedef enum os_task_state {\n    OS_TASK_READY = 1, \n    OS_TASK_SLEEP = 2\n} os_task_state_t;\n\n/* Task flags */\n#define OS_TASK_FLAG_NO_TIMEOUT     (0x0001U)\n#define OS_TASK_FLAG_SEM_WAIT       (0x0002U)\n#define OS_TASK_FLAG_MUTEX_WAIT     (0x0004U)\n\ntypedef void (*os_task_func_t)(void *);\n\n#define OS_TASK_MAX_NAME_LEN (32)\n\n\n\n\n\n\nstruct os_task {\n    os_stack_t *t_stackptr;\n    os_stack_t *t_stacktop;\n\n    uint16_t t_stacksize;\n    uint16_t t_flags;\n\n    uint8_t t_taskid;\n    uint8_t t_prio;\n    uint8_t t_state;\n    uint8_t t_pad;\n\n    char *t_name;\n    os_task_func_t t_func;\n    void *t_arg;\n\n    void *t_obj;\n\n    struct os_sanity_check t_sanity_check; \n\n    os_time_t t_next_wakeup;\n    os_time_t t_run_time;\n    uint32_t t_ctx_sw_cnt;\n\n    /* Global list of all tasks, irrespective of run or sleep lists */\n    STAILQ_ENTRY(os_task) t_os_task_list;\n\n    /* Used to chain task to either the run or sleep list */ \n    TAILQ_ENTRY(os_task) t_os_list;\n\n    /* Used to chain task to an object such as a semaphore or mutex */\n    SLIST_ENTRY(os_task) t_obj_list;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt_stackptr\n\n\nCurrent stack pointer\n\n\n\n\n\n\nt_stacktop\n\n\nThe address of the top of the task stack. The stack grows downward\n\n\n\n\n\n\nt_stacksize\n\n\nThe size of the stack, in units of os_stack_t (not bytes!)\n\n\n\n\n\n\nt_flags\n\n\nTask flags (see flag definitions)\n\n\n\n\n\n\nt_taskid\n\n\nA numeric id assigned to each task\n\n\n\n\n\n\nt_prio\n\n\nThe priority of the task. The lower the number, the higher the priority\n\n\n\n\n\n\nt_state\n\n\nThe task state (see state definitions)\n\n\n\n\n\n\nt_pad\n\n\npadding (for alignment)\n\n\n\n\n\n\nt_name\n\n\nName of task\n\n\n\n\n\n\nt_func\n\n\nPointer to task function\n\n\n\n\n\n\nt_obj\n\n\nGeneric object used by mutexes and semaphores when the task is waiting on a mutex or semaphore\n\n\n\n\n\n\nt_sanity_check\n\n\nSanity task data structure\n\n\n\n\n\n\nt_next_wakeup\n\n\nOS time when task is next scheduled to wake up\n\n\n\n\n\n\nt_run_time\n\n\nThe amount of os time ticks this task has been running\n\n\n\n\n\n\nt_ctx_sw_cnt\n\n\nThe number of times that this task has been run\n\n\n\n\n\n\nt_os_task_list\n\n\nList pointer for global task list. All tasks are placed on this list\n\n\n\n\n\n\nt_os_list\n\n\nList pointer used by either the active task list or the sleeping task list\n\n\n\n\n\n\nt_obj_list\n\n\nList pointer for tasks waiting on a semaphore or mutex\n\n\n\n\n\n\n\n\n\n\nstruct os_task_info {\n    uint8_t oti_prio;\n    uint8_t oti_taskid;\n    uint8_t oti_state;\n    uint8_t oti_flags;\n    uint16_t oti_stkusage;\n    uint16_t oti_stksize;\n    uint32_t oti_cswcnt;\n    uint32_t oti_runtime;\n    os_time_t oti_last_checkin;\n    os_time_t oti_next_checkin;\n\n    char oti_name[OS_TASK_MAX_NAME_LEN];\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noti_prio\n\n\nTask priority\n\n\n\n\n\n\noti_taskid\n\n\nTask id\n\n\n\n\n\n\noti_state\n\n\nTask state\n\n\n\n\n\n\noti_flags\n\n\nTask flags\n\n\n\n\n\n\noti_stkusage\n\n\nAmount of stack used by the task (in os_stack_t units)\n\n\n\n\n\n\noti_stksize\n\n\nThe size of the stack (in os_stack_t units)\n\n\n\n\n\n\noti_cswcnt\n\n\nThe context switch count\n\n\n\n\n\n\noti_runtime\n\n\nThe amount of time that the task has run (in os time ticks)\n\n\n\n\n\n\noti_last_checkin\n\n\nThe time (os time) at which this task last checked in to the sanity task\n\n\n\n\n\n\noti_next_checkin\n\n\nThe time (os time) at which this task last checked in to the sanity task\n\n\n\n\n\n\noti_name\n\n\nName of the task\n\n\n\n\n\n\n\n\n\n\nList of Functions\n\n\nThe functions available in task are:\n\n\n\n\nos_task_init\n\n\nos_task_count\n\n\nos_task_info_get_next", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/task/task/#task", 
            "text": "A task, along with the scheduler, forms the basis of the Mynewt OS. A task \nconsists of two basic elements: a task stack and a task function. The task \nfunction is basically a forever loop, waiting for some \"event\" to wake it up. \nThere are two methods used to signal a task that it has work to do: event queues \nand semaphores (see the appropriate manual sections for descriptions of these \nfeatures).  The Mynewt OS is a multi-tasking, preemptive OS. Every task is assigned a task \npriority (from 0 to 255), with 0 being the highest priority task. If a higher \npriority task than the current task wants to run, the scheduler preempts the \ncurrently running task and switches context to the higher priority task. This is \njust a fancy way of saying that the processor stack pointer now points to the \nstack of the higher priority task and the task resumes execution where it left \noff.  Tasks run to completion unless they are preempted by a higher priority task. The \ndeveloper must insure that tasks eventually \"sleep\"; otherwise lower priority \ntasks will never get a chance to run (actually, any task lower in priority than \nthe task that never sleeps). A task will be put to sleep in the following cases: \nit puts itself to sleep using  os_time_delay() , it waits on an event queue \nwhich is empty or attempts to obtain a mutex or a semaphore that is currently \nowned by another task.  Note that other sections of the manual describe these OS features in more \ndetail.", 
            "title": "Task"
        }, 
        {
            "location": "/os/core_os/task/task/#description", 
            "text": "In order to create a task two data structures need to be defined: the task \nobject (struct os_task) and its associated stack. Determining the stack size can \nbe a bit tricky; generally developers should not declare large local variables \non the stack so that task stacks can be of limited size. However, all \napplications are different and the developer must choose the stack size \naccordingly. NOTE: be careful when declaring your stack! The stack is in units \nof  os_stack_t  sized elements (generally 32-bits). Looking at the example given \nbelow and assuming  os_stack_t  is defined to be a 32-bit unsigned value, \n\"my_task_stack\" will use 256 bytes.   A task must also have an associated \"task function\". This is the function that \nwill be called when the task is first run. This task function should never \nreturn!  In order to inform the Mynewt OS of the new task and to have it added to the \nscheduler, the  os_task_init()  function is called. Once  os_task_init()  is \ncalled, the task is made ready to run and is added to the active task list. Note \nthat a task can be initialized (started) before or after the os has started \n(i.e. before  os_start()  is called) but must be initialized after the os has \nbeen initialized (i.e. 'os_init' has been called). In most of the examples and \ncurrent Mynewt projects, the os is initialized, tasks are initialized, and the \nthe os is started. Once the os has started, the highest priority task will be \nthe first task set to run.  Information about a task can be obtained using the  os_task_info_get_next()  \nAPI. Developers can walk the list of tasks to obtain information on all created \ntasks. This information is of type  os_task_info  and is described below.  The following is a very simple example showing a single application task. This \ntask simply toggles an LED at a one second interval.  /* Create a simple  project  with a task that blinks a LED every second */\n\n/* Define task stack and task object */\n#define MY_TASK_PRI         (OS_TASK_PRI_HIGHEST) \n#define MY_STACK_SIZE       (64) \nstruct os_task my_task; \nos_stack_t my_task_stack[MY_STACK_SIZE]; \n\n/* This is the task function */\nvoid my_task_func(void *arg) {\n    /* Set the led pin as an output */\n    hal_gpio_init_out(LED_BLINK_PIN, 1);\n\n    /* The task is a forever loop that does not return */\n    while (1) {\n        /* Wait one second */ \n        os_time_delay(1000);\n\n        /* Toggle the LED */ \n        hal_gpio_toggle(LED_BLINK_PIN);\n    }\n}\n\n/* This is the main function for the project */\nint main(void) {\n    int rc;\n\n    /* Initialize OS */\n    os_init();\n\n    /* Initialize the task */\n    os_task_init( my_task,  my_task , my_task_func, NULL, MY_TASK_PRIO, \n                 OS_WAIT_FOREVER, my_task_stack, MY_STACK_SIZE);\n\n    /* Start the OS */\n    os_start();\n\n    /* os start should never return. If it does, this should be an error */\n    assert(0);\n\n    return rc;\n}", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/task/task/#data-structures", 
            "text": "/* The highest and lowest task priorities */\n#define OS_TASK_PRI_HIGHEST         (0)\n#define OS_TASK_PRI_LOWEST          (0xff)\n\n/* Task states */\ntypedef enum os_task_state {\n    OS_TASK_READY = 1, \n    OS_TASK_SLEEP = 2\n} os_task_state_t;\n\n/* Task flags */\n#define OS_TASK_FLAG_NO_TIMEOUT     (0x0001U)\n#define OS_TASK_FLAG_SEM_WAIT       (0x0002U)\n#define OS_TASK_FLAG_MUTEX_WAIT     (0x0004U)\n\ntypedef void (*os_task_func_t)(void *);\n\n#define OS_TASK_MAX_NAME_LEN (32)   struct os_task {\n    os_stack_t *t_stackptr;\n    os_stack_t *t_stacktop;\n\n    uint16_t t_stacksize;\n    uint16_t t_flags;\n\n    uint8_t t_taskid;\n    uint8_t t_prio;\n    uint8_t t_state;\n    uint8_t t_pad;\n\n    char *t_name;\n    os_task_func_t t_func;\n    void *t_arg;\n\n    void *t_obj;\n\n    struct os_sanity_check t_sanity_check; \n\n    os_time_t t_next_wakeup;\n    os_time_t t_run_time;\n    uint32_t t_ctx_sw_cnt;\n\n    /* Global list of all tasks, irrespective of run or sleep lists */\n    STAILQ_ENTRY(os_task) t_os_task_list;\n\n    /* Used to chain task to either the run or sleep list */ \n    TAILQ_ENTRY(os_task) t_os_list;\n\n    /* Used to chain task to an object such as a semaphore or mutex */\n    SLIST_ENTRY(os_task) t_obj_list;\n};     Element  Description      t_stackptr  Current stack pointer    t_stacktop  The address of the top of the task stack. The stack grows downward    t_stacksize  The size of the stack, in units of os_stack_t (not bytes!)    t_flags  Task flags (see flag definitions)    t_taskid  A numeric id assigned to each task    t_prio  The priority of the task. The lower the number, the higher the priority    t_state  The task state (see state definitions)    t_pad  padding (for alignment)    t_name  Name of task    t_func  Pointer to task function    t_obj  Generic object used by mutexes and semaphores when the task is waiting on a mutex or semaphore    t_sanity_check  Sanity task data structure    t_next_wakeup  OS time when task is next scheduled to wake up    t_run_time  The amount of os time ticks this task has been running    t_ctx_sw_cnt  The number of times that this task has been run    t_os_task_list  List pointer for global task list. All tasks are placed on this list    t_os_list  List pointer used by either the active task list or the sleeping task list    t_obj_list  List pointer for tasks waiting on a semaphore or mutex      struct os_task_info {\n    uint8_t oti_prio;\n    uint8_t oti_taskid;\n    uint8_t oti_state;\n    uint8_t oti_flags;\n    uint16_t oti_stkusage;\n    uint16_t oti_stksize;\n    uint32_t oti_cswcnt;\n    uint32_t oti_runtime;\n    os_time_t oti_last_checkin;\n    os_time_t oti_next_checkin;\n\n    char oti_name[OS_TASK_MAX_NAME_LEN];\n};     Element  Description      oti_prio  Task priority    oti_taskid  Task id    oti_state  Task state    oti_flags  Task flags    oti_stkusage  Amount of stack used by the task (in os_stack_t units)    oti_stksize  The size of the stack (in os_stack_t units)    oti_cswcnt  The context switch count    oti_runtime  The amount of time that the task has run (in os time ticks)    oti_last_checkin  The time (os time) at which this task last checked in to the sanity task    oti_next_checkin  The time (os time) at which this task last checked in to the sanity task    oti_name  Name of the task", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/task/task/#list-of-functions", 
            "text": "The functions available in task are:   os_task_init  os_task_count  os_task_info_get_next", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/task/os_task_count/", 
            "text": "os_task_count\n\n\nuint8_t os_task_count(void);\n\n\n\n\nReturns the number of tasks that have been created. \n\n\n\n\nArguments\n\n\nNone\n\n\n\n\nReturned values\n\n\nunsigned 8-bit integer representing number of tasks created\n\n\n\n\nExample\n\n\n\n    uint8_t num_tasks;\n\n    num_tasks = os_task_count();", 
            "title": "os_task_count"
        }, 
        {
            "location": "/os/core_os/task/os_task_count/#os_task_count", 
            "text": "uint8_t os_task_count(void);  Returns the number of tasks that have been created.", 
            "title": " os_task_count"
        }, 
        {
            "location": "/os/core_os/task/os_task_count/#arguments", 
            "text": "None", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/task/os_task_count/#returned-values", 
            "text": "unsigned 8-bit integer representing number of tasks created", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/task/os_task_count/#example", 
            "text": "uint8_t num_tasks;\n\n    num_tasks = os_task_count();", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/task/os_task_info_get_next/", 
            "text": "os_task_info_get_next\n\n\nstruct os_task *os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti);\n\n\n\n\nPopulates the os task info structure pointed to by \noti\n with task information. \nThe task populating the \noti\n structure is either the first task on the task \nlist if \nprev\n is NULL, or the next task in the task list (the next pointer of \n\nprev\n).\n\n\nIf there are no tasks initialized, NULL is returned. Otherwise, the task \nstructure used to populate \noti\n is returned.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprev\n\n\nPointer to previous task in task list. If NULL, use first task on list\n\n\n\n\n\n\noti\n\n\nPointer to \nos_task_info\n structure where task information will be stored\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns a pointer to the os task structure that was used to populate the task \ninformation structure. NULL means that no tasks were created.\n\n\n\n\nExample\n\n\n\nvoid \nget_task_info(void)\n{\n    struct os_task *prev_task; \n    struct os_task_info oti; \n\n    console_printf(\nTasks: \\n\n);\n    prev_task = NULL;\n    while (1) {\n        prev_task = os_task_info_get_next(prev_task, \noti);\n        if (prev_task == NULL) {\n            break;\n        }\n\n        console_printf(\n  %s (prio: %u, tid: %u, lcheck: %lu, ncheck: %lu, \n\n                \nflags: 0x%x, ssize: %u, susage: %u, cswcnt: %lu, \n\n                \ntot_run_time: %lums)\\n\n,\n                oti.oti_name, oti.oti_prio, oti.oti_taskid, \n                (unsigned long)oti.oti_last_checkin,\n                (unsigned long)oti.oti_next_checkin, oti.oti_flags,\n                oti.oti_stksize, oti.oti_stkusage, (unsigned long)oti.oti_cswcnt,\n                (unsigned long)oti.oti_runtime);\n\n    }\n}", 
            "title": "os_task_info_get_next"
        }, 
        {
            "location": "/os/core_os/task/os_task_info_get_next/#os_task_info_get_next", 
            "text": "struct os_task *os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti);  Populates the os task info structure pointed to by  oti  with task information. \nThe task populating the  oti  structure is either the first task on the task \nlist if  prev  is NULL, or the next task in the task list (the next pointer of  prev ).  If there are no tasks initialized, NULL is returned. Otherwise, the task \nstructure used to populate  oti  is returned.", 
            "title": " os_task_info_get_next"
        }, 
        {
            "location": "/os/core_os/task/os_task_info_get_next/#arguments", 
            "text": "Arguments  Description      prev  Pointer to previous task in task list. If NULL, use first task on list    oti  Pointer to  os_task_info  structure where task information will be stored", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/task/os_task_info_get_next/#returned-values", 
            "text": "Returns a pointer to the os task structure that was used to populate the task \ninformation structure. NULL means that no tasks were created.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/task/os_task_info_get_next/#example", 
            "text": "void \nget_task_info(void)\n{\n    struct os_task *prev_task; \n    struct os_task_info oti; \n\n    console_printf( Tasks: \\n );\n    prev_task = NULL;\n    while (1) {\n        prev_task = os_task_info_get_next(prev_task,  oti);\n        if (prev_task == NULL) {\n            break;\n        }\n\n        console_printf(   %s (prio: %u, tid: %u, lcheck: %lu, ncheck: %lu,  \n                 flags: 0x%x, ssize: %u, susage: %u, cswcnt: %lu,  \n                 tot_run_time: %lums)\\n ,\n                oti.oti_name, oti.oti_prio, oti.oti_taskid, \n                (unsigned long)oti.oti_last_checkin,\n                (unsigned long)oti.oti_next_checkin, oti.oti_flags,\n                oti.oti_stksize, oti.oti_stkusage, (unsigned long)oti.oti_cswcnt,\n                (unsigned long)oti.oti_runtime);\n\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/task/os_task_init/", 
            "text": "os_task_init\n\n\nint os_task_init(struct os_task *t, char *name, os_task_func_t func, void *arg, \n                 uint8_t prio, os_time_t sanity_itvl, os_stack_t *stack_bottom, \n                 uint16_t stack_size)\n\n\n\n\nCalled to create a task. This adds the task object to the list of ready to run \ntasks.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to task\n\n\n\n\n\n\nname\n\n\nTask name\n\n\n\n\n\n\nfunc\n\n\nTask function\n\n\n\n\n\n\narg\n\n\nGeneric argument to pass to task\n\n\n\n\n\n\nprio\n\n\nPriority of task\n\n\n\n\n\n\nsanity_itvl\n\n\nThe interval at which the sanity task will check to see if this task is sill alive\n\n\n\n\n\n\nstack_bottom\n\n\nPointer to bottom of stack.\n\n\n\n\n\n\nstack_size\n\n\nThe size of the stack. NOTE: this is not in bytes! It is the number of \nos_stack_t\n elements allocated (generally 32-bits each)\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK: task initialization successful.\n\n\nAll other error codes indicate an internal error.\n\n\n\n\nExample\n\n\n\n    /* Create the task */ \n    int rc;\n\n    os_stack_t my_task_stack[MY_STACK_SIZE];\n\n    rc = os_task_init(\nmy_task, \nmy_task\n, my_task_func, NULL, MY_TASK_PRIO, \n                      OS_WAIT_FOREVER, my_task_stack, MY_STACK_SIZE);\n    assert(rc == OS_OK);", 
            "title": "os_task_init"
        }, 
        {
            "location": "/os/core_os/task/os_task_init/#os_task_init", 
            "text": "int os_task_init(struct os_task *t, char *name, os_task_func_t func, void *arg, \n                 uint8_t prio, os_time_t sanity_itvl, os_stack_t *stack_bottom, \n                 uint16_t stack_size)  Called to create a task. This adds the task object to the list of ready to run \ntasks.", 
            "title": " os_task_init"
        }, 
        {
            "location": "/os/core_os/task/os_task_init/#arguments", 
            "text": "Arguments  Description      t  Pointer to task    name  Task name    func  Task function    arg  Generic argument to pass to task    prio  Priority of task    sanity_itvl  The interval at which the sanity task will check to see if this task is sill alive    stack_bottom  Pointer to bottom of stack.    stack_size  The size of the stack. NOTE: this is not in bytes! It is the number of  os_stack_t  elements allocated (generally 32-bits each)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/task/os_task_init/#returned-values", 
            "text": "OS_OK: task initialization successful.  All other error codes indicate an internal error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/task/os_task_init/#example", 
            "text": "/* Create the task */ \n    int rc;\n\n    os_stack_t my_task_stack[MY_STACK_SIZE];\n\n    rc = os_task_init( my_task,  my_task , my_task_func, NULL, MY_TASK_PRIO, \n                      OS_WAIT_FOREVER, my_task_stack, MY_STACK_SIZE);\n    assert(rc == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/event_queue/event_queue/", 
            "text": "Event Queues\n\n\nEvent queue is a way of serializing events arring to a task. This makes it easy to queue processing to happen inside task's context. This would be done either from an interrupt handler, or from another task.\n\n\nEvents arrive in a form of a data structure \nstruct os_event\n.\n\n\nDescription\n\n\nEvents are in form of a data structure \nstruct os_event\n, and they are queued to data structure \nstruct os_eventq\n.\n\n\nQueue must be initialized before trying to add events to it. This is done using \nos_eventq_init()\n.\n\n\nCommon way of using event queues is to have a task loop while calling \nos_eventq_get()\n, waiting for work to do.\nOther tasks (or interrupts) then call \nos_eventq_put()\n to wake it up. Once event has been queued task waiting on that queue is woken up, and will get a pointer to queued event structure.\nProcessing task would then act according to event type.\n\n\nWhen \nos_event\n is queued, it should not be freed until processing task is done with it.\n\n\nIt is assumed that there is only one task consuming events from an event queue. Only one task should be sleeping on a particular \nos_eventq\n at a time.\n\n\nNote that os_callout subsystem assumes that event queue is used as the wakeup mechanism.\n\n\nData structures\n\n\nstruct os_event {\n    uint8_t ev_queued;\n    uint8_t ev_type;\n    void *ev_arg;\n    STAILQ_ENTRY(os_event) ev_next;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nev_queued\n\n\nInternal field, which tells whether event is linked into an \nos_eventq\n already\n\n\n\n\n\n\nev_type\n\n\nType of an event. This should be unique, as it should be used by processing task to figure out what the event means\n\n\n\n\n\n\nev_arg\n\n\nCan be used further as input to task processing this event\n\n\n\n\n\n\nev_next\n\n\nLinkage attaching this event to an event queue\n\n\n\n\n\n\n\n\nstruct os_eventq {\n    struct os_task *evq_task;\n    STAILQ_HEAD(, os_event) evq_list;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevq_task\n\n\nPointer to task if there is task sleeping on \nos_eventq_get()\n\n\n\n\n\n\nevq_list\n\n\nQueue head for list of events in this queue\n\n\n\n\n\n\n\n\nList of Functions\n\n\nThe functions available in event queue feature are:\n\n\n\n\nos_eventq_get\n\n\nos_eventq_init\n\n\nos_eventq_put\n\n\nos_eventq_put2\n\n\nos_eventq_remove", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/event_queue/event_queue/#event-queues", 
            "text": "Event queue is a way of serializing events arring to a task. This makes it easy to queue processing to happen inside task's context. This would be done either from an interrupt handler, or from another task.  Events arrive in a form of a data structure  struct os_event .", 
            "title": "Event Queues"
        }, 
        {
            "location": "/os/core_os/event_queue/event_queue/#description", 
            "text": "Events are in form of a data structure  struct os_event , and they are queued to data structure  struct os_eventq .  Queue must be initialized before trying to add events to it. This is done using  os_eventq_init() .  Common way of using event queues is to have a task loop while calling  os_eventq_get() , waiting for work to do.\nOther tasks (or interrupts) then call  os_eventq_put()  to wake it up. Once event has been queued task waiting on that queue is woken up, and will get a pointer to queued event structure.\nProcessing task would then act according to event type.  When  os_event  is queued, it should not be freed until processing task is done with it.  It is assumed that there is only one task consuming events from an event queue. Only one task should be sleeping on a particular  os_eventq  at a time.  Note that os_callout subsystem assumes that event queue is used as the wakeup mechanism.", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/event_queue/event_queue/#data-structures", 
            "text": "struct os_event {\n    uint8_t ev_queued;\n    uint8_t ev_type;\n    void *ev_arg;\n    STAILQ_ENTRY(os_event) ev_next;\n};     Element  Description      ev_queued  Internal field, which tells whether event is linked into an  os_eventq  already    ev_type  Type of an event. This should be unique, as it should be used by processing task to figure out what the event means    ev_arg  Can be used further as input to task processing this event    ev_next  Linkage attaching this event to an event queue     struct os_eventq {\n    struct os_task *evq_task;\n    STAILQ_HEAD(, os_event) evq_list;\n};     Element  Description      evq_task  Pointer to task if there is task sleeping on  os_eventq_get()    evq_list  Queue head for list of events in this queue", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/event_queue/event_queue/#list-of-functions", 
            "text": "The functions available in event queue feature are:   os_eventq_get  os_eventq_init  os_eventq_put  os_eventq_put2  os_eventq_remove", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_get/", 
            "text": "os_eventq_get\n\n\nvoid\nos_eventq_get(struct os_eventq *evq)\n\n\n\n\nFetches the first event from a queue. Task will sleep until something gets queued.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevq\n\n\nQueue to wait on\n\n\n\n\n\n\n\n\nReturned values\n\n\nWill return with a pointer to first \nstruct event\n which is in the queue.\n\n\nNotes\n\n\nExample\n\n\nMain loop of an example task.\n\n\n    while (1) {\n        ev = os_eventq_get(\ntask1_evq);\n        assert(ev);\n        if (ev-\nev_type == CONS_EV_TYPE) {\n            /* XXX do stuff */\n        }\n    }", 
            "title": "os_eventq_get"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_get/#os_eventq_get", 
            "text": "void\nos_eventq_get(struct os_eventq *evq)  Fetches the first event from a queue. Task will sleep until something gets queued.", 
            "title": " os_eventq_get"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_get/#arguments", 
            "text": "Arguments  Description      evq  Queue to wait on", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_get/#returned-values", 
            "text": "Will return with a pointer to first  struct event  which is in the queue.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_get/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_get/#example", 
            "text": "Main loop of an example task.      while (1) {\n        ev = os_eventq_get( task1_evq);\n        assert(ev);\n        if (ev- ev_type == CONS_EV_TYPE) {\n            /* XXX do stuff */\n        }\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_init/", 
            "text": "os_eventq_init\n\n\n   void\n    os_eventq_init(struct os_eventq *evq)\n\n\n\n\nInitializes \nstruct os_eventq\n, making it ready for use.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevq\n\n\nPointer to event queue getting initialized\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nNotes\n\n\nUsually done at subsystem init time; before OS has been started, and before interrupts generating events have been enabled.\n\n\nExample\n\n\n\nThis initializes event queue used by newtmgr task.\n\n\nstruct os_eventq g_nmgr_evq;\n\nint\nnmgr_task_init(uint8_t prio, os_stack_t *stack_ptr, uint16_t stack_len)\n{\n    /* variable declarations here */\n\n    os_eventq_init(\ng_nmgr_evq);\n\n    /* initialization continues here */\n}", 
            "title": "os_eventq_init"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_init/#os_eventq_init", 
            "text": "void\n    os_eventq_init(struct os_eventq *evq)  Initializes  struct os_eventq , making it ready for use.", 
            "title": " os_eventq_init"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_init/#arguments", 
            "text": "Arguments  Description      evq  Pointer to event queue getting initialized", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_init/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_init/#notes", 
            "text": "Usually done at subsystem init time; before OS has been started, and before interrupts generating events have been enabled.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_init/#example", 
            "text": "This initializes event queue used by newtmgr task.  struct os_eventq g_nmgr_evq;\n\nint\nnmgr_task_init(uint8_t prio, os_stack_t *stack_ptr, uint16_t stack_len)\n{\n    /* variable declarations here */\n\n    os_eventq_init( g_nmgr_evq);\n\n    /* initialization continues here */\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put/", 
            "text": "os_eventq_put\n\n\nvoid\nos_eventq_put(struct os_eventq *evq, struct os_event *ev)\n\n\n\n\nQueues an event to tail of the event queue.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevq\n\n\nQueue where event is being placed\n\n\n\n\n\n\nev\n\n\nEvent which is being queued\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nFunctionality is of \nos_eventq_put2()\n, but this is to be called from a task context only.\n\n\nExample\n\n\n\nThis is used to pass info about an event to a task handling it.\n\n\n    /* Get an event structure off the queue */\n    ev = (struct os_event *)os_memblock_get(\ng_hci_os_event_pool);\n    if (!ev) {\n        err = os_memblock_put(\ng_hci_cmd_pool, hci_ev);\n        assert(err == OS_OK);\n        return -1;\n    }\n\n    /* Fill out the event and post to Link Layer */\n    ev-\nev_queued = 0;\n    ev-\nev_type = BLE_HOST_HCI_EVENT_CTLR_EVENT;\n    ev-\nev_arg = hci_ev;\n    os_eventq_put(\nble_hs_evq, ev);", 
            "title": "os_eventq_put"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put/#os_eventq_put", 
            "text": "void\nos_eventq_put(struct os_eventq *evq, struct os_event *ev)  Queues an event to tail of the event queue.", 
            "title": " os_eventq_put"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put/#arguments", 
            "text": "Arguments  Description      evq  Queue where event is being placed    ev  Event which is being queued", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put/#notes", 
            "text": "Functionality is of  os_eventq_put2() , but this is to be called from a task context only.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put/#example", 
            "text": "This is used to pass info about an event to a task handling it.      /* Get an event structure off the queue */\n    ev = (struct os_event *)os_memblock_get( g_hci_os_event_pool);\n    if (!ev) {\n        err = os_memblock_put( g_hci_cmd_pool, hci_ev);\n        assert(err == OS_OK);\n        return -1;\n    }\n\n    /* Fill out the event and post to Link Layer */\n    ev- ev_queued = 0;\n    ev- ev_type = BLE_HOST_HCI_EVENT_CTLR_EVENT;\n    ev- ev_arg = hci_ev;\n    os_eventq_put( ble_hs_evq, ev);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put2/", 
            "text": "os_eventq_put2\n\n\nvoid\nos_eventq_put2(struct os_eventq *evq, struct os_event *ev, int isr)\n\n\n\n\nQueues an event to tail of the event queue.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevq\n\n\nQueue where event is being placed\n\n\n\n\n\n\nev\n\n\nEvent which is being queued\n\n\n\n\n\n\nisr\n\n\nTells whether call is being made from within interrupt handler or not\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nIf the event has already been queued, nothing happens. Including event's relative position within the queue itself.\n\n\nThis can be called either from interrupt handler (in which case \nisr\n should be set to 1), or from another task context (in which case *isr should be set as 0).\n\n\nExample\n\n\nThis wakes up the task waiting on task1_evq, which processes console input (console input comes from UART, and is passed in in interrupt context).\n\n\nstatic void\nmy_cons_input(int full_line)\n{\n    os_eventq_put2(\ntask1_evq, \ncons_ev, 1);\n}", 
            "title": "os_eventq_put2"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put2/#os_eventq_put2", 
            "text": "void\nos_eventq_put2(struct os_eventq *evq, struct os_event *ev, int isr)  Queues an event to tail of the event queue.", 
            "title": " os_eventq_put2"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put2/#arguments", 
            "text": "Arguments  Description      evq  Queue where event is being placed    ev  Event which is being queued    isr  Tells whether call is being made from within interrupt handler or not", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put2/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put2/#notes", 
            "text": "If the event has already been queued, nothing happens. Including event's relative position within the queue itself.  This can be called either from interrupt handler (in which case  isr  should be set to 1), or from another task context (in which case *isr should be set as 0).", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_put2/#example", 
            "text": "This wakes up the task waiting on task1_evq, which processes console input (console input comes from UART, and is passed in in interrupt context).  static void\nmy_cons_input(int full_line)\n{\n    os_eventq_put2( task1_evq,  cons_ev, 1);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_remove/", 
            "text": "os_eventq_remove\n\n\nvoid\nos_eventq_remove(struct os_eventq *evq, struct os_event *ev)\n\n\n\n\nRemoves an event which has been placed in a queue.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevq\n\n\nQueue where event is being removed from\n\n\n\n\n\n\nev\n\n\nEvent which is being removed\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nExample\n\n\n\nThis is from os_callout_stop(). User wants to stop a callout from getting passed to a task. If the event has already been queued, then remove it before it is seen.\n\n\n    if (c-\nc_evq) {\n        os_eventq_remove(c-\nc_evq, \nc-\nc_ev);\n    }", 
            "title": "os_eventq_remove"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_remove/#os_eventq_remove", 
            "text": "void\nos_eventq_remove(struct os_eventq *evq, struct os_event *ev)  Removes an event which has been placed in a queue.", 
            "title": " os_eventq_remove"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_remove/#arguments", 
            "text": "Arguments  Description      evq  Queue where event is being removed from    ev  Event which is being removed", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_remove/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_remove/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/event_queue/os_eventq_remove/#example", 
            "text": "This is from os_callout_stop(). User wants to stop a callout from getting passed to a task. If the event has already been queued, then remove it before it is seen.      if (c- c_evq) {\n        os_eventq_remove(c- c_evq,  c- c_ev);\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/semaphore/semaphore/", 
            "text": "Semaphore\n\n\nA semaphore is a structure used for gaining exclusive access (much like a mutex), synchronizing task operations and/or use in a \"producer/consumer\" roles. Semaphores like the ones used by the myNewt OS are called \"counting\" semaphores as they are allowed to have more than one token (explained below).\n\n\nDescription\n\n\nA semaphore is a fairly simple construct consisting of a queue for waiting tasks and the number of tokens currently owned by the semaphore. A semaphore can be obtained as long as there are tokens in the semaphore. Any task can add tokens to the semaphore and any task can request the semaphore, thereby removing tokens. When creating the semaphore, the initial number of tokens can be set as well.\n\n\nWhen used for exclusive access to a shared resource the semaphore only needs a single token. In this case, a single task \"creates\" the semaphore by calling \nos_sem_init\n with a value of one (1) for the token. When a task desires exclusive access to the shared resource it requests the semaphore by calling \nos_sem_pend\n. If there is a token the requesting task will acquire the semaphore and continue operation. If no tokens are available the task will be put to sleep until there is a token. A common \"problem\" with using a semaphore for exclusive access is called \npriority inversion\n. Consider the following scenario: a high and low priority task both share a resource which is locked using a semaphore. If the low priority task obtains the semaphore and then the high priority task requests the semaphore, the high priority task is now blocked until the low priority task releases the semaphore. Now suppose that there are tasks between the low priority task and the high priority task that want to run. These tasks will preempt the low priority task which owns the semaphore. Thus, the high priority task is blocked waiting for the low priority task to finish using the semaphore but the low priority task cannot run since other tasks are running. Thus, the high priority tasks is \"inverted\" in priority; in effect running at a much lower priority as normally it would preempt the other (lower priority) tasks. If this is an issue a mutex should be used instead of a semaphore.\n\n\nSemaphores can also be used for task synchronization. A simple example of this would be the following. A task creates a semaphore and initializes it with no tokens. The task then waits on the semaphore, and since there are no tokens, the task is put to sleep. When other tasks want to wake up the sleeping task they simply add a token by calling \nos_sem_release\n. This will cause the sleeping task to wake up (instantly if no other higher priority tasks want to run).\n\n\nThe other common use of a counting semaphore is in what is commonly called a \"producer/consumer\" relationship. The producer adds tokens (by calling \nos_sem_release\n) and the consumer consumes them by calling \nos_sem_pend\n. In this relationship, the producer has work for the consumer to do. Each token added to the semaphore will cause the consumer to do whatever work is required. A simple example could be the following: every time a button is pressed there is some work to do (ring a bell). Each button press causes the producer to add a token. Each token consumed rings the bell. There will exactly the same number of bell rings as there are button presses. In other words, each call to \nos_sem_pend\n subtracts exactly one token and each call to \nos_sem_release\n adds exactly one token.\n\n\nData structures\n\n\nstruct os_sem\n{\n    SLIST_HEAD(, os_task) sem_head;     /* chain of waiting tasks */\n    uint16_t    _pad;\n    uint16_t    sem_tokens;             /* # of tokens */\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsem_head\n\n\nQueue head for list of tasks waiting on semaphore\n\n\n\n\n\n\n_pad\n\n\nPadding for alignment\n\n\n\n\n\n\nsem_tokens\n\n\nCurrent number of tokens\n\n\n\n\n\n\n\n\nList of Functions\n\n\nThe functions available in semaphore are:\n\n\n\n\nos_sem_init\n\n\nos_sem_pend\n\n\nos_sem_release", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/semaphore/semaphore/#semaphore", 
            "text": "A semaphore is a structure used for gaining exclusive access (much like a mutex), synchronizing task operations and/or use in a \"producer/consumer\" roles. Semaphores like the ones used by the myNewt OS are called \"counting\" semaphores as they are allowed to have more than one token (explained below).", 
            "title": "Semaphore"
        }, 
        {
            "location": "/os/core_os/semaphore/semaphore/#description", 
            "text": "A semaphore is a fairly simple construct consisting of a queue for waiting tasks and the number of tokens currently owned by the semaphore. A semaphore can be obtained as long as there are tokens in the semaphore. Any task can add tokens to the semaphore and any task can request the semaphore, thereby removing tokens. When creating the semaphore, the initial number of tokens can be set as well.  When used for exclusive access to a shared resource the semaphore only needs a single token. In this case, a single task \"creates\" the semaphore by calling  os_sem_init  with a value of one (1) for the token. When a task desires exclusive access to the shared resource it requests the semaphore by calling  os_sem_pend . If there is a token the requesting task will acquire the semaphore and continue operation. If no tokens are available the task will be put to sleep until there is a token. A common \"problem\" with using a semaphore for exclusive access is called  priority inversion . Consider the following scenario: a high and low priority task both share a resource which is locked using a semaphore. If the low priority task obtains the semaphore and then the high priority task requests the semaphore, the high priority task is now blocked until the low priority task releases the semaphore. Now suppose that there are tasks between the low priority task and the high priority task that want to run. These tasks will preempt the low priority task which owns the semaphore. Thus, the high priority task is blocked waiting for the low priority task to finish using the semaphore but the low priority task cannot run since other tasks are running. Thus, the high priority tasks is \"inverted\" in priority; in effect running at a much lower priority as normally it would preempt the other (lower priority) tasks. If this is an issue a mutex should be used instead of a semaphore.  Semaphores can also be used for task synchronization. A simple example of this would be the following. A task creates a semaphore and initializes it with no tokens. The task then waits on the semaphore, and since there are no tokens, the task is put to sleep. When other tasks want to wake up the sleeping task they simply add a token by calling  os_sem_release . This will cause the sleeping task to wake up (instantly if no other higher priority tasks want to run).  The other common use of a counting semaphore is in what is commonly called a \"producer/consumer\" relationship. The producer adds tokens (by calling  os_sem_release ) and the consumer consumes them by calling  os_sem_pend . In this relationship, the producer has work for the consumer to do. Each token added to the semaphore will cause the consumer to do whatever work is required. A simple example could be the following: every time a button is pressed there is some work to do (ring a bell). Each button press causes the producer to add a token. Each token consumed rings the bell. There will exactly the same number of bell rings as there are button presses. In other words, each call to  os_sem_pend  subtracts exactly one token and each call to  os_sem_release  adds exactly one token.", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/semaphore/semaphore/#data-structures", 
            "text": "struct os_sem\n{\n    SLIST_HEAD(, os_task) sem_head;     /* chain of waiting tasks */\n    uint16_t    _pad;\n    uint16_t    sem_tokens;             /* # of tokens */\n};     Element  Description      sem_head  Queue head for list of tasks waiting on semaphore    _pad  Padding for alignment    sem_tokens  Current number of tokens", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/semaphore/semaphore/#list-of-functions", 
            "text": "The functions available in semaphore are:   os_sem_init  os_sem_pend  os_sem_release", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_init/", 
            "text": "os_sem_init\n\n\nos_error_t os_sem_init(struct os_sem *sem, uint16_t tokens)    \n\n\n\n\nInitialize a semaphore with a given number of tokens. Should be called before the semaphore is used.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*sem\n\n\nPointer to semaphore\n\n\n\n\n\n\ntokens\n\n\nInitial number of tokens allocated to semaphore\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_INVALID_PARM: returned when *sem is NULL on entry.\n\n\nOS_OK: semaphore initialized successfully.\n\n\nNotes\n\n\n\n\nExample\n\n\nThe following example shows how to initialize a semaphore used for exclusive access.\n\n\nstruct os_mutex g_os_sem;\nos_error_t err;\n\nerr = os_sem_init(\ng_os_sem, 1);\nassert(err == OS_OK);", 
            "title": "os_sem_init"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_init/#os_sem_init", 
            "text": "os_error_t os_sem_init(struct os_sem *sem, uint16_t tokens)      Initialize a semaphore with a given number of tokens. Should be called before the semaphore is used.", 
            "title": " os_sem_init"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_init/#arguments", 
            "text": "Arguments  Description      *sem  Pointer to semaphore    tokens  Initial number of tokens allocated to semaphore", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_init/#returned-values", 
            "text": "OS_INVALID_PARM: returned when *sem is NULL on entry.  OS_OK: semaphore initialized successfully.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_init/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_init/#example", 
            "text": "The following example shows how to initialize a semaphore used for exclusive access.  struct os_mutex g_os_sem;\nos_error_t err;\n\nerr = os_sem_init( g_os_sem, 1);\nassert(err == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_pend/", 
            "text": "os_sem_pend \n\n\nos_error_t os_sem_pend(struct os_sem *sem, uint32_t timeout)\n\n\n\n\nWait for a semaphore for a given amount of time.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*sem\n\n\nPointer to semaphore\n\n\n\n\n\n\ntimeout\n\n\nAmount of time, in os ticks, to wait for semaphore. A value of 0 means no wait. A value of 0xFFFFFFFF means wait forever.\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_INVALID_PARM: returned when *sem is NULL on entry.\n\n\nOS_OK: semaphore acquired successfully.\n\n\nOS_TIMEOUT: the semaphore was not available within the timeout specified.\n\n\nOS_NOT_STARTED: Attempt to release a semaphore before os started.\n\n\nNotes\n\n\nIf a timeout of 0 is used and the function returns OS_TIMEOUT, the semaphore was not available and was not acquired. No release of the semaphore should occur and the calling task does not own the semaphore.\n\n\nExample\n\n\nstruct os_sem g_os_sem;\nos_error_t err;\n\nerr = os_sem_pend(\ng_os_sem, OS_TIMEOUT_NEVER);\nassert(err == OS_OK);\n\n/* Perform operations requiring semaphore lock */\n\nerr = os_sem_release(\ng_os_sem);\nassert(err == OS_OK);", 
            "title": "os_sem_pend"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_pend/#os_sem_pend", 
            "text": "os_error_t os_sem_pend(struct os_sem *sem, uint32_t timeout)  Wait for a semaphore for a given amount of time.", 
            "title": " os_sem_pend "
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_pend/#arguments", 
            "text": "Arguments  Description      *sem  Pointer to semaphore    timeout  Amount of time, in os ticks, to wait for semaphore. A value of 0 means no wait. A value of 0xFFFFFFFF means wait forever.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_pend/#returned-values", 
            "text": "OS_INVALID_PARM: returned when *sem is NULL on entry.  OS_OK: semaphore acquired successfully.  OS_TIMEOUT: the semaphore was not available within the timeout specified.  OS_NOT_STARTED: Attempt to release a semaphore before os started.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_pend/#notes", 
            "text": "If a timeout of 0 is used and the function returns OS_TIMEOUT, the semaphore was not available and was not acquired. No release of the semaphore should occur and the calling task does not own the semaphore.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_pend/#example", 
            "text": "struct os_sem g_os_sem;\nos_error_t err;\n\nerr = os_sem_pend( g_os_sem, OS_TIMEOUT_NEVER);\nassert(err == OS_OK);\n\n/* Perform operations requiring semaphore lock */\n\nerr = os_sem_release( g_os_sem);\nassert(err == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_release/", 
            "text": "os_sem_release \n\n\nos_error_t os_sem_release(struct os_sem *sem)\n\n\n\n\nRelease a semaphore that you are holding. This adds a token to the semaphore.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*sem\n\n\nPointer to semaphore\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_NOT_STARTED: Called before os has been started.\n\n\nOS_INVALID_PARM: returned when *sem is NULL on entry.\n\n\nOS_OK: semaphore released successfully.\n\n\nNotes\n\n\nExample\n\n\nstruct os_sem g_os_sem;\nos_error_t err;\n\nerr = os_sem_pend(\ng_os_sem, OS_TIMEOUT_NEVER);\nassert(err == OS_OK);\n\n/* Perform operations requiring semaphore lock */\n\nerr = os_sem_release(\ng_os_sem);\nassert(err == OS_OK);", 
            "title": "os_sem_release"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_release/#os_sem_release", 
            "text": "os_error_t os_sem_release(struct os_sem *sem)  Release a semaphore that you are holding. This adds a token to the semaphore.", 
            "title": " os_sem_release "
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_release/#arguments", 
            "text": "Arguments  Description      *sem  Pointer to semaphore", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_release/#returned-values", 
            "text": "OS_NOT_STARTED: Called before os has been started.  OS_INVALID_PARM: returned when *sem is NULL on entry.  OS_OK: semaphore released successfully.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_release/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/semaphore/os_sem_release/#example", 
            "text": "struct os_sem g_os_sem;\nos_error_t err;\n\nerr = os_sem_pend( g_os_sem, OS_TIMEOUT_NEVER);\nassert(err == OS_OK);\n\n/* Perform operations requiring semaphore lock */\n\nerr = os_sem_release( g_os_sem);\nassert(err == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mutex/mutex/", 
            "text": "Mutex\n\n\nMutex is short for \"mutual exclusion\"; a mutex provides mutually exclusive access to a shared resource. A mutex provides \npriority inheritance\n in order to prevent \npriority inversion\n. Priority inversion occurs when a higher priority task is waiting on a resource owned by a lower priority task. Using a mutex, the lower priority task will inherit the highest priority of any task waiting on the mutex. \n\n\nDescription\n\n\nThe first order of business when using a mutex is to declare the mutex globally. The mutex needs to be initialized before it is used (see the examples). It is generally a good idea to initialize the mutex before tasks start running in order to avoid a task possibly using the mutex before it is initialized.\n\n\nWhen a task wants exclusive access to a shared resource it needs to obtain the mutex by calling \nos_mutex_pend\n. If the mutex is currently owned by a different task (a lower priority task), the requesting task will be put to sleep and the owners priority will be elevated to the priority of the requesting task. Note that multiple tasks can request ownership and the current owner is elevated to the highest priority of any task waitin on the mutex. When the task is done using the shared resource, it needs to release the mutex by called \nos_mutex_release\n. There needs to be one release per call to pend. Note that nested calls to \nos_mutex_pend\n are allowed but there needs to be one release per pend.\n\n\nThe following example will illustrate how priority inheritance works. In this example, the task number is the same as its priority. Remember that the lower the number, the higher the priority (i.e. priority 0 is higher priority than priority 1). Suppose that task 5 gets ownership of a mutex but is preempted by task 4. Task 4 attempts to gain ownership of the mutex but cannot as it is owned by task 5. Task 4 is put to sleep and task 5 is temporarily raised to priority 4. Before task 5 can release the mutex, task 3 runs and attempts to acquire the mutex. At this point, both task 3 and task 4 are waiting on the mutex (sleeping). Task 5 now runs at priority 3 (the highest priority of all the tasks waiting on the mutex). When task 5 finally releases the mutex it will be preempted as two higher priority tasks are waiting for it. \n\n\nNote that when multiple tasks are waiting on a mutex owned by another task, once the mutex is released the highest priority task waiting on the mutex is run. \n\n\nData structures\n\n\nstruct os_mutex\n{\n    SLIST_HEAD(, os_task) mu_head;\n    uint8_t     _pad;\n    uint8_t     mu_prio;\n    uint16_t    mu_level;\n    struct os_task *mu_owner;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmu_head\n\n\nQueue head for list of tasks waiting on mutex\n\n\n\n\n\n\n_pad\n\n\nPadding\n\n\n\n\n\n\nmu_prio\n\n\nDefault priority of owner of mutex. Used to reset priority of task when mutex released\n\n\n\n\n\n\nmu_level\n\n\nCall nesting level (for nested calls)\n\n\n\n\n\n\nmu_owner\n\n\nPointer to task structure which owns mutex\n\n\n\n\n\n\n\n\nList of Functions\n\n\n\n\nThe functions available in this OS feature are:\n\n\n\n\nos_mutex_init\n\n\nos_mutex_pend\n\n\nos_mutex_release", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/mutex/mutex/#mutex", 
            "text": "Mutex is short for \"mutual exclusion\"; a mutex provides mutually exclusive access to a shared resource. A mutex provides  priority inheritance  in order to prevent  priority inversion . Priority inversion occurs when a higher priority task is waiting on a resource owned by a lower priority task. Using a mutex, the lower priority task will inherit the highest priority of any task waiting on the mutex.", 
            "title": "Mutex"
        }, 
        {
            "location": "/os/core_os/mutex/mutex/#description", 
            "text": "The first order of business when using a mutex is to declare the mutex globally. The mutex needs to be initialized before it is used (see the examples). It is generally a good idea to initialize the mutex before tasks start running in order to avoid a task possibly using the mutex before it is initialized.  When a task wants exclusive access to a shared resource it needs to obtain the mutex by calling  os_mutex_pend . If the mutex is currently owned by a different task (a lower priority task), the requesting task will be put to sleep and the owners priority will be elevated to the priority of the requesting task. Note that multiple tasks can request ownership and the current owner is elevated to the highest priority of any task waitin on the mutex. When the task is done using the shared resource, it needs to release the mutex by called  os_mutex_release . There needs to be one release per call to pend. Note that nested calls to  os_mutex_pend  are allowed but there needs to be one release per pend.  The following example will illustrate how priority inheritance works. In this example, the task number is the same as its priority. Remember that the lower the number, the higher the priority (i.e. priority 0 is higher priority than priority 1). Suppose that task 5 gets ownership of a mutex but is preempted by task 4. Task 4 attempts to gain ownership of the mutex but cannot as it is owned by task 5. Task 4 is put to sleep and task 5 is temporarily raised to priority 4. Before task 5 can release the mutex, task 3 runs and attempts to acquire the mutex. At this point, both task 3 and task 4 are waiting on the mutex (sleeping). Task 5 now runs at priority 3 (the highest priority of all the tasks waiting on the mutex). When task 5 finally releases the mutex it will be preempted as two higher priority tasks are waiting for it.   Note that when multiple tasks are waiting on a mutex owned by another task, once the mutex is released the highest priority task waiting on the mutex is run.", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/mutex/mutex/#data-structures", 
            "text": "struct os_mutex\n{\n    SLIST_HEAD(, os_task) mu_head;\n    uint8_t     _pad;\n    uint8_t     mu_prio;\n    uint16_t    mu_level;\n    struct os_task *mu_owner;\n};     Element  Description      mu_head  Queue head for list of tasks waiting on mutex    _pad  Padding    mu_prio  Default priority of owner of mutex. Used to reset priority of task when mutex released    mu_level  Call nesting level (for nested calls)    mu_owner  Pointer to task structure which owns mutex", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/mutex/mutex/#list-of-functions", 
            "text": "The functions available in this OS feature are:   os_mutex_init  os_mutex_pend  os_mutex_release", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_pend/", 
            "text": "os_mutex_pend \n\n\nos_error_t os_mutex_pend(struct os_mutex *mu, uint32_t timeout) \n\n\n\n\nAcquire ownership of a mutex.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*mu\n\n\nPointer to mutex\n\n\n\n\n\n\ntimeout\n\n\nTimeout, in os ticks. A value of 0 means no timeout. A value of 0xFFFFFFFF means to wait forever.\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_INVALID_PARM: returned when *mu is NULL on entry.\n\n\nOS_OK: mutex was successfully acquired.\n\n\nOS_TIMEOUT: the mutex was not available within the timeout specified.\n\n\nOS_NOT_STARTED: Attempt to release a mutex before the os has been started.\n\n\nNotes\n\n\nIf the mutex is owned by another task and the timeout is 0 the function returns immediately with the error code OS_TIMEOUT. The calling task \ndoes not\n own the mutex when this occurs.\n\n\nExample\n\n\nstruct os_mutex g_mutex1;\nos_error_t err;\n\nerr = os_mutex_pend(\ng_mutex1, 0);\nassert(err == OS_OK);\n\n/* Perform operations requiring exclusive access */\n\nerr = os_mutex_release(\ng_mutex1);\nassert(err == OS_OK);", 
            "title": "os_mutex_init"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_pend/#os_mutex_pend", 
            "text": "os_error_t os_mutex_pend(struct os_mutex *mu, uint32_t timeout)   Acquire ownership of a mutex.", 
            "title": "os_mutex_pend "
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_pend/#arguments", 
            "text": "Arguments  Description      *mu  Pointer to mutex    timeout  Timeout, in os ticks. A value of 0 means no timeout. A value of 0xFFFFFFFF means to wait forever.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_pend/#returned-values", 
            "text": "OS_INVALID_PARM: returned when *mu is NULL on entry.  OS_OK: mutex was successfully acquired.  OS_TIMEOUT: the mutex was not available within the timeout specified.  OS_NOT_STARTED: Attempt to release a mutex before the os has been started.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_pend/#notes", 
            "text": "If the mutex is owned by another task and the timeout is 0 the function returns immediately with the error code OS_TIMEOUT. The calling task  does not  own the mutex when this occurs.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_pend/#example", 
            "text": "struct os_mutex g_mutex1;\nos_error_t err;\n\nerr = os_mutex_pend( g_mutex1, 0);\nassert(err == OS_OK);\n\n/* Perform operations requiring exclusive access */\n\nerr = os_mutex_release( g_mutex1);\nassert(err == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_release/", 
            "text": "os_mutex_release\n\n\nos_error_t os_mutex_release(struct os_mutex *mu)\n\n\n\n\nRelease ownership of a mutex\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*mu\n\n\nPointer to mutex\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_INVALID_PARM: returned when *mu is NULL on entry.\n\n\nOS_OK: mutex initialized successfully.\n\n\nOS_BAD_MUTEX: The mutex was not owned by the task attempting to release it.\n\n\nOS_NOT_STARTED: Attempt to release a mutex before the os has been started.\n\n\nExample\n\n\nstruct os_mutex g_mutex1;\nos_error_t err;\n\nerr = os_mutex_pend(\ng_mutex1, 0);\nassert(err == OS_OK);\n\n/* Perform operations requiring exclusive access */\n\nerr = os_mutex_release(\ng_mutex1);\nassert(err == OS_OK);", 
            "title": "os_mutex_release"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_release/#os_mutex_release", 
            "text": "os_error_t os_mutex_release(struct os_mutex *mu)  Release ownership of a mutex", 
            "title": "os_mutex_release"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_release/#arguments", 
            "text": "Arguments  Description      *mu  Pointer to mutex", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_release/#returned-values", 
            "text": "OS_INVALID_PARM: returned when *mu is NULL on entry.  OS_OK: mutex initialized successfully.  OS_BAD_MUTEX: The mutex was not owned by the task attempting to release it.  OS_NOT_STARTED: Attempt to release a mutex before the os has been started.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mutex/os_mutex_release/#example", 
            "text": "struct os_mutex g_mutex1;\nos_error_t err;\n\nerr = os_mutex_pend( g_mutex1, 0);\nassert(err == OS_OK);\n\n/* Perform operations requiring exclusive access */\n\nerr = os_mutex_release( g_mutex1);\nassert(err == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/memory_pool/memory_pool/", 
            "text": "Memory Pools\n\n\nA memory pool is a collection of fixed sized elements called memory blocks. Generally, memory pools are used when the developer wants to allocate a certain amount of memory to a given feature. Unlike the heap, where a code module is at the mercy of other code modules to insure there is sufficient memory, memory pools can insure sufficient memory allocation.\n\n\nDescription\n\n\nIn order to create a memory pool the developer needs to do a few things. The first task is to define the memory pool itself. This is a data structure which contains information about the pool itself (i.e. number of blocks, size of the blocks, etc).\n\n\nstruct os_mempool my_pool;\n\n\n\n\n\nThe next order of business is to allocate the memory used by the memory pool. This memory can either be statically allocated (i.e. a global variable) or dynamically allocated (i.e. from the heap). When determining the amount of memory required for the memory pool, simply multiplying the number of blocks by the size of each block is not sufficient as the OS may have alignment requirements. The alignment size definition is named \nOS_ALIGNMENT\n and can be found in os_arch.h as it is architecture specific. The memory block alignment is usually for efficiency but may be due to other reasons. Generally, blocks are aligned on 32-bit boundaries. Note that memory blocks must also be of sufficient size to hold a list pointer as this is needed to chain memory blocks on the free list.\n\n\nIn order to simplify this for the user two macros have been provided: \nOS_MEMPOOL_BYTES(n, blksize)\n and \nOS_MEMPOOL_SIZE(n, blksize)\n. The first macro returns the number of bytes needed for the memory pool while the second returns the number of \nos_membuf_t\n elements required by the memory pool. The \nos_membuf_t\n type is used to guarantee that the memory buffer used by the memory pool is aligned on the correct boundary. \n\n\nHere are some examples. Note that if a custom malloc implementation is used it must guarantee that the memory buffer used by the pool is allocated on the correct boundary (i.e. OS_ALIGNMENT).\n\n\nvoid *my_memory_buffer;\nmy_memory_buffer = malloc(OS_MEMPOOL_BYTES(NUM_BLOCKS, BLOCK_SIZE));\n\n\n\n\nos_membuf_t my_memory_buffer[OS_MEMPOOL_SIZE(NUM_BLOCKS, BLOCK_SIZE)];\n\n\n\n\n\nNow that the memory pool has been defined as well as the memory required for the memory blocks which make up the pool the user needs to initialize the memory pool by calling \nos_mempool_init\n.\n\n\nos_mempool_init(\nmy_pool, NUM_BLOCKS, BLOCK_SIZE, my_memory_buffer,\n                         \nMyPool\n);\n\n\n\n\n\nOnce the memory pool has been initialized the developer can allocate memory blocks from the pool by calling \nos_memblock_get\n. When the memory block is no longer needed the memory can be freed by calling \nos_memblock_put\n. \n\n\nData structures\n\n\nstruct os_mempool {\n    int mp_block_size;\n    int mp_num_blocks;\n    int mp_num_free;\n    uint32_t mp_membuf_addr;\n    STAILQ_ENTRY(os_mempool) mp_list;    \n    SLIST_HEAD(,os_memblock);\n    char *name;\n};\n\n\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmp_block_size\n\n\nSize of the memory blocks, in bytes. This is not the actual  number of bytes used by each block; it is the requested size of each block. The actual memory block size will be aligned to OS_ALIGNMENT bytes\n\n\n\n\n\n\nmp_num_blocks\n\n\nNumber of memory blocks in the pool\n\n\n\n\n\n\nmp_num_free\n\n\nNumber of free blocks left\n\n\n\n\n\n\nmp_membuf_addr\n\n\nThe address of the memory block. This is used to check that a valid memory block is being freed.\n\n\n\n\n\n\nmp_list\n\n\nList pointer to chain memory pools so they can be displayed by newt tools\n\n\n\n\n\n\nSLIST_HEAD(,os_memblock)\n\n\nList pointer to chain free memory blocks\n\n\n\n\n\n\nname\n\n\nName for the memory block\n\n\n\n\n\n\n\n\nList of Functions\n\n\nThe functions available in mem_pool are:\n\n\n\n\nos_memblock_get\n\n\nos_mempool_init\n\n\nos_memblock_put\n\n\nOS_MEMPOOL_BYTES\n\n\nOS_MEMPOOL_SIZE", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/memory_pool/memory_pool/#memory-pools", 
            "text": "A memory pool is a collection of fixed sized elements called memory blocks. Generally, memory pools are used when the developer wants to allocate a certain amount of memory to a given feature. Unlike the heap, where a code module is at the mercy of other code modules to insure there is sufficient memory, memory pools can insure sufficient memory allocation.", 
            "title": "Memory Pools"
        }, 
        {
            "location": "/os/core_os/memory_pool/memory_pool/#description", 
            "text": "In order to create a memory pool the developer needs to do a few things. The first task is to define the memory pool itself. This is a data structure which contains information about the pool itself (i.e. number of blocks, size of the blocks, etc).  struct os_mempool my_pool;  \nThe next order of business is to allocate the memory used by the memory pool. This memory can either be statically allocated (i.e. a global variable) or dynamically allocated (i.e. from the heap). When determining the amount of memory required for the memory pool, simply multiplying the number of blocks by the size of each block is not sufficient as the OS may have alignment requirements. The alignment size definition is named  OS_ALIGNMENT  and can be found in os_arch.h as it is architecture specific. The memory block alignment is usually for efficiency but may be due to other reasons. Generally, blocks are aligned on 32-bit boundaries. Note that memory blocks must also be of sufficient size to hold a list pointer as this is needed to chain memory blocks on the free list.  In order to simplify this for the user two macros have been provided:  OS_MEMPOOL_BYTES(n, blksize)  and  OS_MEMPOOL_SIZE(n, blksize) . The first macro returns the number of bytes needed for the memory pool while the second returns the number of  os_membuf_t  elements required by the memory pool. The  os_membuf_t  type is used to guarantee that the memory buffer used by the memory pool is aligned on the correct boundary.   Here are some examples. Note that if a custom malloc implementation is used it must guarantee that the memory buffer used by the pool is allocated on the correct boundary (i.e. OS_ALIGNMENT).  void *my_memory_buffer;\nmy_memory_buffer = malloc(OS_MEMPOOL_BYTES(NUM_BLOCKS, BLOCK_SIZE));  os_membuf_t my_memory_buffer[OS_MEMPOOL_SIZE(NUM_BLOCKS, BLOCK_SIZE)];  \nNow that the memory pool has been defined as well as the memory required for the memory blocks which make up the pool the user needs to initialize the memory pool by calling  os_mempool_init .  os_mempool_init( my_pool, NUM_BLOCKS, BLOCK_SIZE, my_memory_buffer,\n                          MyPool );  \nOnce the memory pool has been initialized the developer can allocate memory blocks from the pool by calling  os_memblock_get . When the memory block is no longer needed the memory can be freed by calling  os_memblock_put .", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/memory_pool/memory_pool/#data-structures", 
            "text": "struct os_mempool {\n    int mp_block_size;\n    int mp_num_blocks;\n    int mp_num_free;\n    uint32_t mp_membuf_addr;\n    STAILQ_ENTRY(os_mempool) mp_list;    \n    SLIST_HEAD(,os_memblock);\n    char *name;\n};      Element  Description      mp_block_size  Size of the memory blocks, in bytes. This is not the actual  number of bytes used by each block; it is the requested size of each block. The actual memory block size will be aligned to OS_ALIGNMENT bytes    mp_num_blocks  Number of memory blocks in the pool    mp_num_free  Number of free blocks left    mp_membuf_addr  The address of the memory block. This is used to check that a valid memory block is being freed.    mp_list  List pointer to chain memory pools so they can be displayed by newt tools    SLIST_HEAD(,os_memblock)  List pointer to chain free memory blocks    name  Name for the memory block", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/memory_pool/memory_pool/#list-of-functions", 
            "text": "The functions available in mem_pool are:   os_memblock_get  os_mempool_init  os_memblock_put  OS_MEMPOOL_BYTES  OS_MEMPOOL_SIZE", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_get/", 
            "text": "os_memblock_get\n\n\nvoid *os_memblock_get(struct os_mempool *mp)\n\n\n\n\nAllocate an element from the memory pool. If succesful, you'll get a pointer to allocated element. If there are no elements available, you'll get NULL as response.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmp\n\n\nPool where element is getting allocated from\n\n\n\n\n\n\n\n\nReturned values\n\n\nNULL: no elements available.\n\n: pointer to allocated element.\n\n\nNotes\n\n\nExample\n\n\n\n\n    struct nffs_file *file;\n\n    file = os_memblock_get(\nnffs_file_pool);\n    if (file != NULL) {\n        memset(file, 0, sizeof *file);\n    }", 
            "title": "os_memblock_get"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_get/#os_memblock_get", 
            "text": "void *os_memblock_get(struct os_mempool *mp)  Allocate an element from the memory pool. If succesful, you'll get a pointer to allocated element. If there are no elements available, you'll get NULL as response.", 
            "title": " os_memblock_get"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_get/#arguments", 
            "text": "Arguments  Description      mp  Pool where element is getting allocated from", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_get/#returned-values", 
            "text": "NULL: no elements available. : pointer to allocated element.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_get/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_get/#example", 
            "text": "struct nffs_file *file;\n\n    file = os_memblock_get( nffs_file_pool);\n    if (file != NULL) {\n        memset(file, 0, sizeof *file);\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_mempool_init/", 
            "text": "os_mempool_init\n\n\nos_error_t os_mempool_init(struct os_mempool *mp, int blocks, int block_size, void *membuf, char *name)\n\n\n\n\nInitializes the memory pool. Memory pointed to by \nmembuf\n is divided into \nblocks\n number of elements of size OS_ALIGN(\nblock_size\n). The \nname\n is optional, and names the memory pool.\n\n\nIt is assumed that the amount of memory pointed by \nmembuf\n has at least \nOS_MEMPOOL_BYTES(blocks, block_size)\n number of bytes.\n\n\nname\n is not copied, so caller should make sure that the memory does not get reused.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmp\n\n\nMemory pool being initialized\n\n\n\n\n\n\nblocks\n\n\nNumber of elements in the pool\n\n\n\n\n\n\nblock_size\n\n\nMinimum size of an individual element in pool\n\n\n\n\n\n\nmembuf\n\n\nBacking store for the memory pool elements\n\n\n\n\n\n\nname\n\n\nName of the memory pool\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK: operation was successful.\n\nOS_INVALID_PARAM: invalid parameters. Block count or block size was negative, or membuf or mp was NULL.\n\nOS_MEM_NOT_ALIGNED: membuf was not aligned on correct byte boundary.\n\n\nNotes\n\n\nNote that os_mempool_init() does not allocate backing storage; \nmembuf\n has to be allocated by the caller.\n\n\nIt's recommended that you use \nOS_MEMPOOL_BYTES()\n or \nOS_MEMPOOL_SIZE()\n to figure out how much memory to allocate for the pool.\n\n\nExample\n\n\n\n\n    void *nffs_file_mem;\n\n    nffs_file_mem = malloc(OS_MEMPOOL_BYTES(nffs_config.nc_num_files, sizeof (struct nffs_file)));\n\n    rc = os_mempool_init(\nnffs_file_pool, nffs_config.nc_num_files,\n                         sizeof (struct nffs_file), nffs_file_mem,\n                         \nnffs_file_pool\n);\n    if (rc != 0) {\n        /* Memory pool initialization failure */\n    }", 
            "title": "os_mempool_init"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_mempool_init/#os_mempool_init", 
            "text": "os_error_t os_mempool_init(struct os_mempool *mp, int blocks, int block_size, void *membuf, char *name)  Initializes the memory pool. Memory pointed to by  membuf  is divided into  blocks  number of elements of size OS_ALIGN( block_size ). The  name  is optional, and names the memory pool.  It is assumed that the amount of memory pointed by  membuf  has at least  OS_MEMPOOL_BYTES(blocks, block_size)  number of bytes.  name  is not copied, so caller should make sure that the memory does not get reused.", 
            "title": " os_mempool_init"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_mempool_init/#arguments", 
            "text": "Arguments  Description      mp  Memory pool being initialized    blocks  Number of elements in the pool    block_size  Minimum size of an individual element in pool    membuf  Backing store for the memory pool elements    name  Name of the memory pool", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_mempool_init/#returned-values", 
            "text": "OS_OK: operation was successful. \nOS_INVALID_PARAM: invalid parameters. Block count or block size was negative, or membuf or mp was NULL. \nOS_MEM_NOT_ALIGNED: membuf was not aligned on correct byte boundary.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_mempool_init/#notes", 
            "text": "Note that os_mempool_init() does not allocate backing storage;  membuf  has to be allocated by the caller.  It's recommended that you use  OS_MEMPOOL_BYTES()  or  OS_MEMPOOL_SIZE()  to figure out how much memory to allocate for the pool.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_mempool_init/#example", 
            "text": "void *nffs_file_mem;\n\n    nffs_file_mem = malloc(OS_MEMPOOL_BYTES(nffs_config.nc_num_files, sizeof (struct nffs_file)));\n\n    rc = os_mempool_init( nffs_file_pool, nffs_config.nc_num_files,\n                         sizeof (struct nffs_file), nffs_file_mem,\n                          nffs_file_pool );\n    if (rc != 0) {\n        /* Memory pool initialization failure */\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_put/", 
            "text": "os_memblock_put\n\n\nos_error_t os_memblock_put(struct os_mempool *mp, void *block_addr)\n\n\n\n\nReleases previously allocated element back to the pool.  \n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmp\n\n\nPointer to memory pool from which block was allocated\n\n\n\n\n\n\nblock_addr\n\n\nPointer to element getting freed\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK: operation was a success:\n\nOS_INVALID_PARAM: If either mp or block_addr were NULL, or the block being freed was outside the range of the memory buffer or not on a true block size boundary.\n\n\n\n\nExample\n\n\n\n\n    if (file != NULL) {\n        rc = os_memblock_put(\nnffs_file_pool, file);\n        if (rc != 0) {\n            /* Error freeing memory block */\n        }\n    }", 
            "title": "os_memblock_put"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_put/#os_memblock_put", 
            "text": "os_error_t os_memblock_put(struct os_mempool *mp, void *block_addr)  Releases previously allocated element back to the pool.", 
            "title": "os_memblock_put"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_put/#arguments", 
            "text": "Arguments  Description      mp  Pointer to memory pool from which block was allocated    block_addr  Pointer to element getting freed", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_put/#returned-values", 
            "text": "OS_OK: operation was a success: \nOS_INVALID_PARAM: If either mp or block_addr were NULL, or the block being freed was outside the range of the memory buffer or not on a true block size boundary.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/memory_pool/os_memblock_put/#example", 
            "text": "if (file != NULL) {\n        rc = os_memblock_put( nffs_file_pool, file);\n        if (rc != 0) {\n            /* Error freeing memory block */\n        }\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_BYTES/", 
            "text": "OS_MEMPOOL_BYTES\n\n\nOS_MEMPOOL_BYTES(n,blksize)\n\n\n\n\nCalculates how many bytes of memory is used by \nn\n number of elements, when individual element size is \nblksize\n bytes.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nNumber of elements\n\n\n\n\n\n\nblksize\n\n\nSize of an element is number of bytes\n\n\n\n\n\n\n\n\nReturned values\n\n\nThe number of bytes used by the memory pool.\n\n\n\n\nNotes\n\n\nOS_MEMPOOL_BYTES is a macro and not a function.\n\n\n\n\nExample\n\n\nHere we allocate memory to be used as a pool.\n\n\n    void *nffs_file_mem;\n\n    nffs_file_mem = malloc(OS_MEMPOOL_BYTES(nffs_config.nc_num_files, sizeof (struct nffs_file)));\n    if (nffs_file_mem == NULL) {\n        return FS_ENOMEM;\n    }", 
            "title": "OS_MEMPOOL_BYTES"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_BYTES/#os_mempool_bytes", 
            "text": "OS_MEMPOOL_BYTES(n,blksize)  Calculates how many bytes of memory is used by  n  number of elements, when individual element size is  blksize  bytes.", 
            "title": "OS_MEMPOOL_BYTES"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_BYTES/#arguments", 
            "text": "Arguments  Description      n  Number of elements    blksize  Size of an element is number of bytes", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_BYTES/#returned-values", 
            "text": "The number of bytes used by the memory pool.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_BYTES/#notes", 
            "text": "OS_MEMPOOL_BYTES is a macro and not a function.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_BYTES/#example", 
            "text": "Here we allocate memory to be used as a pool.      void *nffs_file_mem;\n\n    nffs_file_mem = malloc(OS_MEMPOOL_BYTES(nffs_config.nc_num_files, sizeof (struct nffs_file)));\n    if (nffs_file_mem == NULL) {\n        return FS_ENOMEM;\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_SIZE/", 
            "text": "OS_MEMPOOL_SIZE\n\n\nOS_MEMPOOL_SIZE(n,blksize)\n\n\n\n\nCalculates the number of os_membuf_t elements used by \nn\n blocks of size \nblksize\n bytes.\n\n\nNote that os_membuf_t is used so that memory blocks are aligned on OS_ALIGNMENT boundaries.\n\n\nThe \nblksize\n variable is the minimum number of bytes required for each block; the actual block size is padded so that each block is aligned on OS_ALIGNMENT boundaries.  \n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nn\n\n\nNumber of elements\n\n\n\n\n\n\nblksize\n\n\nSize of an element is number of bytes\n\n\n\n\n\n\n\n\nReturned values\n\n\nThe number of os_membuf_t elements used by the memory pool. Note that os_membuf_t is defined to be a unsigned, 32-bit integer when OS_ALIGNMENT is 4 and an unsigned, 64-bit integer when OS_ALIGNMENT is 8.\n\n\n\n\nNotes\n\n\nOS_MEMPOOL_SIZE is a macro and not a function.\n\n\n\n\nExample\n\n\nHere we define a memory buffer to be used by a memory pool using OS_MEMPOOL_SIZE\n\n\n#define NUM_BLOCKS      (16)\n#define BLOCK_SIZE      (32)\n\nos_membuf_t my_pool_memory[OS_MEMPOOL_SIZE(NUM_BLOCKS, BLOCK_SIZE)]", 
            "title": "OS_MEMPOOL_SIZE"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_SIZE/#os_mempool_size", 
            "text": "OS_MEMPOOL_SIZE(n,blksize)  Calculates the number of os_membuf_t elements used by  n  blocks of size  blksize  bytes.  Note that os_membuf_t is used so that memory blocks are aligned on OS_ALIGNMENT boundaries.  The  blksize  variable is the minimum number of bytes required for each block; the actual block size is padded so that each block is aligned on OS_ALIGNMENT boundaries.", 
            "title": "OS_MEMPOOL_SIZE"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_SIZE/#arguments", 
            "text": "Arguments  Description      n  Number of elements    blksize  Size of an element is number of bytes", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_SIZE/#returned-values", 
            "text": "The number of os_membuf_t elements used by the memory pool. Note that os_membuf_t is defined to be a unsigned, 32-bit integer when OS_ALIGNMENT is 4 and an unsigned, 64-bit integer when OS_ALIGNMENT is 8.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_SIZE/#notes", 
            "text": "OS_MEMPOOL_SIZE is a macro and not a function.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/memory_pool/OS_MEMPOOL_SIZE/#example", 
            "text": "Here we define a memory buffer to be used by a memory pool using OS_MEMPOOL_SIZE  #define NUM_BLOCKS      (16)\n#define BLOCK_SIZE      (32)\n\nos_membuf_t my_pool_memory[OS_MEMPOOL_SIZE(NUM_BLOCKS, BLOCK_SIZE)]", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/heap/heap/", 
            "text": "Heap\n\n\nAPI for doing dynamic memory allocation.\n\n\nDescription\n\n\nThis provides malloc()/free() functionality with locking.  The shared resource heap needs to be protected from concurrent access when OS has been started. \nos_malloc()\n function grabs a mutex before calling \nmalloc()\n.\n\n\nData structures\n\n\nN/A\n\n\nList of Functions\n\n\nThe functions available in heap are:\n\n\n\n\nos_free\n\n\nos_malloc\n\n\nos_realloc", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/heap/heap/#heap", 
            "text": "API for doing dynamic memory allocation.", 
            "title": "Heap"
        }, 
        {
            "location": "/os/core_os/heap/heap/#description", 
            "text": "This provides malloc()/free() functionality with locking.  The shared resource heap needs to be protected from concurrent access when OS has been started.  os_malloc()  function grabs a mutex before calling  malloc() .", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/heap/heap/#data-structures", 
            "text": "N/A", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/heap/heap/#list-of-functions", 
            "text": "The functions available in heap are:   os_free  os_malloc  os_realloc", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/heap/os_free/", 
            "text": "os_free\n\n\nvoid os_free(void *mem)\n\n\n\n\nFrees previously allocated memory back to the heap.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmem\n\n\nPointer to memory being released\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nCalls C-library \nfree()\n behind the covers.\n\n\nExample\n\n\n\n\n   os_free(info);", 
            "title": "os_free"
        }, 
        {
            "location": "/os/core_os/heap/os_free/#os_free", 
            "text": "void os_free(void *mem)  Frees previously allocated memory back to the heap.", 
            "title": "os_free"
        }, 
        {
            "location": "/os/core_os/heap/os_free/#arguments", 
            "text": "Arguments  Description      mem  Pointer to memory being released", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/heap/os_free/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/heap/os_free/#notes", 
            "text": "Calls C-library  free()  behind the covers.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/heap/os_free/#example", 
            "text": "os_free(info);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/heap/os_malloc/", 
            "text": "os_malloc\n\n\nvoid *os_malloc(size_t size)\n\n\n\n\nAllocates \nsize\n number of bytes from heap and returns a pointer to it.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\nNumber of bytes to allocate\n\n\n\n\n\n\n\n\nReturned values\n\n\n: pointer to memory allocated from heap.\nNULL: not enough memory available.\n\n\nNotes\n\n\nos_malloc()\n calls \nmalloc()\n, which is provided by C-library. The heap must be set up during platform initialization.\nDepending on which C-library you use, you might have to do the heap setup differently. Most often \nmalloc()\n implementation will maintain a list of allocated and then freed memory blocks. If user asks for memory which cannot be satisfied from free list, they'll call platform's \nsbrk()\n, which then tries to grow the heap.\n\n\nExample\n\n\n\n\n    info = (struct os_task_info *) os_malloc(\n            sizeof(struct os_task_info) * tcount);\n    if (!info) {\n        rc = -1;\n        goto err;\n    }", 
            "title": "os_malloc"
        }, 
        {
            "location": "/os/core_os/heap/os_malloc/#os_malloc", 
            "text": "void *os_malloc(size_t size)  Allocates  size  number of bytes from heap and returns a pointer to it.", 
            "title": " os_malloc"
        }, 
        {
            "location": "/os/core_os/heap/os_malloc/#arguments", 
            "text": "Arguments  Description      size  Number of bytes to allocate", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/heap/os_malloc/#returned-values", 
            "text": ": pointer to memory allocated from heap.\nNULL: not enough memory available.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/heap/os_malloc/#notes", 
            "text": "os_malloc()  calls  malloc() , which is provided by C-library. The heap must be set up during platform initialization.\nDepending on which C-library you use, you might have to do the heap setup differently. Most often  malloc()  implementation will maintain a list of allocated and then freed memory blocks. If user asks for memory which cannot be satisfied from free list, they'll call platform's  sbrk() , which then tries to grow the heap.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/heap/os_malloc/#example", 
            "text": "info = (struct os_task_info *) os_malloc(\n            sizeof(struct os_task_info) * tcount);\n    if (!info) {\n        rc = -1;\n        goto err;\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/heap/os_realloc/", 
            "text": "os_realloc\n\n\nvoid *os_realloc(void *ptr, size_t size)\n\n\n\n\nTries to resize previously allocated memory block, and returns pointer to resized memory.\nptr can be NULL, in which case the call is similar to calling \nos_malloc()\n.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nptr\n\n\nPointer to previously allocated memory\n\n\n\n\n\n\nsize\n\n\nNew size to adjust the memory block to\n\n\n\n\n\n\n\n\nReturned values\n\n\nNULL: size adjustment was not successful. \n\nptr: pointer to new start of memory block\n\n\nNotes\n\n\nExample\n\n\n\n\nInsert the code snippet here", 
            "title": "os_realloc"
        }, 
        {
            "location": "/os/core_os/heap/os_realloc/#os_realloc", 
            "text": "void *os_realloc(void *ptr, size_t size)  Tries to resize previously allocated memory block, and returns pointer to resized memory.\nptr can be NULL, in which case the call is similar to calling  os_malloc() .", 
            "title": "os_realloc"
        }, 
        {
            "location": "/os/core_os/heap/os_realloc/#arguments", 
            "text": "Arguments  Description      ptr  Pointer to previously allocated memory    size  New size to adjust the memory block to", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/heap/os_realloc/#returned-values", 
            "text": "NULL: size adjustment was not successful.  \nptr: pointer to new start of memory block", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/heap/os_realloc/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/heap/os_realloc/#example", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/", 
            "text": "Mbufs\n\n\nThe mbuf (short for memory buffer) is a common concept in networking stacks. The mbuf is used to hold packet data as it traverses the stack. The mbuf also generally stores header information or other networking stack information that is carried around with the packet. The mbuf and its associated library of functions were developed to make common networking stack operations (like stripping and adding protocol headers) efficient and as copy-free as possible.\n\n\nIn its simplest form, an mbuf is a memory block with some space reserved for internal information and a pointer which is used to \"chain\" memory blocks together in order to create a \"packet\". This is a very important aspect of the mbuf: the ability to chain mbufs together to create larger \"packets\" (chains of mbufs).\n\n\nWhy use mbufs?\n\n\nThe main reason is to conserve memory. Consider a networking protocol that generally sends small packets but occasionally sends large ones. The Bluetooth Low Energy (BLE) protocol is one such example. A flat buffer would need to be sized so that the maximum packet size could be contained by the buffer. With the mbuf, a number of mbufs can be chained together so that the occasional large packet can be handled while leaving more packet buffers available to the networking stack for smaller packets.\n\n\nPacket Header mbuf\n\n\nNot all mbufs are created equal. The first mbuf in a chain of mbufs is a special mbuf called a \"packet header mbuf\". The reason that this mbuf is special is that it contains the length of all the data contained by the chain of mbufs (the packet length, in other words). The packet header mbuf may also contain a user defined structure (called a \"user header\") so that networking protocol specific information can be conveyed to various layers of the networking stack. Any mbufs that are part of the packet (i.e. in the mbuf chain but not the first one) are \"normal\" (i.e. non-packet header) mbufs. A normal mbuf does not have any packet header or user packet header structures in them; they only contain the basic mbuf header (\nstruct os_mbuf\n). Figure 1 illustrates these two types of mbufs. Note that the numbers/text in parentheses denote the size of the structures/elements (in bytes) and that MBLEN is the memory block length of the memory pool used by the mbuf pool.\n\n\n\n\nNormal mbuf\n\n\nNow let's take a deeper dive into the mbuf structure. Figure 2 illustrates a normal mbuf and breaks out the various fields in the \nos_mbuf\n structure. \n\n\n\n\nThe \nom_data\n field is a pointer to where the data starts inside the data buffer. Typically, mbufs that are allocated from the mbuf pool (discussed later) have their om_data pointer set to the start of the data buffer but there are cases where this may not be desirable (added a protocol header to a packet, for example). \n\n\nThe \nom_flags\n field is a set of flags used internally by the mbuf library. Currently, no flags have been defined. \n\n\nThe \nom_pkthdr_len\n field is the total length of all packet headers in the mbuf. For normal mbufs this is set to 0 as there is no packet or user packet headers. For packet header mbufs, this would be set to the length of the packet header structure (16) plus the size of the user packet header (if any). Note that it is this field which differentiates packet header mbufs from normal mbufs (i.e. if \nom_pkthdr_len\n is zero, this is a normal mbuf; otherwise it is a packet header mbuf). \n\n\nThe \nom_len\n field contains the amount of user data in the data buffer. When initially allocated, this field is 0 as there is no user data in the mbuf. \n\n\nThe \nomp_pool\n field is a pointer to the pool from which this mbuf has been allocated. This is used internally by the mbuf library. \n\n\nThe \nomp_next\n field is a linked list element which is used to chain mbufs.\n\n\n\n\nFigure 2 also shows a normal mbuf with actual values in the \nos_mbuf\n structure. This mbuf starts at address 0x1000 and is 256 bytes in total length. In this example, the user has copied 33 bytes into the data buffer starting at address 0x1010 (this is where om_data points). Note that the packet header length in this mbuf is 0 as it is not a packet header mbuf.\n\n\n\n\nFigure 3 illustrates the packet header mbuf along with some chained mbufs (i.e a \"packet\"). In this example, the user header structure is defined to be 8 bytes. Note that in figure 3 we show a number of different mbufs with varying \nom_data\n pointers and lengths since we want to show various examples of valid mbufs. For all the mbufs (both packet header and normal ones) the total length of the memory block is 128 bytes.\n\n\n\n\nMbuf pools\n\n\nMbufs are collected into \"mbuf pools\" much like memory blocks. The mbuf pool itself contains a pointer to a memory pool. The memory blocks in this memory pool are the actual mbufs; both normal and packet header mbufs. Thus, the memory block (and corresponding memory pool) must be sized correctly. In other words, the memory blocks which make up the memory pool used by the mbuf pool must be at least: sizeof(struct os_mbuf) + sizeof(struct os_mbuf_pkthdr) + sizeof(struct user_defined_header) + desired minimum data buffer length. For example, if the developer wants mbufs to contain at least 64 bytes of user data and they have a user header of 12 bytes, the size of the memory block would be (at least): 64 + 12 + 16 + 8, or 100 bytes. Yes, this is a fair amount of overhead. However, the flexibility provided by the mbuf library usually outweighs overhead concerns.\n\n\nCreate mbuf pool\n\n\nCreating an mbuf pool is fairly simple: create a memory pool and then create the mbuf pool using that memory pool. Once the developer has determined the size of the user data needed per mbuf (this is based on the application/networking stack and is outside the scope of this discussion) and the size of the user header (if any), the memory blocks can be sized. In the example shown below, the application requires 64 bytes of user data per mbuf and also allocates a user header (called struct user_hdr). Note that we do not show the user header data structure as there really is no need; all we need to do is to account for it when creating the memory pool. In the example, we use the macro \nMBUF_PKTHDR_OVERHEAD\n to denote the amount of packet header overhead per mbuf and \nMBUF_MEMBLOCK_OVERHEAD\n to denote the total amount of overhead required per memory block. The macro \nMBUF_BUF_SIZE\n is used to denote the amount of payload that the application requires (aligned on a 32-bit boundary in this case). All this leads to the total memory block size required, denoted by the macro \nMBUF_MEMBLOCK_OVERHEAD\n.\n\n\n\n#define MBUF_PKTHDR_OVERHEAD    sizeof(struct os_mbuf_pkthdr) + sizeof(struct user_hdr)\n#define MBUF_MEMBLOCK_OVERHEAD  sizeof(struct os_mbuf) + MBUF_PKTHDR_OVERHEAD\n\n#define MBUF_NUM_MBUFS      (32)\n#define MBUF_PAYLOAD_SIZE   (64)\n#define MBUF_BUF_SIZE       OS_ALIGN(MBUF_PAYLOAD_SIZE, 4)\n#define MBUF_MEMBLOCK_SIZE  (MBUF_BUF_SIZE + MBUF_MEMBLOCK_OVERHEAD)\n#define MBUF_MEMPOOL_SIZE   OS_MEMPOOL_SIZE(MBUF_NUM_MBUFS, MBUF_MEMBLOCK_SIZE)\n\nstruct os_mbuf_pool g_mbuf_pool; \nstruct os_mempool g_mbuf_mempool;\nos_membuf_t g_mbuf_buffer[MBUF_MEMPOOL_SIZE];\n\nvoid\ncreate_mbuf_pool(void)\n{\n    int rc;\n\n    rc = os_mempool_init(\ng_mbuf_mempool, MBUF_NUM_MBUFS, \n                          MBUF_MEMBLOCK_SIZE, \ng_mbuf_buffer[0], \nmbuf_pool\n);\n    assert(rc == 0);\n\n    rc = os_mbuf_pool_init(\ng_mbuf_pool, \ng_mbuf_mempool, MBUF_MEMBLOCK_SIZE, \n                           MBUF_NUM_MBUFS);\n    assert(rc == 0);\n}\n\n\n\n\n\nUsing mbufs\n\n\nThe following examples illustrate typical mbuf usage. There are two basic mbuf allocation API: \nos_mbuf_get()\n and \nos_mbuf_get_pkthdr()\n. The first API obtains a normal mbuf whereas the latter obtains a packet header mbuf. Typically, application developers use \nos_mbuf_get_pkthdr()\n and rarely, if ever, need to call \nos_mbuf_get()\n as the rest of the mbuf API (e.g. \nos_mbuf_append()\n, \nos_mbuf_copyinto()\n, etc.) typically deal with allocating and chaining mbufs. It is recommended to use the provided API to copy data into/out of mbuf chains and/or manipulate mbufs.\n\n\nIn \nexample1\n, the developer creates a packet and then sends the packet to a networking interface. The code sample also provides an example of copying data out of an mbuf as well as use of the \"pullup\" api (another very common mbuf api).\n\n\n\nvoid\nmbuf_usage_example1(uint8_t *mydata, int mydata_length)\n{\n    int rc;\n    struct os_mbuf *om;\n\n    /* get a packet header mbuf */\n    om = os_mbuf_get_pkthdr(\ng_mbuf_pool, sizeof(struct user_hdr));\n    if (om) {\n        /* \n         * Copy user data into mbuf. NOTE: if mydata_length is greater than the\n         * mbuf payload size (64 bytes using above example), mbufs are allocated\n         * and chained together to accommodate the total packet length.\n         */\n        rc = os_mbuf_copyinto(om, 0, mydata, len);\n        if (rc) {\n            /* Error! Could not allocate enough mbufs for total packet length */\n            return -1;\n        }\n\n        /* Send packet to networking interface */\n        send_pkt(om);\n    }\n}\n\n\n\n\nIn \nexample2\n we show use of the pullup api as this illustrates some of the typical pitfalls developers encounter when using mbufs. The first pitfall is one of alignment/padding. Depending on the processor and/or compiler, the sizeof() a structure may vary. Thus, the size of \nmy_protocol_header\n may be different inside the packet data of the mbuf than the size of the structure on the stack or as a global variable, for instance. While some networking protcols may align protocol information on convenient processor boundaries many others try to conserve bytes \"on the air\" (i.e inside the packet data). Typical methods used to deal with this are \"packing\" the structure (i.e. force compiler to not pad) or creating protocol headers that do not require padding. \nexample2\n assumes that one of these methods was used when defining the \nmy_protocol_header\n structure.\n\n\nAnother common pitfall occurs around endianness. A network protocol may be little endian or big endian; it all depends on the protocol specification. Processors also have an endianness; this means that the developer has to be careful that the processor endianness and the protocol endianness are handled correctly. In \nexample2\n, some common networking functions are used: \nntohs()\n and \nntohl()\n. These are shorthand for \"network order to host order, short\" and \"network order to host order, long\". Basically, these functions convert data of a certain size (i.e. 16 bits, 32 bits, etc) to the endianness of the host. Network byte order is big-endian (most significant byte first), so these functions convert big-endian byte order to host order (thus, the implementation of these functions is host dependent). Note that the BLE networking stack \"on the air\" format is least signigicant byte first (i.e. little endian), so a \"bletoh\" function would have to take little endian format and convert to host format.\n\n\nA long story short: the developer must take care when copying structure data to/from mbufs and flat buffers!\n\n\nA final note: these examples assume the same mbuf struture and definitions used in the first example. \n\n\nvoid\nmbuf_usage_example2(struct mbuf *rxpkt)\n{\n    int rc;\n    uint8_t packet_data[16];\n    struct mbuf *om;\n    struct my_protocol_header *phdr;\n\n    /* Make sure that \nmy_protocol_header\n bytes are contiguous in mbuf */\n    om = os_mbuf_pullup(\ng_mbuf_pool, sizeof(struct my_protocol_header));\n    if (!om) {\n        /* Not able to pull up data into contiguous area */\n        return -1;\n    }\n\n    /* \n     * Get the protocol information from the packet. In this example we presume that we\n     * are interested in protocol types that are equal to MY_PROTOCOL_TYPE, are not zero\n     * length, and have had some time in flight.\n     */\n    phdr = OS_MBUF_DATA(om, struct my_protocol_header *);\n    type = ntohs(phdr-\nprot_type);\n    length = ntohs(phdr-\nprot_length);\n    time_in_flight = ntohl(phdr-\nprot_tif);\n\n    if ((type == MY_PROTOCOL_TYPE) \n (length \n 0) \n (time_in_flight \n 0)) {\n        rc = os_mbuf_copydata(rxpkt, sizeof(struct my_protocol_header), 16, packet_data);\n        if (!rc) {\n            /* Success! Perform operations on packet data */\n            \n... user code here ...\n\n        }\n    }\n\n    /* Free passed in packet (mbuf chain) since we dont need it anymore */\n    os_mbuf_free_chain(om);\n}\n\n\n\n\n\n\n\nMsys\n\n\nmsys stands for \"system mbufs\" and is set of API built on top of the mbuf code. The basic idea behind msys is the following. The developer can create different size mbuf pools and register them with msys. The application then allocates mbufs using the msys API (as opposed to the mbuf API). The msys code will choose the mbuf pool with the smallest mbufs that can accommodate the requested size. \n\n\nLet us walk through an example where the user registers three mbuf pools with msys: one with 32 byte mbufs, one with 256 and one with 2048. If the user requests an mbuf with 10 bytes, the 32-byte mbuf pool is used. If the request is for 33 bytes the 256 byte mbuf pool is used. If an mbuf data size is requested that is larger than any of the pools (say, 4000 bytes) the largest pool is used. While this behaviour may not be optimal in all cases that is the currently implemented behaviour. All this means is that the user is not guaranteed that a single mbuf can hold the requested data.\n\n\nThe msys code will not allocate an mbuf from a larger pool if the chosen mbuf pool is empty. Similarly, the msys code will not chain together a number of smaller mbufs to accommodate the requested size. While this behaviour may change in future implementations the current code will simply return NULL. Using the above example, say the user requests 250 bytes. The msys code chooses the appropriate pool (i.e. the 256 byte mbuf pool) and attempts to allocate an mbuf from that pool. If that pool is empty, NULL is returned even though the 32 and 2048 byte pools are not empty.\n\n\nNote that no added descriptions on how to use the msys API are presented here (other than in the API descriptions themselves) as the msys API is used in exactly the same manner as the mbuf API. The only difference is that mbuf pools are added to msys by calling \nos_msys_register().\n\n\n  \n\n\nData Structures\n\n\nstruct os_mbuf_pool {\n    uint16_t omp_databuf_len;\n    uint16_t omp_mbuf_count;\n    struct os_mempool *omp_pool;\n    STAILQ_ENTRY(os_mbuf_pool) omp_next;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nomp_databuf_len\n\n\nThe length, in bytes, of the \"data buffer\" of the mbuf. The data buffer of the mbuf is everything except the os_mbuf structure (which is present in all types of mbufs)\n\n\n\n\n\n\nomp_mbuf_count\n\n\nTotal number of mbufs in the pool when allocated. This is NOT the number of free mbufs in the pool!\n\n\n\n\n\n\nomp_pool\n\n\nThe memory pool from which the mbufs are allocated\n\n\n\n\n\n\nomp_next\n\n\nThis is a linked list pointer which chains memory pools. It is used by the system memory pool library\n\n\n\n\n\n\n\n\n\n\nstruct os_mbuf_pkthdr {\n    uint16_t omp_len;\n    uint16_t omp_flags;\n    STAILQ_ENTRY(os_mbuf_pkthdr) omp_next;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nomp_len\n\n\nLength, in bytes, of the \"packet\". This is the sum of the user data in all the mbufs chained to the packet header mbuf (including the packet header mbuf)\n\n\n\n\n\n\nomp_flags\n\n\nPacket header flags.\n\n\n\n\n\n\nomp_next\n\n\nLinked list pointer to chain \"packets\". This can be used to add mbuf chains to a queue or linked list and is there for convenience.\n\n\n\n\n\n\n\n\n\n\nstruct os_mbuf {\n    uint8_t *om_data;\n    uint8_t om_flags;\n    uint8_t om_pkthdr_len;\n    uint16_t om_len;\n    struct os_mbuf_pool *om_omp;\n    SLIST_ENTRY(os_mbuf) om_next;\n    uint8_t om_databuf[0];\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom_data\n\n\nPointer to start of user data in mbuf data buffer\n\n\n\n\n\n\nom_flags\n\n\nmbuf flags field. Currently all flags unused.\n\n\n\n\n\n\nom_pkthdr_len\n\n\nThe total length of all packet headers in the mbuf (mbuf packet header plus user packet header), in bytes\n\n\n\n\n\n\nom_len\n\n\nThe length of the user data contained in this mbuf, in bytes\n\n\n\n\n\n\nom_omp\n\n\nMemory pool pointer. This is the mbuf pool from which this mbuf was allocated.\n\n\n\n\n\n\nom_next\n\n\nPointer to next mbuf in packet chain\n\n\n\n\n\n\nom_databuf\n\n\nmbuf data buffer (accessor to start of mbuf data buffer). Note that the mbuf data buffer refers to the start of either the user data in normal mbufs or the start of the os mbuf packet header for packet header mbufs\n\n\n\n\n\n\n\n\nList of Functions/Macros\n\n\nThe functions/macros available in mbuf are:\n\n\n\n\nOS_MBUF_PKTHDR\n\n\nOS_MBUF_PKTHDR_TO_MBUF\n\n\nOS_MBUF_PKTLEN\n\n\nOS_MBUF_DATA\n\n\nOS_MBUF_USRHDR\n\n\nOS_MBUF_USRHDR_LEN\n\n\nOS_MBUF_LEADINGSPACE\n\n\nOS_MBUF_TRAILINGSPACE\n\n\nos_mbuf_adj\n\n\nos_mbuf_append\n\n\nos_mbuf_concat\n\n\nos_mbuf_copydata\n\n\nos_mbuf_copyinto\n\n\nos_mbuf_dup\n\n\nos_mbuf_extend\n\n\nos_mbuf_free_chain\n\n\nos_mbuf_get\n\n\nos_mbuf_get_pkthdr\n\n\nos_mbuf_memcmp\n\n\nos_mbuf_off\n\n\nos_mbuf_pool_init\n\n\nos_mbuf_prepend\n\n\nos_mbuf_pullup\n\n\nos_msys_get\n\n\nos_msys_get_pkthdr\n\n\nos_msys_register\n\n\nos_msys_reset", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#mbufs", 
            "text": "The mbuf (short for memory buffer) is a common concept in networking stacks. The mbuf is used to hold packet data as it traverses the stack. The mbuf also generally stores header information or other networking stack information that is carried around with the packet. The mbuf and its associated library of functions were developed to make common networking stack operations (like stripping and adding protocol headers) efficient and as copy-free as possible.  In its simplest form, an mbuf is a memory block with some space reserved for internal information and a pointer which is used to \"chain\" memory blocks together in order to create a \"packet\". This is a very important aspect of the mbuf: the ability to chain mbufs together to create larger \"packets\" (chains of mbufs).", 
            "title": "Mbufs"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#why-use-mbufs", 
            "text": "The main reason is to conserve memory. Consider a networking protocol that generally sends small packets but occasionally sends large ones. The Bluetooth Low Energy (BLE) protocol is one such example. A flat buffer would need to be sized so that the maximum packet size could be contained by the buffer. With the mbuf, a number of mbufs can be chained together so that the occasional large packet can be handled while leaving more packet buffers available to the networking stack for smaller packets.", 
            "title": "Why use mbufs?"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#packet-header-mbuf", 
            "text": "Not all mbufs are created equal. The first mbuf in a chain of mbufs is a special mbuf called a \"packet header mbuf\". The reason that this mbuf is special is that it contains the length of all the data contained by the chain of mbufs (the packet length, in other words). The packet header mbuf may also contain a user defined structure (called a \"user header\") so that networking protocol specific information can be conveyed to various layers of the networking stack. Any mbufs that are part of the packet (i.e. in the mbuf chain but not the first one) are \"normal\" (i.e. non-packet header) mbufs. A normal mbuf does not have any packet header or user packet header structures in them; they only contain the basic mbuf header ( struct os_mbuf ). Figure 1 illustrates these two types of mbufs. Note that the numbers/text in parentheses denote the size of the structures/elements (in bytes) and that MBLEN is the memory block length of the memory pool used by the mbuf pool.", 
            "title": "Packet Header mbuf"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#normal-mbuf", 
            "text": "Now let's take a deeper dive into the mbuf structure. Figure 2 illustrates a normal mbuf and breaks out the various fields in the  os_mbuf  structure.    The  om_data  field is a pointer to where the data starts inside the data buffer. Typically, mbufs that are allocated from the mbuf pool (discussed later) have their om_data pointer set to the start of the data buffer but there are cases where this may not be desirable (added a protocol header to a packet, for example).   The  om_flags  field is a set of flags used internally by the mbuf library. Currently, no flags have been defined.   The  om_pkthdr_len  field is the total length of all packet headers in the mbuf. For normal mbufs this is set to 0 as there is no packet or user packet headers. For packet header mbufs, this would be set to the length of the packet header structure (16) plus the size of the user packet header (if any). Note that it is this field which differentiates packet header mbufs from normal mbufs (i.e. if  om_pkthdr_len  is zero, this is a normal mbuf; otherwise it is a packet header mbuf).   The  om_len  field contains the amount of user data in the data buffer. When initially allocated, this field is 0 as there is no user data in the mbuf.   The  omp_pool  field is a pointer to the pool from which this mbuf has been allocated. This is used internally by the mbuf library.   The  omp_next  field is a linked list element which is used to chain mbufs.   Figure 2 also shows a normal mbuf with actual values in the  os_mbuf  structure. This mbuf starts at address 0x1000 and is 256 bytes in total length. In this example, the user has copied 33 bytes into the data buffer starting at address 0x1010 (this is where om_data points). Note that the packet header length in this mbuf is 0 as it is not a packet header mbuf.   Figure 3 illustrates the packet header mbuf along with some chained mbufs (i.e a \"packet\"). In this example, the user header structure is defined to be 8 bytes. Note that in figure 3 we show a number of different mbufs with varying  om_data  pointers and lengths since we want to show various examples of valid mbufs. For all the mbufs (both packet header and normal ones) the total length of the memory block is 128 bytes.", 
            "title": "Normal mbuf"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#mbuf-pools", 
            "text": "Mbufs are collected into \"mbuf pools\" much like memory blocks. The mbuf pool itself contains a pointer to a memory pool. The memory blocks in this memory pool are the actual mbufs; both normal and packet header mbufs. Thus, the memory block (and corresponding memory pool) must be sized correctly. In other words, the memory blocks which make up the memory pool used by the mbuf pool must be at least: sizeof(struct os_mbuf) + sizeof(struct os_mbuf_pkthdr) + sizeof(struct user_defined_header) + desired minimum data buffer length. For example, if the developer wants mbufs to contain at least 64 bytes of user data and they have a user header of 12 bytes, the size of the memory block would be (at least): 64 + 12 + 16 + 8, or 100 bytes. Yes, this is a fair amount of overhead. However, the flexibility provided by the mbuf library usually outweighs overhead concerns.", 
            "title": "Mbuf pools"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#create-mbuf-pool", 
            "text": "Creating an mbuf pool is fairly simple: create a memory pool and then create the mbuf pool using that memory pool. Once the developer has determined the size of the user data needed per mbuf (this is based on the application/networking stack and is outside the scope of this discussion) and the size of the user header (if any), the memory blocks can be sized. In the example shown below, the application requires 64 bytes of user data per mbuf and also allocates a user header (called struct user_hdr). Note that we do not show the user header data structure as there really is no need; all we need to do is to account for it when creating the memory pool. In the example, we use the macro  MBUF_PKTHDR_OVERHEAD  to denote the amount of packet header overhead per mbuf and  MBUF_MEMBLOCK_OVERHEAD  to denote the total amount of overhead required per memory block. The macro  MBUF_BUF_SIZE  is used to denote the amount of payload that the application requires (aligned on a 32-bit boundary in this case). All this leads to the total memory block size required, denoted by the macro  MBUF_MEMBLOCK_OVERHEAD .  \n#define MBUF_PKTHDR_OVERHEAD    sizeof(struct os_mbuf_pkthdr) + sizeof(struct user_hdr)\n#define MBUF_MEMBLOCK_OVERHEAD  sizeof(struct os_mbuf) + MBUF_PKTHDR_OVERHEAD\n\n#define MBUF_NUM_MBUFS      (32)\n#define MBUF_PAYLOAD_SIZE   (64)\n#define MBUF_BUF_SIZE       OS_ALIGN(MBUF_PAYLOAD_SIZE, 4)\n#define MBUF_MEMBLOCK_SIZE  (MBUF_BUF_SIZE + MBUF_MEMBLOCK_OVERHEAD)\n#define MBUF_MEMPOOL_SIZE   OS_MEMPOOL_SIZE(MBUF_NUM_MBUFS, MBUF_MEMBLOCK_SIZE)\n\nstruct os_mbuf_pool g_mbuf_pool; \nstruct os_mempool g_mbuf_mempool;\nos_membuf_t g_mbuf_buffer[MBUF_MEMPOOL_SIZE];\n\nvoid\ncreate_mbuf_pool(void)\n{\n    int rc;\n\n    rc = os_mempool_init( g_mbuf_mempool, MBUF_NUM_MBUFS, \n                          MBUF_MEMBLOCK_SIZE,  g_mbuf_buffer[0],  mbuf_pool );\n    assert(rc == 0);\n\n    rc = os_mbuf_pool_init( g_mbuf_pool,  g_mbuf_mempool, MBUF_MEMBLOCK_SIZE, \n                           MBUF_NUM_MBUFS);\n    assert(rc == 0);\n}", 
            "title": "Create mbuf pool"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#using-mbufs", 
            "text": "The following examples illustrate typical mbuf usage. There are two basic mbuf allocation API:  os_mbuf_get()  and  os_mbuf_get_pkthdr() . The first API obtains a normal mbuf whereas the latter obtains a packet header mbuf. Typically, application developers use  os_mbuf_get_pkthdr()  and rarely, if ever, need to call  os_mbuf_get()  as the rest of the mbuf API (e.g.  os_mbuf_append() ,  os_mbuf_copyinto() , etc.) typically deal with allocating and chaining mbufs. It is recommended to use the provided API to copy data into/out of mbuf chains and/or manipulate mbufs.  In  example1 , the developer creates a packet and then sends the packet to a networking interface. The code sample also provides an example of copying data out of an mbuf as well as use of the \"pullup\" api (another very common mbuf api).  \nvoid\nmbuf_usage_example1(uint8_t *mydata, int mydata_length)\n{\n    int rc;\n    struct os_mbuf *om;\n\n    /* get a packet header mbuf */\n    om = os_mbuf_get_pkthdr( g_mbuf_pool, sizeof(struct user_hdr));\n    if (om) {\n        /* \n         * Copy user data into mbuf. NOTE: if mydata_length is greater than the\n         * mbuf payload size (64 bytes using above example), mbufs are allocated\n         * and chained together to accommodate the total packet length.\n         */\n        rc = os_mbuf_copyinto(om, 0, mydata, len);\n        if (rc) {\n            /* Error! Could not allocate enough mbufs for total packet length */\n            return -1;\n        }\n\n        /* Send packet to networking interface */\n        send_pkt(om);\n    }\n}  In  example2  we show use of the pullup api as this illustrates some of the typical pitfalls developers encounter when using mbufs. The first pitfall is one of alignment/padding. Depending on the processor and/or compiler, the sizeof() a structure may vary. Thus, the size of  my_protocol_header  may be different inside the packet data of the mbuf than the size of the structure on the stack or as a global variable, for instance. While some networking protcols may align protocol information on convenient processor boundaries many others try to conserve bytes \"on the air\" (i.e inside the packet data). Typical methods used to deal with this are \"packing\" the structure (i.e. force compiler to not pad) or creating protocol headers that do not require padding.  example2  assumes that one of these methods was used when defining the  my_protocol_header  structure.  Another common pitfall occurs around endianness. A network protocol may be little endian or big endian; it all depends on the protocol specification. Processors also have an endianness; this means that the developer has to be careful that the processor endianness and the protocol endianness are handled correctly. In  example2 , some common networking functions are used:  ntohs()  and  ntohl() . These are shorthand for \"network order to host order, short\" and \"network order to host order, long\". Basically, these functions convert data of a certain size (i.e. 16 bits, 32 bits, etc) to the endianness of the host. Network byte order is big-endian (most significant byte first), so these functions convert big-endian byte order to host order (thus, the implementation of these functions is host dependent). Note that the BLE networking stack \"on the air\" format is least signigicant byte first (i.e. little endian), so a \"bletoh\" function would have to take little endian format and convert to host format.  A long story short: the developer must take care when copying structure data to/from mbufs and flat buffers!  A final note: these examples assume the same mbuf struture and definitions used in the first example.   void\nmbuf_usage_example2(struct mbuf *rxpkt)\n{\n    int rc;\n    uint8_t packet_data[16];\n    struct mbuf *om;\n    struct my_protocol_header *phdr;\n\n    /* Make sure that  my_protocol_header  bytes are contiguous in mbuf */\n    om = os_mbuf_pullup( g_mbuf_pool, sizeof(struct my_protocol_header));\n    if (!om) {\n        /* Not able to pull up data into contiguous area */\n        return -1;\n    }\n\n    /* \n     * Get the protocol information from the packet. In this example we presume that we\n     * are interested in protocol types that are equal to MY_PROTOCOL_TYPE, are not zero\n     * length, and have had some time in flight.\n     */\n    phdr = OS_MBUF_DATA(om, struct my_protocol_header *);\n    type = ntohs(phdr- prot_type);\n    length = ntohs(phdr- prot_length);\n    time_in_flight = ntohl(phdr- prot_tif);\n\n    if ((type == MY_PROTOCOL_TYPE)   (length   0)   (time_in_flight   0)) {\n        rc = os_mbuf_copydata(rxpkt, sizeof(struct my_protocol_header), 16, packet_data);\n        if (!rc) {\n            /* Success! Perform operations on packet data */\n             ... user code here ... \n        }\n    }\n\n    /* Free passed in packet (mbuf chain) since we dont need it anymore */\n    os_mbuf_free_chain(om);\n}", 
            "title": "Using mbufs"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#msys", 
            "text": "msys stands for \"system mbufs\" and is set of API built on top of the mbuf code. The basic idea behind msys is the following. The developer can create different size mbuf pools and register them with msys. The application then allocates mbufs using the msys API (as opposed to the mbuf API). The msys code will choose the mbuf pool with the smallest mbufs that can accommodate the requested size.   Let us walk through an example where the user registers three mbuf pools with msys: one with 32 byte mbufs, one with 256 and one with 2048. If the user requests an mbuf with 10 bytes, the 32-byte mbuf pool is used. If the request is for 33 bytes the 256 byte mbuf pool is used. If an mbuf data size is requested that is larger than any of the pools (say, 4000 bytes) the largest pool is used. While this behaviour may not be optimal in all cases that is the currently implemented behaviour. All this means is that the user is not guaranteed that a single mbuf can hold the requested data.  The msys code will not allocate an mbuf from a larger pool if the chosen mbuf pool is empty. Similarly, the msys code will not chain together a number of smaller mbufs to accommodate the requested size. While this behaviour may change in future implementations the current code will simply return NULL. Using the above example, say the user requests 250 bytes. The msys code chooses the appropriate pool (i.e. the 256 byte mbuf pool) and attempts to allocate an mbuf from that pool. If that pool is empty, NULL is returned even though the 32 and 2048 byte pools are not empty.  Note that no added descriptions on how to use the msys API are presented here (other than in the API descriptions themselves) as the msys API is used in exactly the same manner as the mbuf API. The only difference is that mbuf pools are added to msys by calling  os_msys_register().", 
            "title": "Msys"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#data-structures", 
            "text": "struct os_mbuf_pool {\n    uint16_t omp_databuf_len;\n    uint16_t omp_mbuf_count;\n    struct os_mempool *omp_pool;\n    STAILQ_ENTRY(os_mbuf_pool) omp_next;\n};     Element  Description      omp_databuf_len  The length, in bytes, of the \"data buffer\" of the mbuf. The data buffer of the mbuf is everything except the os_mbuf structure (which is present in all types of mbufs)    omp_mbuf_count  Total number of mbufs in the pool when allocated. This is NOT the number of free mbufs in the pool!    omp_pool  The memory pool from which the mbufs are allocated    omp_next  This is a linked list pointer which chains memory pools. It is used by the system memory pool library      struct os_mbuf_pkthdr {\n    uint16_t omp_len;\n    uint16_t omp_flags;\n    STAILQ_ENTRY(os_mbuf_pkthdr) omp_next;\n};     Element  Description      omp_len  Length, in bytes, of the \"packet\". This is the sum of the user data in all the mbufs chained to the packet header mbuf (including the packet header mbuf)    omp_flags  Packet header flags.    omp_next  Linked list pointer to chain \"packets\". This can be used to add mbuf chains to a queue or linked list and is there for convenience.      struct os_mbuf {\n    uint8_t *om_data;\n    uint8_t om_flags;\n    uint8_t om_pkthdr_len;\n    uint16_t om_len;\n    struct os_mbuf_pool *om_omp;\n    SLIST_ENTRY(os_mbuf) om_next;\n    uint8_t om_databuf[0];\n};     Element  Description      om_data  Pointer to start of user data in mbuf data buffer    om_flags  mbuf flags field. Currently all flags unused.    om_pkthdr_len  The total length of all packet headers in the mbuf (mbuf packet header plus user packet header), in bytes    om_len  The length of the user data contained in this mbuf, in bytes    om_omp  Memory pool pointer. This is the mbuf pool from which this mbuf was allocated.    om_next  Pointer to next mbuf in packet chain    om_databuf  mbuf data buffer (accessor to start of mbuf data buffer). Note that the mbuf data buffer refers to the start of either the user data in normal mbufs or the start of the os mbuf packet header for packet header mbufs", 
            "title": "Data Structures"
        }, 
        {
            "location": "/os/core_os/mbuf/mbuf/#list-of-functionsmacros", 
            "text": "The functions/macros available in mbuf are:   OS_MBUF_PKTHDR  OS_MBUF_PKTHDR_TO_MBUF  OS_MBUF_PKTLEN  OS_MBUF_DATA  OS_MBUF_USRHDR  OS_MBUF_USRHDR_LEN  OS_MBUF_LEADINGSPACE  OS_MBUF_TRAILINGSPACE  os_mbuf_adj  os_mbuf_append  os_mbuf_concat  os_mbuf_copydata  os_mbuf_copyinto  os_mbuf_dup  os_mbuf_extend  os_mbuf_free_chain  os_mbuf_get  os_mbuf_get_pkthdr  os_mbuf_memcmp  os_mbuf_off  os_mbuf_pool_init  os_mbuf_prepend  os_mbuf_pullup  os_msys_get  os_msys_get_pkthdr  os_msys_register  os_msys_reset", 
            "title": "List of Functions/Macros"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR/", 
            "text": "OS_MBUF_PKTHDR\n\n\nOS_MBUF_PKTHDR(__om)\n\n\n\n\nMacro used to get a pointer to the os mbuf packet header of an mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *)\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nint\ndoes_packet_have_data(struct os_mbuf *om)\n{\n    struct os_mbuf_pkthdr *hdr;\n\n    hdr = OS_MBUF_PKTHDR(om);\n    if (hdr-\nomp_len != 0) {\n        /* Packet has data in it */\n        return TRUE\n    } else {\n        /* Packet has no data */\n        return FALSE;\n    }\n}", 
            "title": "OS_MBUF_PKTHDR"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR/#os_mbuf_pkthdr", 
            "text": "OS_MBUF_PKTHDR(__om)  Macro used to get a pointer to the os mbuf packet header of an mbuf.", 
            "title": "OS_MBUF_PKTHDR"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR/#example", 
            "text": "int\ndoes_packet_have_data(struct os_mbuf *om)\n{\n    struct os_mbuf_pkthdr *hdr;\n\n    hdr = OS_MBUF_PKTHDR(om);\n    if (hdr- omp_len != 0) {\n        /* Packet has data in it */\n        return TRUE\n    } else {\n        /* Packet has no data */\n        return FALSE;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR_TO_MBUF/", 
            "text": "OS_MBUF_PKTHDR_TO_MBUF\n\n\nOS_MBUF_PKTHDR_TO_MBUF(__hdr)\n\n\n\n\nMacro used to get a pointer to the mbuf given a pointer to the os mbuf packet header\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__hdr\n\n\nPointer to os mbuf packet header (struct os_mbuf_pkthdr *)\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n    struct os_mbuf_pkthdr *hdr;\n\n    om = OS_MBUF_PKTHDR_TO_MBUF(hdr);\n    os_mbuf_free_chain(om);", 
            "title": "OS_MBUF_PKTHDR_TO_MBUF"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR_TO_MBUF/#os_mbuf_pkthdr_to_mbuf", 
            "text": "OS_MBUF_PKTHDR_TO_MBUF(__hdr)  Macro used to get a pointer to the mbuf given a pointer to the os mbuf packet header", 
            "title": "OS_MBUF_PKTHDR_TO_MBUF"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR_TO_MBUF/#arguments", 
            "text": "Arguments  Description      __hdr  Pointer to os mbuf packet header (struct os_mbuf_pkthdr *)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTHDR_TO_MBUF/#example", 
            "text": "struct os_mbuf *om;\n    struct os_mbuf_pkthdr *hdr;\n\n    om = OS_MBUF_PKTHDR_TO_MBUF(hdr);\n    os_mbuf_free_chain(om);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTLEN/", 
            "text": "OS_MBUF_PKTLEN\n\n\nOS_MBUF_PKTLEN(__om)\n\n\n\n\nMacro used to get the length of an entire mbuf chain.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *)\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n    uint16_t pktlen;\n    struct os_mbuf *om;\n\n    /* Check if there is any data in the mbuf chain */\n    pktlen = OS_MBUF_PKTLEN(om);\n    if (pktlen != 0) {\n        /* mbuf chain has data */\n    }", 
            "title": "OS_MBUF_PKTLEN"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTLEN/#os_mbuf_pktlen", 
            "text": "OS_MBUF_PKTLEN(__om)  Macro used to get the length of an entire mbuf chain.", 
            "title": "OS_MBUF_PKTLEN"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTLEN/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_PKTLEN/#example", 
            "text": "uint16_t pktlen;\n    struct os_mbuf *om;\n\n    /* Check if there is any data in the mbuf chain */\n    pktlen = OS_MBUF_PKTLEN(om);\n    if (pktlen != 0) {\n        /* mbuf chain has data */\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_DATA/", 
            "text": "OS_MBUF_DATA\n\n\nOS_MBUF_DATA(__om, __type)\n\n\n\n\nMacro used to cast the data pointer of an mbuf to a given type.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *)\n\n\n\n\n\n\n__type\n\n\nType to cast\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n    struct os_mbuf *om\n    uint8_t *rxbuf;\n\n    rxbuf = OS_MBUF_DATA(om, uint8_t *);", 
            "title": "OS_MBUF_DATA"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_DATA/#os_mbuf_data", 
            "text": "OS_MBUF_DATA(__om, __type)  Macro used to cast the data pointer of an mbuf to a given type.", 
            "title": "OS_MBUF_DATA"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_DATA/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *)    __type  Type to cast", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_DATA/#example", 
            "text": "struct os_mbuf *om\n    uint8_t *rxbuf;\n\n    rxbuf = OS_MBUF_DATA(om, uint8_t *);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR/", 
            "text": "OS_MBUF_USRHDR\n\n\nOS_MBUF_USRHDR(__om)\n\n\n\n\nMacro used to get a pointer to the user packet header of an mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *). Must be head of chain (i.e. a packet header mbuf)\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n    struct os_mbuf *om\n    struct user_header *hdr;\n\n    hdr = OS_MBUF_USRHDR(om);", 
            "title": "OS_MBUF_USRHDR"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR/#os_mbuf_usrhdr", 
            "text": "OS_MBUF_USRHDR(__om)  Macro used to get a pointer to the user packet header of an mbuf.", 
            "title": "OS_MBUF_USRHDR"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *). Must be head of chain (i.e. a packet header mbuf)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR/#example", 
            "text": "struct os_mbuf *om\n    struct user_header *hdr;\n\n    hdr = OS_MBUF_USRHDR(om);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR_LEN/", 
            "text": "OS_MBUF_USRHDR_LEN\n\n\nOS_MBUF_USRHDR_LEN(__om)\n\n\n\n\nMacro used to retrieve the length of the user packet header in an mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *). Must be head of chain (i.e. a packet header mbuf)\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n    uint16_t user_length;\n    struct os_mbuf *om\n    struct user_header *hdr;\n\n    user_length  = OS_MBUF_USRHDR_LEN(om);", 
            "title": "OS_MBUF_USRHDR_LEN"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR_LEN/#os_mbuf_usrhdr_len", 
            "text": "OS_MBUF_USRHDR_LEN(__om)  Macro used to retrieve the length of the user packet header in an mbuf.", 
            "title": "OS_MBUF_USRHDR_LEN"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR_LEN/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *). Must be head of chain (i.e. a packet header mbuf)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_USRHDR_LEN/#example", 
            "text": "uint16_t user_length;\n    struct os_mbuf *om\n    struct user_header *hdr;\n\n    user_length  = OS_MBUF_USRHDR_LEN(om);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_LEADINGSPACE/", 
            "text": "OS_MBUF_LEADINGSPACE\n\n\nOS_MBUF_LEADINGSPACE(__om)\n\n\n\n\nMacro used to get the amount of leading space in an mbuf (in bytes).\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *)\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\nThis macro works on both normal mbufs and packet header mbufs. The amount of leading space is the number of bytes between the current om_data pointer of the mbuf and the start of the mbuf user data buffer.\n\n\n\n\nExample\n\n\n    uint8_t *dptr;\n    uint16_t space;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;\n\n    /* Copy data from \nmy_data\n into the start of an mbuf but only if there is enough room */\n    space = OS_MBUF_LEADINGSPACE(om);\n    if (space \n= sizeof(struct my_data_struct)) {\n        dptr = om-\nom_data - sizeof(struct my_data_struct);\n        memcpy(dptr, \nmy_data, sizeof(struct my_data_struct));\n    }", 
            "title": "OS_MBUF_LEADINGSPACE"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_LEADINGSPACE/#os_mbuf_leadingspace", 
            "text": "OS_MBUF_LEADINGSPACE(__om)  Macro used to get the amount of leading space in an mbuf (in bytes).", 
            "title": "OS_MBUF_LEADINGSPACE"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_LEADINGSPACE/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_LEADINGSPACE/#notes", 
            "text": "This macro works on both normal mbufs and packet header mbufs. The amount of leading space is the number of bytes between the current om_data pointer of the mbuf and the start of the mbuf user data buffer.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_LEADINGSPACE/#example", 
            "text": "uint8_t *dptr;\n    uint16_t space;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;\n\n    /* Copy data from  my_data  into the start of an mbuf but only if there is enough room */\n    space = OS_MBUF_LEADINGSPACE(om);\n    if (space  = sizeof(struct my_data_struct)) {\n        dptr = om- om_data - sizeof(struct my_data_struct);\n        memcpy(dptr,  my_data, sizeof(struct my_data_struct));\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_TRAILINGSPACE/", 
            "text": "OS_MBUF_TRAILINGSPACE\n\n\nOS_MBUF_TRAILINGSPACE(__om)\n\n\n\n\nMacro used to get the amount of trailing space in an mbuf (in bytes).\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__om\n\n\nPointer to mbuf (struct os_mbuf *)\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\nThis macro works on both normal mbufs and packet header mbufs. The amount of trailing space is the number of bytes between the current om_data pointer of the mbuf and the end of the mbuf.\n\n\n\n\nExample\n\n\n    uint16_t space;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;\n\n    /* Copy data from \nmy_data\n to the end of an mbuf but only if there is enough room */\n    space = OS_MBUF_TRAILINGSPACE(om);\n    if (space \n= sizeof(struct my_data_struct)) {\n        memcpy(om-\nom_data, \nmy_data, sizeof(struct my_data_struct));\n    }", 
            "title": "OS_MBUF_TRAILINGSPACE"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_TRAILINGSPACE/#os_mbuf_trailingspace", 
            "text": "OS_MBUF_TRAILINGSPACE(__om)  Macro used to get the amount of trailing space in an mbuf (in bytes).", 
            "title": "OS_MBUF_TRAILINGSPACE"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_TRAILINGSPACE/#arguments", 
            "text": "Arguments  Description      __om  Pointer to mbuf (struct os_mbuf *)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_TRAILINGSPACE/#notes", 
            "text": "This macro works on both normal mbufs and packet header mbufs. The amount of trailing space is the number of bytes between the current om_data pointer of the mbuf and the end of the mbuf.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/OS_MBUF_TRAILINGSPACE/#example", 
            "text": "uint16_t space;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;\n\n    /* Copy data from  my_data  to the end of an mbuf but only if there is enough room */\n    space = OS_MBUF_TRAILINGSPACE(om);\n    if (space  = sizeof(struct my_data_struct)) {\n        memcpy(om- om_data,  my_data, sizeof(struct my_data_struct));\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_adj/", 
            "text": "os_mbuf_adj\n\n\nvoid os_mbuf_adj(struct os_mbuf *mp, int req_len);\n\n\n\n\nTrims \nreq_len\n bytes from either the head (if positive) or tail (if negative) of an mbuf chain. Adjusts the packet length of the mbuf chain if \nmp\n points to a packet header mbuf. When trimming from the head, no mbufs are freed. When trimming from the tail, any mbufs of zero length left at the end of the chain are freed.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmp\n\n\nPointer to mbuf. Can be head of a chain of mbufs, a single mbuf or a packet header mbuf\n\n\n\n\n\n\nreq_len\n\n\nNumber of bytes to trim from head or tail of mbuf\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nNotes\n\n\nExample\n\n\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct my_pkt_header hdr;\n\n    /* Get mbuf chain length */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    /* Strip header from mbuf chain */\n    os_mbuf_adj(om, sizeof(struct my_pkt_header));\n    pktlen -= sizeof(struct my_pkt_header);\n\n    /* New packet length should be old packet length minus stripped header */\n    assert(pktlen == OS_MBUF_PKTLEN(om));", 
            "title": "os_mbuf_adj"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_adj/#os_mbuf_adj", 
            "text": "void os_mbuf_adj(struct os_mbuf *mp, int req_len);  Trims  req_len  bytes from either the head (if positive) or tail (if negative) of an mbuf chain. Adjusts the packet length of the mbuf chain if  mp  points to a packet header mbuf. When trimming from the head, no mbufs are freed. When trimming from the tail, any mbufs of zero length left at the end of the chain are freed.", 
            "title": " os_mbuf_adj"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_adj/#arguments", 
            "text": "Arguments  Description      mp  Pointer to mbuf. Can be head of a chain of mbufs, a single mbuf or a packet header mbuf    req_len  Number of bytes to trim from head or tail of mbuf", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_adj/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_adj/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_adj/#example", 
            "text": "uint16_t pktlen;\n    struct os_mbuf *om;\n    struct my_pkt_header hdr;\n\n    /* Get mbuf chain length */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    /* Strip header from mbuf chain */\n    os_mbuf_adj(om, sizeof(struct my_pkt_header));\n    pktlen -= sizeof(struct my_pkt_header);\n\n    /* New packet length should be old packet length minus stripped header */\n    assert(pktlen == OS_MBUF_PKTLEN(om));", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_append/", 
            "text": "os_mbuf_append\n\n\nint os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)\n\n\n\n\nAppends a data buffer of length \nlen\n to the end of an mbuf chain, adjusting packet length if \nom\n is a packet header mbuf. If not enough trailing space exists at the end of the mbuf chain, mbufs are allocated to hold the data.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf. Can be head of a chain of mbufs, a single mbuf or a packet header mbuf\n\n\n\n\n\n\ndata\n\n\nPointer to data buffer to copy from\n\n\n\n\n\n\nlen\n\n\nNumber of bytes to copy from data buffer to the end of the mbuf\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\n0: success\n\nOS_ENOMEM: Could not allocate enough mbufs to hold data.\n\nOS_EINVAL: \nom\n was NULL on entry.\n\n\n\n\nNotes\n\n\nIf not enough mbufs were available the packet header length of the mbuf may get adjusted even though the entire data buffer was not appended to the end of the mbuf.\n\n\n\n\nIf any mbufs are allocated, they are allocated from the same pool as \nom\n\n\n\n\nExample\n\n\n    int rc;\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;\n\n    /* Get initial packet length */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    /* Append \nmy_data\n to end of mbuf, freeing mbuf if unable to append all the data */\n    rc = os_mbuf_append(om, \nmy_data, sizeof(struct my_pkt_header));\n    if (rc) {\n        os_mbuf_free_chain(om);\n    }\n    pktlen += sizeof(struct my_pkt_header);\n\n    /* New packet length should be initial packet length plus length of \nmy_data\n */\n    assert(pktlen == OS_MBUF_PKTLEN(om));", 
            "title": "os_mbuf_append"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_append/#os_mbuf_append", 
            "text": "int os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)  Appends a data buffer of length  len  to the end of an mbuf chain, adjusting packet length if  om  is a packet header mbuf. If not enough trailing space exists at the end of the mbuf chain, mbufs are allocated to hold the data.", 
            "title": " os_mbuf_append"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_append/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf. Can be head of a chain of mbufs, a single mbuf or a packet header mbuf    data  Pointer to data buffer to copy from    len  Number of bytes to copy from data buffer to the end of the mbuf", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_append/#returned-values", 
            "text": "0: success \nOS_ENOMEM: Could not allocate enough mbufs to hold data. \nOS_EINVAL:  om  was NULL on entry.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_append/#notes", 
            "text": "If not enough mbufs were available the packet header length of the mbuf may get adjusted even though the entire data buffer was not appended to the end of the mbuf.   If any mbufs are allocated, they are allocated from the same pool as  om", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_append/#example", 
            "text": "int rc;\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;\n\n    /* Get initial packet length */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    /* Append  my_data  to end of mbuf, freeing mbuf if unable to append all the data */\n    rc = os_mbuf_append(om,  my_data, sizeof(struct my_pkt_header));\n    if (rc) {\n        os_mbuf_free_chain(om);\n    }\n    pktlen += sizeof(struct my_pkt_header);\n\n    /* New packet length should be initial packet length plus length of  my_data  */\n    assert(pktlen == OS_MBUF_PKTLEN(om));", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_concat/", 
            "text": "os_mbuf_concat\n\n\nvoid os_mbuf_concat(struct os_mbuf *first, struct os_mbuf *second)\n\n\n\n\nAttaches a second mbuf chain onto the end of the first. If the first chain contains a packet header, the header's length is updated.  If the second chain has a packet header, its header is cleared.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirst\n\n\nPointer to first mbuf chain\n\n\n\n\n\n\nsecond\n\n\nPointer to second mbuf chain\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\n\n\nNotes\n\n\nNo data is copied or moved nor are any mbufs freed.\n\n\n\n\nExample\n\n\n    uint16_t pktlen1;\n    uint16_t pktlen2;\n    struct os_mbuf *pkt1;\n    struct os_mbuf *pkt2;\n\n    /* Get initial packet lengths */\n    pktlen1 = OS_MBUF_PKTLEN(pkt1);\n    pktlen2 = OS_MBUF_PKTLEN(pkt2);\n\n    /*  Add pkt2 to end of pkt1 */\n    os_mbuf_concat(pkt1, pkt2);\n\n    /* New packet length should be sum of pkt1 and pkt2 */\n    assert((pktlen1 + pktlen2) == OS_MBUF_PKTLEN(pkt1));", 
            "title": "os_mbuf_concat"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_concat/#os_mbuf_concat", 
            "text": "void os_mbuf_concat(struct os_mbuf *first, struct os_mbuf *second)  Attaches a second mbuf chain onto the end of the first. If the first chain contains a packet header, the header's length is updated.  If the second chain has a packet header, its header is cleared.", 
            "title": " os_mbuf_concat"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_concat/#arguments", 
            "text": "Arguments  Description      first  Pointer to first mbuf chain    second  Pointer to second mbuf chain", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_concat/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_concat/#notes", 
            "text": "No data is copied or moved nor are any mbufs freed.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_concat/#example", 
            "text": "uint16_t pktlen1;\n    uint16_t pktlen2;\n    struct os_mbuf *pkt1;\n    struct os_mbuf *pkt2;\n\n    /* Get initial packet lengths */\n    pktlen1 = OS_MBUF_PKTLEN(pkt1);\n    pktlen2 = OS_MBUF_PKTLEN(pkt2);\n\n    /*  Add pkt2 to end of pkt1 */\n    os_mbuf_concat(pkt1, pkt2);\n\n    /* New packet length should be sum of pkt1 and pkt2 */\n    assert((pktlen1 + pktlen2) == OS_MBUF_PKTLEN(pkt1));", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copydata/", 
            "text": "os_mbuf_copydata\n\n\nint os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)\n\n\n\n\nCopy data from an mbuf chain starting \noff\n bytes from the beginning, continuing for \nlen\n bytes, into the indicated buffer.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nm\n\n\nPointer to mbuf chain\n\n\n\n\n\n\noff\n\n\nStart copy offset, in bytes, from beginning of mbuf chain\n\n\n\n\n\n\nlen\n\n\nNumber of bytes to copy\n\n\n\n\n\n\ndst\n\n\nData buffer to copy into\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\n0: success.\n\n-1: The mbuf does not contain enough data\n\n\n\n\nExample\n\n\n    int rc;\n    struct os_mbuf *om;\n    struct my_hdr_1 my_hdr1;    \n    struct my_hdr_2 my_hdr2;    \n\n    /* Header 1 and Header 2 are contiguous in packet at start. Retrieve them from the mbuf chain */    \n    rc = os_mbuf_copydata(om, 0, sizeof(struct my_hdr_1), \nmy_hdr1);\n    if (rc) {\n        /* error! */\n        return -1;\n    }\n\n    rc = os_mbuf_copydata(om, sizeof(struct my_hdr_1), sizeof(struct my_hdr_2), \nmy_hdr2);\n    if (rc) {\n        /* error! */\n        return -1;\n    }", 
            "title": "os_mbuf_copydata"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copydata/#os_mbuf_copydata", 
            "text": "int os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)  Copy data from an mbuf chain starting  off  bytes from the beginning, continuing for  len  bytes, into the indicated buffer.", 
            "title": " os_mbuf_copydata"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copydata/#arguments", 
            "text": "Arguments  Description      m  Pointer to mbuf chain    off  Start copy offset, in bytes, from beginning of mbuf chain    len  Number of bytes to copy    dst  Data buffer to copy into", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copydata/#returned-values", 
            "text": "0: success. \n-1: The mbuf does not contain enough data", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copydata/#example", 
            "text": "int rc;\n    struct os_mbuf *om;\n    struct my_hdr_1 my_hdr1;    \n    struct my_hdr_2 my_hdr2;    \n\n    /* Header 1 and Header 2 are contiguous in packet at start. Retrieve them from the mbuf chain */    \n    rc = os_mbuf_copydata(om, 0, sizeof(struct my_hdr_1),  my_hdr1);\n    if (rc) {\n        /* error! */\n        return -1;\n    }\n\n    rc = os_mbuf_copydata(om, sizeof(struct my_hdr_1), sizeof(struct my_hdr_2),  my_hdr2);\n    if (rc) {\n        /* error! */\n        return -1;\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copyinto/", 
            "text": "os_mbuf_copyinto\n\n\nint os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len);\n\n\n\n\nCopies the contents of a flat buffer into an mbuf chain, starting at the specified destination offset.  If the mbuf is too small for the source data, it is extended as necessary.  If the destination mbuf contains a packet header, the header length is updated.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf chain\n\n\n\n\n\n\noff\n\n\nStart copy offset, in bytes, from beginning of mbuf chain\n\n\n\n\n\n\nsrc\n\n\nAddress from which bytes are copied\n\n\n\n\n\n\nlen\n\n\nNumber of bytes to copy from src\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\n0: success.\n\nAll other values indicate an error.\n\n\n\n\nExample\n\n\n    int rc;\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;  \n\n    /* Get initial packet length */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    /* Copy \nmy_data\n into mbuf */\n    rc = os_mbuf_copyinto(om, 0, \nmy_data, sizeof(struct my_data_struct));\n    if (rc) {\n        os_mbuf_free_chain(om);\n        return;\n    }\n\n    /* Packet length should have increased by size of \nmy_data\n */\n    pktlen += sizeof(struct my_data_struct);\n    assert(pktlen == OS_MBUF_PKTLEN(om));", 
            "title": "os_mbuf_copyinto"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copyinto/#os_mbuf_copyinto", 
            "text": "int os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len);  Copies the contents of a flat buffer into an mbuf chain, starting at the specified destination offset.  If the mbuf is too small for the source data, it is extended as necessary.  If the destination mbuf contains a packet header, the header length is updated.", 
            "title": " os_mbuf_copyinto"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copyinto/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf chain    off  Start copy offset, in bytes, from beginning of mbuf chain    src  Address from which bytes are copied    len  Number of bytes to copy from src", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copyinto/#returned-values", 
            "text": "0: success. \nAll other values indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_copyinto/#example", 
            "text": "int rc;\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;  \n\n    /* Get initial packet length */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    /* Copy  my_data  into mbuf */\n    rc = os_mbuf_copyinto(om, 0,  my_data, sizeof(struct my_data_struct));\n    if (rc) {\n        os_mbuf_free_chain(om);\n        return;\n    }\n\n    /* Packet length should have increased by size of  my_data  */\n    pktlen += sizeof(struct my_data_struct);\n    assert(pktlen == OS_MBUF_PKTLEN(om));", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_dup/", 
            "text": "os_mbuf_dup\n\n\nstruct os_mbuf *os_mbuf_dup(struct os_mbuf *om)\n\n\n\n\nDuplicate a chain of mbufs.  Return the start of the duplicated chain.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf chain to duplicate\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nPointer to the duplicated chain or NULL if not enough mbufs were available to duplicate the chain.\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n    struct os_mbuf *new_om;\n\n    /* Make a copy of om, returning -1 if not able to duplicate om */\n    new_om = os_mbuf_dup(om);\n    if (!new_om) {\n        return -1;\n    }", 
            "title": "os_mbuf_dup"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_dup/#os_mbuf_dup", 
            "text": "struct os_mbuf *os_mbuf_dup(struct os_mbuf *om)  Duplicate a chain of mbufs.  Return the start of the duplicated chain.", 
            "title": " os_mbuf_dup"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_dup/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf chain to duplicate", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_dup/#returned-values", 
            "text": "Pointer to the duplicated chain or NULL if not enough mbufs were available to duplicate the chain.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_dup/#example", 
            "text": "struct os_mbuf *om;\n    struct os_mbuf *new_om;\n\n    /* Make a copy of om, returning -1 if not able to duplicate om */\n    new_om = os_mbuf_dup(om);\n    if (!new_om) {\n        return -1;\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_extend/", 
            "text": "os_mbuf_extend\n\n\nvoid *os_mbuf_extend(struct os_mbuf *om, uint16_t len);\n\n\n\n\nIncreases the length of an mbuf chain by the specified amount.  If there is not sufficient room in the last buffer, a new buffer is allocated and appended to the chain.  It is an error to request more data than can fit in a single buffer.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf chain\n\n\n\n\n\n\nlen\n\n\nNumber of bytes to increase packet header\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nPointer to start of extended data. Caller is guaranteed that there are at least \nlen\n bytes from this pointer to the end of the mbuf.\n\n\nReturns NULL if extension fails due to insufficient mbufs or \nlen\n too large.\n\n\n\nExample\n\n\n    uint8_t *dptr;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;  \n\n    /* Obtain enough room to add \nmy_data\n to an mbuf chain */\n    dptr = os_mbuf_extend(om, sizeof(struct my_data_struct));\n    if (dptr) {\n        memcpy(dptr, \nmy_data, sizeof(struct my_data_struct));\n    }", 
            "title": "os_mbuf_extend"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_extend/#os_mbuf_extend", 
            "text": "void *os_mbuf_extend(struct os_mbuf *om, uint16_t len);  Increases the length of an mbuf chain by the specified amount.  If there is not sufficient room in the last buffer, a new buffer is allocated and appended to the chain.  It is an error to request more data than can fit in a single buffer.", 
            "title": " os_mbuf_extend"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_extend/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf chain    len  Number of bytes to increase packet header", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_extend/#returned-values", 
            "text": "Pointer to start of extended data. Caller is guaranteed that there are at least  len  bytes from this pointer to the end of the mbuf.  Returns NULL if extension fails due to insufficient mbufs or  len  too large.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_extend/#example", 
            "text": "uint8_t *dptr;\n    struct os_mbuf *om;\n    struct my_data_struct my_data;  \n\n    /* Obtain enough room to add  my_data  to an mbuf chain */\n    dptr = os_mbuf_extend(om, sizeof(struct my_data_struct));\n    if (dptr) {\n        memcpy(dptr,  my_data, sizeof(struct my_data_struct));\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_free_chain/", 
            "text": "os_mbuf_free_chain\n\n\nint os_mbuf_free_chain(struct os_mbuf *om);\n\n\n\n\nFrees a chain of mbufs\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf chain\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\n0: success\n\nAny other value indicates error\n\n\n\n\nNotes\n\n\nNote that for each mbuf in the chain, \nos_mbuf_free()\n is called.\n\n\n\n\nExample\n\n\n    int rc;\n    struct os_mbuf *om;\n\n    /* Free mbuf chain */\n    rc = os_mbuf_free_chain(om);\n    assert(rc == 0);", 
            "title": "os_mbuf_free_chain"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_free_chain/#os_mbuf_free_chain", 
            "text": "int os_mbuf_free_chain(struct os_mbuf *om);  Frees a chain of mbufs", 
            "title": " os_mbuf_free_chain"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_free_chain/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf chain", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_free_chain/#returned-values", 
            "text": "0: success \nAny other value indicates error", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_free_chain/#notes", 
            "text": "Note that for each mbuf in the chain,  os_mbuf_free()  is called.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_free_chain/#example", 
            "text": "int rc;\n    struct os_mbuf *om;\n\n    /* Free mbuf chain */\n    rc = os_mbuf_free_chain(om);\n    assert(rc == 0);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get/", 
            "text": "os_mbuf_get\n\n\nstruct os_mbuf *os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)\n\n\n\n\nGet an mbuf from the mbuf pool. The mbuf is allocated, and initialized prior to being returned. The \nleadingspace\n parameter allows the user to specify the amount of leading space in the allocated mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf pool from which to allocate mbuf\n\n\n\n\n\n\nleadingspace\n\n\nAmount of leading space in allocated mbuf. Request cannot exceed the mbuf data buffer size.\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns a pointer to the allocated mbuf or NULL if there are no mbufs available or \nleadingspace\n was too large.\n\n\n\nNotes\n\n\nIn most typical applications, the application developer does not need to call \nos_mbuf_get()\n; the other API will do this automatically. However, this API is provided for convenience as mbufs can also be a simple way to allocate temporary chunks of memory.\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n\n    /* Get an mbuf */\n    om = os_mbuf_get(\ng_mbuf_pool, 0);\n    if (om) {\n        /* we have allocated an mbuf from the pool */\n    }", 
            "title": "os_mbuf_get"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get/#os_mbuf_get", 
            "text": "struct os_mbuf *os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)  Get an mbuf from the mbuf pool. The mbuf is allocated, and initialized prior to being returned. The  leadingspace  parameter allows the user to specify the amount of leading space in the allocated mbuf.", 
            "title": "os_mbuf_get"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf pool from which to allocate mbuf    leadingspace  Amount of leading space in allocated mbuf. Request cannot exceed the mbuf data buffer size.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get/#returned-values", 
            "text": "Returns a pointer to the allocated mbuf or NULL if there are no mbufs available or  leadingspace  was too large.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get/#notes", 
            "text": "In most typical applications, the application developer does not need to call  os_mbuf_get() ; the other API will do this automatically. However, this API is provided for convenience as mbufs can also be a simple way to allocate temporary chunks of memory.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get/#example", 
            "text": "struct os_mbuf *om;\n\n    /* Get an mbuf */\n    om = os_mbuf_get( g_mbuf_pool, 0);\n    if (om) {\n        /* we have allocated an mbuf from the pool */\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get_pkthdr/", 
            "text": "os_mbuf_get_pkthdr\n\n\nstruct os_mbuf *os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t pkthdr_len);\n\n\n\n\nAllocates a packet header mbuf from the mbuf pool pointed to by \nomp\n. Adds a user header of length \npkthdr_len\n to packet header mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf pool from which to allocate mbuf\n\n\n\n\n\n\npkthdr_len\n\n\nThe user header packet length to allocate for the packet header mbuf\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns a pointer to the allocated mbuf or NULL if there are no mbufs available or the user packet header was too large.\n\n\n\n\nNotes\n\n\nThe packet header mbuf returned will have its data pointer incremented by the sizeof(struct os_mbuf_pkthdr) as well as the amount of user header data (i.e. \npkthdr_len\n). In other words, the data pointer is offset from the start of the mbuf by: sizeof(struct os_mbuf) + sizeof(struct os_mbuf_pkthdr) + pkthdr_len. The \nom_pkthdr_len\n element in the allocated mbuf is set to: sizeof(struct os_mbuf_pkthdr) + pkthdr_len.\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n    struct my_user_header my_hdr;\n\n    /* Get a packet header mbuf with a user header in it */\n    om = os_mbuf_get_pkthdr(\ng_mbuf_pool, sizeof(struct my_user_header));\n    if (om) {\n        /* Packet header mbuf was allocated */\n    }", 
            "title": "os_mbuf_get_pkthdr"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get_pkthdr/#os_mbuf_get_pkthdr", 
            "text": "struct os_mbuf *os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t pkthdr_len);  Allocates a packet header mbuf from the mbuf pool pointed to by  omp . Adds a user header of length  pkthdr_len  to packet header mbuf.", 
            "title": "os_mbuf_get_pkthdr"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get_pkthdr/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf pool from which to allocate mbuf    pkthdr_len  The user header packet length to allocate for the packet header mbuf", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get_pkthdr/#returned-values", 
            "text": "Returns a pointer to the allocated mbuf or NULL if there are no mbufs available or the user packet header was too large.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get_pkthdr/#notes", 
            "text": "The packet header mbuf returned will have its data pointer incremented by the sizeof(struct os_mbuf_pkthdr) as well as the amount of user header data (i.e.  pkthdr_len ). In other words, the data pointer is offset from the start of the mbuf by: sizeof(struct os_mbuf) + sizeof(struct os_mbuf_pkthdr) + pkthdr_len. The  om_pkthdr_len  element in the allocated mbuf is set to: sizeof(struct os_mbuf_pkthdr) + pkthdr_len.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_get_pkthdr/#example", 
            "text": "struct os_mbuf *om;\n    struct my_user_header my_hdr;\n\n    /* Get a packet header mbuf with a user header in it */\n    om = os_mbuf_get_pkthdr( g_mbuf_pool, sizeof(struct my_user_header));\n    if (om) {\n        /* Packet header mbuf was allocated */\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_memcmp/", 
            "text": "os_mbuf_memcmp\n\n\nint os_mbuf_memcmp(const struct os_mbuf *om, int off, const void *data, int len)\n\n\n\n\nPerforms a memory compare of the specified region of an mbuf chain against a flat buffer.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf\n\n\n\n\n\n\noff\n\n\nOffset, in bytes, from start of mbuf to start of comparison\n\n\n\n\n\n\ndata\n\n\nPointer to flat data buffer to compare\n\n\n\n\n\n\nlen\n\n\nNumber of bytes to compare\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nA value of zero means the memory regions are identical; all other values represent either an error or a value returned from memcmp. \n\n\n\n\nNotes\n\n\nThis function will compare bytes starting from \noff\n bytes from the start of the mbuf chain with a data buffer.\n\n\n\n\nExample\n\n\n    int rc;\n    struct os_mbuf *om;\n    uint8_t my_data_buffer[32];\n\n    /* Get a packet header mbuf with a user header in it */\n    rc = os_mbuf_memcmp(om, 0, my_data_buffer, 32);\n    if (!rc) {\n        /* \nmy_data_buffer\n and the data from offset 0 in the mbuf chain are identical! */\n    }", 
            "title": "os_mbuf_memcmp"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_memcmp/#os_mbuf_memcmp", 
            "text": "int os_mbuf_memcmp(const struct os_mbuf *om, int off, const void *data, int len)  Performs a memory compare of the specified region of an mbuf chain against a flat buffer.", 
            "title": "os_mbuf_memcmp"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_memcmp/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf    off  Offset, in bytes, from start of mbuf to start of comparison    data  Pointer to flat data buffer to compare    len  Number of bytes to compare", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_memcmp/#returned-values", 
            "text": "A value of zero means the memory regions are identical; all other values represent either an error or a value returned from memcmp.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_memcmp/#notes", 
            "text": "This function will compare bytes starting from  off  bytes from the start of the mbuf chain with a data buffer.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_memcmp/#example", 
            "text": "int rc;\n    struct os_mbuf *om;\n    uint8_t my_data_buffer[32];\n\n    /* Get a packet header mbuf with a user header in it */\n    rc = os_mbuf_memcmp(om, 0, my_data_buffer, 32);\n    if (!rc) {\n        /*  my_data_buffer  and the data from offset 0 in the mbuf chain are identical! */\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_off/", 
            "text": "os_mbuf_off\n\n\nstruct os_mbuf *os_mbuf_off(struct os_mbuf *om, int off, int *out_off)\n\n\n\n\nGiven an offset in the packet (i.e. user data byte offset in the mbuf chain), return the mbuf and the offset in that mbuf where byte 'off' is located. Note that the offset is 'returned' in \nout_off\n.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf\n\n\n\n\n\n\noff\n\n\nLocation in mbuf chain of desired byte offset\n\n\n\n\n\n\nout_off\n\n\nPointer to storage for the relative offset of the absolute location in the returned mbuf\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nNULL if the offset is not within the mbuf chain or \nom\n points to NULL.\n\n\n\n\nNotes\n\n\nThe user is allowed to call this function with the length of the mbuf chain but no greater. This allows the user to get the mbuf and offset (in that mbuf) where the next user data byte should be written.\n\n\nWhile this api is provided to the user, other API are expected to be used by the applciation developer (i.e. \nos_mbuf_append()\n or \nos_mbuf_copyinto()\n).\n\n\n\nExample\n\n\n    int relative_offset;\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct os_mbuf *tmp;\n\n    /* Append a new line character to end of mbuf data */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    relative_offset = 0;\n    tmp = os_mbuf_off(om, pktlen, \nrelative_offset);\n    if (tmp) {\n        /* Offset found. */\n        tmp-\nom_data[relative_offset] = '\\n';\n    } else {\n        /*\n         * This mbuf does not contain enough bytes so this is an invalid offset.\n         * In other words, the mbuf is less than 62 bytes in length.\n         */\n    }", 
            "title": "os_mbuf_off"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_off/#os_mbuf_off", 
            "text": "struct os_mbuf *os_mbuf_off(struct os_mbuf *om, int off, int *out_off)  Given an offset in the packet (i.e. user data byte offset in the mbuf chain), return the mbuf and the offset in that mbuf where byte 'off' is located. Note that the offset is 'returned' in  out_off .", 
            "title": "os_mbuf_off"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_off/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf    off  Location in mbuf chain of desired byte offset    out_off  Pointer to storage for the relative offset of the absolute location in the returned mbuf", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_off/#returned-values", 
            "text": "NULL if the offset is not within the mbuf chain or  om  points to NULL.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_off/#notes", 
            "text": "The user is allowed to call this function with the length of the mbuf chain but no greater. This allows the user to get the mbuf and offset (in that mbuf) where the next user data byte should be written.  While this api is provided to the user, other API are expected to be used by the applciation developer (i.e.  os_mbuf_append()  or  os_mbuf_copyinto() ).", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_off/#example", 
            "text": "int relative_offset;\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct os_mbuf *tmp;\n\n    /* Append a new line character to end of mbuf data */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    relative_offset = 0;\n    tmp = os_mbuf_off(om, pktlen,  relative_offset);\n    if (tmp) {\n        /* Offset found. */\n        tmp- om_data[relative_offset] = '\\n';\n    } else {\n        /*\n         * This mbuf does not contain enough bytes so this is an invalid offset.\n         * In other words, the mbuf is less than 62 bytes in length.\n         */\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pool_init/", 
            "text": "os_mbuf_pool_init\n\n\nint os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp, uint16_t buf_len, \n                      uint16_t nbufs)\n\n\n\n\nInitialize an mbuf pool\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nomp\n\n\nPointer to mbuf pool to initialize\n\n\n\n\n\n\nmp\n\n\nPointer to memory pool used by mbuf pool\n\n\n\n\n\n\nbuf_len\n\n\nThe size of the memory blocks in the memory pool used by the mbuf pool\n\n\n\n\n\n\nnbufs\n\n\nThe number of mbufs in the pool\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\n0 on success; all other values indicate an error.\n\n\n\n\nNotes\n\n\nThe parameter \nbuf_len\n is the total size of the memory block. This must accommodate the os_mbuf structure, the os_mbuf_pkthdr structure, any user headers plus the desired amount of user data.\n\n\n\n\nExample\n\n\n#define MBUF_PKTHDR_OVERHEAD    sizeof(struct os_mbuf_pkthdr) + sizeof(struct user_hdr)\n#define MBUF_MEMBLOCK_OVERHEAD  sizeof(struct os_mbuf) + MBUF_PKTHDR_OVERHEAD\n\n#define MBUF_NUM_MBUFS      (32)\n#define MBUF_PAYLOAD_SIZE   (64)\n#define MBUF_BUF_SIZE       OS_ALIGN(MBUF_PAYLOAD_SIZE, 4)\n#define MBUF_MEMBLOCK_SIZE  (MBUF_BUF_SIZE + MBUF_MEMBLOCK_OVERHEAD)\n#define MBUF_MEMPOOL_SIZE   OS_MEMPOOL_SIZE(MBUF_NUM_MBUFS, MBUF_MEMBLOCK_SIZE)\n\nstruct os_mbuf_pool g_mbuf_pool; \nstruct os_mempool g_mbuf_mempool;\nos_membuf_t g_mbuf_buffer[MBUF_MEMPOOL_SIZE];\n\nvoid\ncreate_mbuf_pool(void)\n{\n    int rc;\n\n    rc = os_mempool_init(\ng_mbuf_mempool, MBUF_NUM_MBUFS, \n                          MBUF_MEMBLOCK_SIZE, \ng_mbuf_buffer[0], \nmbuf_pool\n);\n    assert(rc == 0);\n\n    rc = os_mbuf_pool_init(\ng_mbuf_pool, \ng_mbuf_mempool, MBUF_MEMBLOCK_SIZE, \n                           MBUF_NUM_MBUFS);\n    assert(rc == 0);\n}", 
            "title": "os_mbuf_pool_init"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pool_init/#os_mbuf_pool_init", 
            "text": "int os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp, uint16_t buf_len, \n                      uint16_t nbufs)  Initialize an mbuf pool", 
            "title": "os_mbuf_pool_init"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pool_init/#arguments", 
            "text": "Arguments  Description      omp  Pointer to mbuf pool to initialize    mp  Pointer to memory pool used by mbuf pool    buf_len  The size of the memory blocks in the memory pool used by the mbuf pool    nbufs  The number of mbufs in the pool", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pool_init/#returned-values", 
            "text": "0 on success; all other values indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pool_init/#notes", 
            "text": "The parameter  buf_len  is the total size of the memory block. This must accommodate the os_mbuf structure, the os_mbuf_pkthdr structure, any user headers plus the desired amount of user data.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pool_init/#example", 
            "text": "#define MBUF_PKTHDR_OVERHEAD    sizeof(struct os_mbuf_pkthdr) + sizeof(struct user_hdr)\n#define MBUF_MEMBLOCK_OVERHEAD  sizeof(struct os_mbuf) + MBUF_PKTHDR_OVERHEAD\n\n#define MBUF_NUM_MBUFS      (32)\n#define MBUF_PAYLOAD_SIZE   (64)\n#define MBUF_BUF_SIZE       OS_ALIGN(MBUF_PAYLOAD_SIZE, 4)\n#define MBUF_MEMBLOCK_SIZE  (MBUF_BUF_SIZE + MBUF_MEMBLOCK_OVERHEAD)\n#define MBUF_MEMPOOL_SIZE   OS_MEMPOOL_SIZE(MBUF_NUM_MBUFS, MBUF_MEMBLOCK_SIZE)\n\nstruct os_mbuf_pool g_mbuf_pool; \nstruct os_mempool g_mbuf_mempool;\nos_membuf_t g_mbuf_buffer[MBUF_MEMPOOL_SIZE];\n\nvoid\ncreate_mbuf_pool(void)\n{\n    int rc;\n\n    rc = os_mempool_init( g_mbuf_mempool, MBUF_NUM_MBUFS, \n                          MBUF_MEMBLOCK_SIZE,  g_mbuf_buffer[0],  mbuf_pool );\n    assert(rc == 0);\n\n    rc = os_mbuf_pool_init( g_mbuf_pool,  g_mbuf_mempool, MBUF_MEMBLOCK_SIZE, \n                           MBUF_NUM_MBUFS);\n    assert(rc == 0);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_prepend/", 
            "text": "os_mbuf_prepend\n\n\nstruct os_mbuf *os_mbuf_prepend(struct os_mbuf *om, int len)\n\n\n\n\nIncreases the length of an mbuf chain by adding data to the front.  If there is insufficient room in the leading mbuf, additional mbufs are allocated and prepended as necessary.  If this function fails to allocate an mbuf, the entire chain is freed.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf\n\n\n\n\n\n\nlen\n\n\nLength, in bytes, to prepend\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nPointer to mbuf at head of chain; NULL if not enough mbufs were available to accommodate \nlen\n.\n\n\n\n\nNotes\n\n\nIf \nom\n is a packet header mbuf, the total length of the packet is adjusted by \nlen\n. Note that the returned mbuf may not point to \nom\n if insufficient leading space was available in \nom\n.\n\n\n\n\nExample\n\n\n    uint16_t pktlen;\n    struct os_mbuf *om;\n    struct os_mbuf *tmp;\n\n    /* Get initial packet length before prepend */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    tmp = os_mbuf_prepend(om, 32);\n    if (!tmp) {\n        /* Not able to prepend. The chain pointed to by *om has been freed */\n        return -1;\n    }\n\n    /* The packet length should equal the original length plus what we prepended */\n    assert((pktlen + 32) == OS_MBUF_PKTLEN(tmp));", 
            "title": "os_mbuf_prepend"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_prepend/#os_mbuf_prepend", 
            "text": "struct os_mbuf *os_mbuf_prepend(struct os_mbuf *om, int len)  Increases the length of an mbuf chain by adding data to the front.  If there is insufficient room in the leading mbuf, additional mbufs are allocated and prepended as necessary.  If this function fails to allocate an mbuf, the entire chain is freed.", 
            "title": "os_mbuf_prepend"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_prepend/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf    len  Length, in bytes, to prepend", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_prepend/#returned-values", 
            "text": "Pointer to mbuf at head of chain; NULL if not enough mbufs were available to accommodate  len .", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_prepend/#notes", 
            "text": "If  om  is a packet header mbuf, the total length of the packet is adjusted by  len . Note that the returned mbuf may not point to  om  if insufficient leading space was available in  om .", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_prepend/#example", 
            "text": "uint16_t pktlen;\n    struct os_mbuf *om;\n    struct os_mbuf *tmp;\n\n    /* Get initial packet length before prepend */\n    pktlen = OS_MBUF_PKTLEN(om);\n\n    tmp = os_mbuf_prepend(om, 32);\n    if (!tmp) {\n        /* Not able to prepend. The chain pointed to by *om has been freed */\n        return -1;\n    }\n\n    /* The packet length should equal the original length plus what we prepended */\n    assert((pktlen + 32) == OS_MBUF_PKTLEN(tmp));", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pullup/", 
            "text": "os_mbuf_pullup\n\n\nstruct os_mbuf *os_mbuf_pullup(struct os_mbuf *om, uint16_t len)\n\n\n\n\nRearrange an mbuf chain so that len bytes are contiguous, and in the data area of an mbuf (so that OS_MBUF_DATA() will  work on a structure of size len.)  Returns the resulting mbuf chain on success, free's it and returns NULL on failure.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nom\n\n\nPointer to mbuf\n\n\n\n\n\n\nlen\n\n\nLength, in bytes, to pullup (make contiguous in mbuf)\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nPointer to mbuf at head of chain; NULL if not enough mbufs were available to accommodate \nlen\n or if the requested pullup size was too large.\n\n\n\n\nNotes\n\n\nHopefully it is apparent to the user that you cannot pullup more bytes than the mbuf can accommodate. Pullup does not allocate more than one mbuf; the entire pullup length must be contained within a single mbuf.\n\n\nThe mbuf that is being pulled up into does not need to be a packet header mbuf; it can be a normal mbuf. The user should note that the maximum pullup length does depend on the type of mbuf being pulled up into (a packet header or normal mbuf).\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n    struct os_mbuf *tmp;\n    struct my_header_struct my_header;\n\n    /* Make sure \nmy_header\n is contiguous in the mbuf */\n    tmp = os_mbuf_pullup(om, sizeof(my_header_struct));\n    if (!tmp) {\n        /* Pullup failed. The chain pointed to by *om has been freed */\n        return -1;\n    }\n\n    /* copy data from mbuf into header structure */\n    memcpy(\nmy_header, tmp-\nom_data, sizeof(struct my_header_struct));", 
            "title": "os_mbuf_pullup"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pullup/#os_mbuf_pullup", 
            "text": "struct os_mbuf *os_mbuf_pullup(struct os_mbuf *om, uint16_t len)  Rearrange an mbuf chain so that len bytes are contiguous, and in the data area of an mbuf (so that OS_MBUF_DATA() will  work on a structure of size len.)  Returns the resulting mbuf chain on success, free's it and returns NULL on failure.", 
            "title": "os_mbuf_pullup"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pullup/#arguments", 
            "text": "Arguments  Description      om  Pointer to mbuf    len  Length, in bytes, to pullup (make contiguous in mbuf)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pullup/#returned-values", 
            "text": "Pointer to mbuf at head of chain; NULL if not enough mbufs were available to accommodate  len  or if the requested pullup size was too large.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pullup/#notes", 
            "text": "Hopefully it is apparent to the user that you cannot pullup more bytes than the mbuf can accommodate. Pullup does not allocate more than one mbuf; the entire pullup length must be contained within a single mbuf.  The mbuf that is being pulled up into does not need to be a packet header mbuf; it can be a normal mbuf. The user should note that the maximum pullup length does depend on the type of mbuf being pulled up into (a packet header or normal mbuf).", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/mbuf/os_mbuf_pullup/#example", 
            "text": "struct os_mbuf *om;\n    struct os_mbuf *tmp;\n    struct my_header_struct my_header;\n\n    /* Make sure  my_header  is contiguous in the mbuf */\n    tmp = os_mbuf_pullup(om, sizeof(my_header_struct));\n    if (!tmp) {\n        /* Pullup failed. The chain pointed to by *om has been freed */\n        return -1;\n    }\n\n    /* copy data from mbuf into header structure */\n    memcpy( my_header, tmp- om_data, sizeof(struct my_header_struct));", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/msys/msys/", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get/", 
            "text": "os_msys_get\n\n\nstruct os_mbuf *os_msys_get(uint16_t dsize, uint16_t leadingspace)\n\n\n\n\nRetrieve an mbuf from the system mbuf pools with \nleadingspace\n bytes available in the mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndsize\n\n\nMinimum requested size of mbuf. Actual mbuf allocated may not accommodate \ndsize\n\n\n\n\n\n\nleadingspace\n\n\nNumber of bytes for leading space in mbuf (space at start of mbuf)\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nPointer to mbuf or NULL if no mbufs were available.\n\n\n\n\nNotes\n\n\nAs described in the overview section, \nos_msys_get()\n may return an mbuf that is smaller than dsize, meaning that the mbuf user data buffer does not have enough contiguous space to hold \ndsize\n bytes.\n\n\nThis API will not return an mbuf from a larger mbuf pool if the appropriate msys mbuf pool is empty. See the overview for more information.\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n\n    /* Allocate an mbuf with hopefully at least 100 bytes in its user data buffer */\n    om = os_msys_get(100, 0);\n    if (!om) {\n        /* No mbufs available. */\n        return -1;\n    }\n}", 
            "title": "os_msys_get"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get/#os_msys_get", 
            "text": "struct os_mbuf *os_msys_get(uint16_t dsize, uint16_t leadingspace)  Retrieve an mbuf from the system mbuf pools with  leadingspace  bytes available in the mbuf.", 
            "title": "os_msys_get"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get/#arguments", 
            "text": "Arguments  Description      dsize  Minimum requested size of mbuf. Actual mbuf allocated may not accommodate  dsize    leadingspace  Number of bytes for leading space in mbuf (space at start of mbuf)", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get/#returned-values", 
            "text": "Pointer to mbuf or NULL if no mbufs were available.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get/#notes", 
            "text": "As described in the overview section,  os_msys_get()  may return an mbuf that is smaller than dsize, meaning that the mbuf user data buffer does not have enough contiguous space to hold  dsize  bytes.  This API will not return an mbuf from a larger mbuf pool if the appropriate msys mbuf pool is empty. See the overview for more information.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get/#example", 
            "text": "struct os_mbuf *om;\n\n    /* Allocate an mbuf with hopefully at least 100 bytes in its user data buffer */\n    om = os_msys_get(100, 0);\n    if (!om) {\n        /* No mbufs available. */\n        return -1;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get_pkthdr/", 
            "text": "os_msys_get_pkthdr\n\n\nstruct os_mbuf *os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)\n\n\n\n\nRetrieve a packet header mbuf from the system mbuf pools with \nuser_hdr_len\n bytes available for the user header in the mbuf.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndsize\n\n\nMinimum requested size of mbuf. Actual mbuf allocated may not accommodate \ndsize\n\n\n\n\n\n\nuser_hdr_len\n\n\nSize, in of bytes, of user header in the mbuf\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nPointer to mbuf or NULL if no mbufs were available.\n\n\n\n\nNotes\n\n\nThe same notes apply to this API as to \nos_msys_get()\n.\n\n\n\n\nExample\n\n\n    struct os_mbuf *om;\n    struct my_user_hdr_struct my_usr_hdr;\n\n    /*\n     * Allocate an mbuf with hopefully at least 100 bytes in its user data buffer\n     * and that has a user header of size sizeof(struct my_user_hdr_struct)\n     */\n    om = os_msys_get_pkthdr(100, sizeof(struct my_user_hdr_struct));\n    if (!om) {\n        /* No mbufs available. */\n        return -1;\n    }\n}", 
            "title": "os_msys_get_pkthdr"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get_pkthdr/#os_msys_get_pkthdr", 
            "text": "struct os_mbuf *os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)  Retrieve a packet header mbuf from the system mbuf pools with  user_hdr_len  bytes available for the user header in the mbuf.", 
            "title": "os_msys_get_pkthdr"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get_pkthdr/#arguments", 
            "text": "Arguments  Description      dsize  Minimum requested size of mbuf. Actual mbuf allocated may not accommodate  dsize    user_hdr_len  Size, in of bytes, of user header in the mbuf", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get_pkthdr/#returned-values", 
            "text": "Pointer to mbuf or NULL if no mbufs were available.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get_pkthdr/#notes", 
            "text": "The same notes apply to this API as to  os_msys_get() .", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_get_pkthdr/#example", 
            "text": "struct os_mbuf *om;\n    struct my_user_hdr_struct my_usr_hdr;\n\n    /*\n     * Allocate an mbuf with hopefully at least 100 bytes in its user data buffer\n     * and that has a user header of size sizeof(struct my_user_hdr_struct)\n     */\n    om = os_msys_get_pkthdr(100, sizeof(struct my_user_hdr_struct));\n    if (!om) {\n        /* No mbufs available. */\n        return -1;\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_register/", 
            "text": "os_msys_register\n\n\nint os_msys_register(struct os_mbuf_pool *new_pool) \n\n\n\n\nRegister an mbuf pool for use as a system mbuf pool. The pool should be initialized prior to registration.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnew_pool\n\n\nPointer to mbuf pool to add to system mbuf pools\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\n0 on success; all other values indicate an error.\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n    rc = os_msys_register(\ng_mbuf_pool);\n    assert(rc == 0);", 
            "title": "os_msys_register"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_register/#os_msys_register", 
            "text": "int os_msys_register(struct os_mbuf_pool *new_pool)   Register an mbuf pool for use as a system mbuf pool. The pool should be initialized prior to registration.", 
            "title": "os_msys_register"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_register/#arguments", 
            "text": "Arguments  Description      new_pool  Pointer to mbuf pool to add to system mbuf pools", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_register/#returned-values", 
            "text": "0 on success; all other values indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_register/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_register/#example", 
            "text": "rc = os_msys_register( g_mbuf_pool);\n    assert(rc == 0);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_reset/", 
            "text": "os_msys_reset\n\n\nvoid os_msys_reset(void) \n\n\n\n\nResets msys module. This de-registers all pools from msys but does nothing to the pools themselves (they still exist as mbuf pools).\n\n\n\n\nArguments\n\n\nNone\n\n\n\n\nReturned values\n\n\nNone\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n    os_msys_reset();", 
            "title": "os_msys_reset"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_reset/#os_msys_reset", 
            "text": "void os_msys_reset(void)   Resets msys module. This de-registers all pools from msys but does nothing to the pools themselves (they still exist as mbuf pools).", 
            "title": "os_msys_reset"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_reset/#arguments", 
            "text": "None", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_reset/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_reset/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/msys/os_msys_reset/#example", 
            "text": "os_msys_reset();", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/mqueue/mqueue/", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/mqueue/os_mqueue_get/", 
            "text": "", 
            "title": "os_mqueue_get"
        }, 
        {
            "location": "/os/core_os/mqueue/os_mqueue_init/", 
            "text": "", 
            "title": "os_mqueue_init"
        }, 
        {
            "location": "/os/core_os/mqueue/os_mqueue_put/", 
            "text": "", 
            "title": "os_mqueue_put"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/", 
            "text": "Sanity\n\n\nThe Sanity task is a software watchdog task, which runs periodically to check\nsystem state, and ensure that everything is still operating properly.\n\n\nIn a typical system design, there are multiple stages of watchdog: \n\n\n\n\n\n\nInternal Watchdog\n\n\n\n\n\n\nExternal Watchdog \n\n\n\n\n\n\nSanity Watchdog \n\n\n\n\n\n\nThe \nInternal Watchdog\n is typically an MCU watchdog, which is tickled in \nthe core of the OS.  The internal watchdog is tickled frequently, and is \nmeant to be an indicator the OS is running.\n\n\nThe \nExternal Watchdog\n is a watchdog that's typically run slower.  The \npurpose of an external watchdog is to provide the system with a hard reset\nwhen it has lost its mind.  \n\n\nThe \nSanity Watchdog\n is the least frequently run watchdog, and is meant as \nan application watchdog.  \n\n\nThis document is about the operation of the Mynewt Sanity Watchdog.\n\n\nDescription\n\n\nInitializing the Sanity Task\n\n\nThe Sanity Watchdog is a task in the Mynewt OS, which when enabled, runs \nevery \nsanity_seconds\n.  In order to enable the Sanity Watchdog task, \ncall the \nos_sanity_task_init()\n function.\n\n\nint os_sanity_task_init(int sanity_seconds);\n\n\n\n\nBy default, every operating system task provides the frequency it will \ncheck in with the sanity task, with the \nsanity_itvl\n parameter in the \n\nos_task_init()\n function:\n\n\nint os_task_init(struct os_task *t, char *name, os_task_func_t func, \n    void *arg, uint8_t prio, os_time_t sanity_itvl, os_stack_t *bottom,\n    uint16_t stack_size);\n\n\n\n\nsanity_itvl\n is the time in OS time ticks that the task being created \nmust register in with the sanity task.  \n\n\nChecking in with Sanity Task\n\n\nThe task must then register in with the sanity task every \nsanity_itvl\n \nseconds.  In order to do that, the task should call the \nos_sanity_task_checkin\n\nfunction, which will reset the sanity check associated with this task.\nHere is an example of a task that uses a callout to checkin with the \nsanity task every 50 seconds:\n\n\n#define TASK1_SANITY_CHECKIN_ITVL (50 * OS_TICKS_PER_SEC) \nstruct os_eventq task1_evq;\n\nstatic void\ntask1(void *arg)\n{\n    struct os_task *t;\n    struct os_event *ev;\n    struct os_callout c;\n\n    /* Get current OS task */\n    t = os_sched_get_current_task();\n\n    /* Initialize the event queue. */\n    os_eventq_init(\ntask1_evq);\n\n    /* Initialize the callout */\n    os_callout_init(\nc, \ntask1_evq, NULL);\n\n    /* reset the callout to checkin with the sanity task \n     * in 50 seconds to kick off timing.\n     */\n    os_callout_reset(\nc, TASK1_SANITY_CHECKIN_ITVL);\n\n    while (1) {\n        ev = os_eventq_get(\ntask1_evq);\n\n        /* The sanity timer has reset */\n        if (ev-\nev_arg == \nc) {\n            os_sanity_task_checkin(t);\n        } else {\n            /* not expecting any other events */\n            assert(0);\n        }\n    }\n\n    /* Should never reach */\n    assert(0);\n}\n\n\n\n\nRegistering a Custom Sanity Check\n\n\nIf a particular task wants to further hook into the sanity framework to \nperform other checks during the sanity task's operation, it can do so by\nregistering a \nstruct os_sanity_check\n using the \nos_sanity_check_register\n\nfunction.\n\n\nstatic int \nmymodule_perform_sanity_check(struct os_sanity_check *sc, void *arg)\n{\n    /* Perform your checking here.  In this case, we check if there \n     * are available buffers in mymodule, and return 0 (all good)\n     * if true, and -1 (error) if not.\n     */\n    if (mymodule_has_buffers()) {\n        return (0);\n    } else {\n        return (-1);\n    }\n}\n\nstatic int \nmymodule_register_sanity_check(void)\n{\n    struct os_sanity_check sc;\n\n    os_sanity_check_init(\nsc);\n    /* Only assert() if mymodule_perform_sanity_check() fails 50 \n     * times.  SANITY_TASK_INTERVAL is defined by the user, and \n     * is the frequency at which the sanity_task runs in seconds.\n     */\n    OS_SANITY_CHECK_SETFUNC(\nsc, mymodule_perform_sanity_check, NULL, \n        50 * SANITY_TASK_INTERVAL);\n\n    rc = os_sanity_check_register(\nsc);\n    if (rc != 0) {\n        goto err;\n    } \n\n    return (0);\nerr:\n    return (rc);\n}\n\n\n\n\nIn the above example, every time the custom sanity check \n\nmymodule_perform_sanity_check\n returns successfully (0), \nthe sanity check is reset.  In the \nOS_SANITY_CHECK_SETFUNC\n macro,\nthe sanity checkin interval is specified as 50 * SANITY_TASK_INTERVAL \n(which is the interval at which the sanity task runs.)  This means \nthat the \nmymodule_perform_sanity_check()\n function needs to fail\n50 times consecutively before the sanity task will crash the system.\n\n\nTIP:\n  When checking things like memory buffers, which can be temporarily \nbe exhausted, it's a good idea to have the sanity check fail multiple \nconsecutive times before crashing the system.  This will avoid crashing\nfor temporary failures.\n\n\nData structures\n\n\nOS Sanity Check\n\n\nstruct os_sanity_check {\n    os_time_t sc_checkin_last;\n    os_time_t sc_checkin_itvl;\n    os_sanity_check_func_t sc_func;\n    void *sc_arg; \n\n    SLIST_ENTRY(os_sanity_check) sc_next;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsc_checkin_last\n\n\nThe last time this sanity check checked in with the sanity task, in OS time ticks.\n\n\n\n\n\n\nsc_checkin_itvl\n\n\nHow frequently the sanity check is supposed to check in with the sanity task, in OS time ticks.\n\n\n\n\n\n\nsc_func\n\n\nIf not \nNULL\n, call this function when running the sanity task.  If the function returns 0, reset the sanity check.\n\n\n\n\n\n\nsc_arg\n\n\nArgument to pass to \nsc_func\n when calling it.\n\n\n\n\n\n\nsc_next\n\n\nSanity checks are chained in the sanity task when \nos_sanity_check_register()\n is called.\n\n\n\n\n\n\n\n\nList of Functions\n\n\nThe functions available in sanity are:\n\n\n\n\nos_sanity_check_init\n\n\nos_sanity_check_register\n\n\nos_sanity_check_reset\n\n\nos_sanity_task_checkin\n\n\nos_sanity_task_init", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#sanity", 
            "text": "The Sanity task is a software watchdog task, which runs periodically to check\nsystem state, and ensure that everything is still operating properly.  In a typical system design, there are multiple stages of watchdog:     Internal Watchdog    External Watchdog     Sanity Watchdog     The  Internal Watchdog  is typically an MCU watchdog, which is tickled in \nthe core of the OS.  The internal watchdog is tickled frequently, and is \nmeant to be an indicator the OS is running.  The  External Watchdog  is a watchdog that's typically run slower.  The \npurpose of an external watchdog is to provide the system with a hard reset\nwhen it has lost its mind.    The  Sanity Watchdog  is the least frequently run watchdog, and is meant as \nan application watchdog.    This document is about the operation of the Mynewt Sanity Watchdog.", 
            "title": "Sanity"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#description", 
            "text": "", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#initializing-the-sanity-task", 
            "text": "The Sanity Watchdog is a task in the Mynewt OS, which when enabled, runs \nevery  sanity_seconds .  In order to enable the Sanity Watchdog task, \ncall the  os_sanity_task_init()  function.  int os_sanity_task_init(int sanity_seconds);  By default, every operating system task provides the frequency it will \ncheck in with the sanity task, with the  sanity_itvl  parameter in the  os_task_init()  function:  int os_task_init(struct os_task *t, char *name, os_task_func_t func, \n    void *arg, uint8_t prio, os_time_t sanity_itvl, os_stack_t *bottom,\n    uint16_t stack_size);  sanity_itvl  is the time in OS time ticks that the task being created \nmust register in with the sanity task.", 
            "title": "Initializing the Sanity Task"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#checking-in-with-sanity-task", 
            "text": "The task must then register in with the sanity task every  sanity_itvl  \nseconds.  In order to do that, the task should call the  os_sanity_task_checkin \nfunction, which will reset the sanity check associated with this task.\nHere is an example of a task that uses a callout to checkin with the \nsanity task every 50 seconds:  #define TASK1_SANITY_CHECKIN_ITVL (50 * OS_TICKS_PER_SEC) \nstruct os_eventq task1_evq;\n\nstatic void\ntask1(void *arg)\n{\n    struct os_task *t;\n    struct os_event *ev;\n    struct os_callout c;\n\n    /* Get current OS task */\n    t = os_sched_get_current_task();\n\n    /* Initialize the event queue. */\n    os_eventq_init( task1_evq);\n\n    /* Initialize the callout */\n    os_callout_init( c,  task1_evq, NULL);\n\n    /* reset the callout to checkin with the sanity task \n     * in 50 seconds to kick off timing.\n     */\n    os_callout_reset( c, TASK1_SANITY_CHECKIN_ITVL);\n\n    while (1) {\n        ev = os_eventq_get( task1_evq);\n\n        /* The sanity timer has reset */\n        if (ev- ev_arg ==  c) {\n            os_sanity_task_checkin(t);\n        } else {\n            /* not expecting any other events */\n            assert(0);\n        }\n    }\n\n    /* Should never reach */\n    assert(0);\n}", 
            "title": "Checking in with Sanity Task"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#registering-a-custom-sanity-check", 
            "text": "If a particular task wants to further hook into the sanity framework to \nperform other checks during the sanity task's operation, it can do so by\nregistering a  struct os_sanity_check  using the  os_sanity_check_register \nfunction.  static int \nmymodule_perform_sanity_check(struct os_sanity_check *sc, void *arg)\n{\n    /* Perform your checking here.  In this case, we check if there \n     * are available buffers in mymodule, and return 0 (all good)\n     * if true, and -1 (error) if not.\n     */\n    if (mymodule_has_buffers()) {\n        return (0);\n    } else {\n        return (-1);\n    }\n}\n\nstatic int \nmymodule_register_sanity_check(void)\n{\n    struct os_sanity_check sc;\n\n    os_sanity_check_init( sc);\n    /* Only assert() if mymodule_perform_sanity_check() fails 50 \n     * times.  SANITY_TASK_INTERVAL is defined by the user, and \n     * is the frequency at which the sanity_task runs in seconds.\n     */\n    OS_SANITY_CHECK_SETFUNC( sc, mymodule_perform_sanity_check, NULL, \n        50 * SANITY_TASK_INTERVAL);\n\n    rc = os_sanity_check_register( sc);\n    if (rc != 0) {\n        goto err;\n    } \n\n    return (0);\nerr:\n    return (rc);\n}  In the above example, every time the custom sanity check  mymodule_perform_sanity_check  returns successfully (0), \nthe sanity check is reset.  In the  OS_SANITY_CHECK_SETFUNC  macro,\nthe sanity checkin interval is specified as 50 * SANITY_TASK_INTERVAL \n(which is the interval at which the sanity task runs.)  This means \nthat the  mymodule_perform_sanity_check()  function needs to fail\n50 times consecutively before the sanity task will crash the system.  TIP:   When checking things like memory buffers, which can be temporarily \nbe exhausted, it's a good idea to have the sanity check fail multiple \nconsecutive times before crashing the system.  This will avoid crashing\nfor temporary failures.", 
            "title": "Registering a Custom Sanity Check"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#data-structures", 
            "text": "", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#os-sanity-check", 
            "text": "struct os_sanity_check {\n    os_time_t sc_checkin_last;\n    os_time_t sc_checkin_itvl;\n    os_sanity_check_func_t sc_func;\n    void *sc_arg; \n\n    SLIST_ENTRY(os_sanity_check) sc_next;\n};     Element  Description      sc_checkin_last  The last time this sanity check checked in with the sanity task, in OS time ticks.    sc_checkin_itvl  How frequently the sanity check is supposed to check in with the sanity task, in OS time ticks.    sc_func  If not  NULL , call this function when running the sanity task.  If the function returns 0, reset the sanity check.    sc_arg  Argument to pass to  sc_func  when calling it.    sc_next  Sanity checks are chained in the sanity task when  os_sanity_check_register()  is called.", 
            "title": "OS Sanity Check"
        }, 
        {
            "location": "/os/core_os/sanity/sanity/#list-of-functions", 
            "text": "The functions available in sanity are:   os_sanity_check_init  os_sanity_check_register  os_sanity_check_reset  os_sanity_task_checkin  os_sanity_task_init", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_init/", 
            "text": "os_sanity_check_init\n\n\nint os_sanity_check_init(struct os_sanity_check *sc)\n\n\n\n\nInitialize the sanity check pointed to by \nsc\n.  Sets default values, and ensures\nmemory is cleared out.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsc\n\n\nPointer to sanity check\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK\n: sanity check initialization is successful \n\n\nAll other error codes indicate an error.\n\n\n\n\nExample\n\n\n    int rc;\n\n    rc = os_sanity_task_check_init(\nmy_sanity_check); \n    assert(rc == OS_OK);", 
            "title": "os_sanity_check_init"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_init/#os_sanity_check_init", 
            "text": "int os_sanity_check_init(struct os_sanity_check *sc)  Initialize the sanity check pointed to by  sc .  Sets default values, and ensures\nmemory is cleared out.", 
            "title": " os_sanity_check_init"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_init/#arguments", 
            "text": "Arguments  Description      sc  Pointer to sanity check", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_init/#returned-values", 
            "text": "OS_OK : sanity check initialization is successful   All other error codes indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_init/#example", 
            "text": "int rc;\n\n    rc = os_sanity_task_check_init( my_sanity_check); \n    assert(rc == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_register/", 
            "text": "os_sanity_check_register\n\n\nint os_sanity_check_register(struct os_sanity_check *sc)\n\n\n\n\nRegister the sanity check pointed to by \nsc\n with the sanity task.  After registration\nthe sanity task will check this sanity check with every run of the sanity task.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsc\n\n\nPointer to sanity check\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK\n: sanity check successfully registered\n\n\nAll other error codes indicate an error.\n\n\n\n\nExample\n\n\n    int rc;\n\n    rc = os_sanity_check_register(\nmy_sc); \n    assert(rc == OS_OK);", 
            "title": "os_sanity_check_register"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_register/#os_sanity_check_register", 
            "text": "int os_sanity_check_register(struct os_sanity_check *sc)  Register the sanity check pointed to by  sc  with the sanity task.  After registration\nthe sanity task will check this sanity check with every run of the sanity task.", 
            "title": " os_sanity_check_register"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_register/#arguments", 
            "text": "Arguments  Description      sc  Pointer to sanity check", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_register/#returned-values", 
            "text": "OS_OK : sanity check successfully registered  All other error codes indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_register/#example", 
            "text": "int rc;\n\n    rc = os_sanity_check_register( my_sc); \n    assert(rc == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_reset/", 
            "text": "os_sanity_check_reset\n\n\nint os_sanity_check_reset(struct os_sanity_check *sc)\n\n\n\n\nReset the sanity check pointed to by sc.  This tells the sanity task that \nthis sanity check is considered valid for another \nsc_checkin_itvl\n time \nticks.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsc\n\n\nPointer to sanity check\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK\n: sanity check reset successful\n\n\nAll other error codes indicate an error.\n\n\n\n\nExample\n\n\n    int rc;\n\n    rc = os_sanity_check_reset(\nmy_sc); \n    assert(rc == OS_OK);", 
            "title": "os_sanity_check_reset"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_reset/#os_sanity_check_reset", 
            "text": "int os_sanity_check_reset(struct os_sanity_check *sc)  Reset the sanity check pointed to by sc.  This tells the sanity task that \nthis sanity check is considered valid for another  sc_checkin_itvl  time \nticks.", 
            "title": " os_sanity_check_reset"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_reset/#arguments", 
            "text": "Arguments  Description      sc  Pointer to sanity check", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_reset/#returned-values", 
            "text": "OS_OK : sanity check reset successful  All other error codes indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_check_reset/#example", 
            "text": "int rc;\n\n    rc = os_sanity_check_reset( my_sc); \n    assert(rc == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_checkin/", 
            "text": "os_sanity_task_checkin\n\n\nint os_sanity_task_checkin(struct os_task *t)\n\n\n\n\nUsed by a task to check in to the sanity task. This informs the sanity task that \n\ntask\n is still alive and working normally.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nt\n\n\nPointer to task\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK\n: sanity check-in successful\n\n\nAll other error codes indicate an error.\n\n\n\n\nExample\n\n\n    int rc;\n\n    rc = os_sanity_task_checkin(\nmy_task); \n    assert(rc == OS_OK);", 
            "title": "os_sanity_task_checkin"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_checkin/#os_sanity_task_checkin", 
            "text": "int os_sanity_task_checkin(struct os_task *t)  Used by a task to check in to the sanity task. This informs the sanity task that  task  is still alive and working normally.", 
            "title": " os_sanity_task_checkin"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_checkin/#arguments", 
            "text": "Arguments  Description      t  Pointer to task", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_checkin/#returned-values", 
            "text": "OS_OK : sanity check-in successful  All other error codes indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_checkin/#example", 
            "text": "int rc;\n\n    rc = os_sanity_task_checkin( my_task); \n    assert(rc == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_init/", 
            "text": "os_sanity_task_init\n\n\nint os_sanity_task_init(int num_secs);\n\n\n\n\nInitialize the os sanity task.  \nnum_secs\n is the number of seconds to wait\nin between runs of the sanity task.\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnum_secs\n\n\nNumber of seconds to wait in between running sanity checks.\n\n\n\n\n\n\n\n\n\n\nReturned values\n\n\nOS_OK\n: Sanity task was successfully created.\n\n\nAll other error codes indicate an error.\n\n\n\n\nExample\n\n\n/* Run sanity checks every 50 seconds */\n\n#define SANITY_TASK_INTERVAL (50)\n    int rc;\n\n    rc = os_sanity_task_init(SANITY_TASK_INTERVAL); \n    assert(rc == OS_OK);", 
            "title": "os_sanity_task_init"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_init/#os_sanity_task_init", 
            "text": "int os_sanity_task_init(int num_secs);  Initialize the os sanity task.   num_secs  is the number of seconds to wait\nin between runs of the sanity task.", 
            "title": " os_sanity_task_init"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_init/#arguments", 
            "text": "Arguments  Description      num_secs  Number of seconds to wait in between running sanity checks.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_init/#returned-values", 
            "text": "OS_OK : Sanity task was successfully created.  All other error codes indicate an error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/sanity/os_sanity_task_init/#example", 
            "text": "/* Run sanity checks every 50 seconds */\n\n#define SANITY_TASK_INTERVAL (50)\n    int rc;\n\n    rc = os_sanity_task_init(SANITY_TASK_INTERVAL); \n    assert(rc == OS_OK);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/callout/callout/", 
            "text": "Callout\n\n\nCallouts are MyNewt OS timers.\n\n\nDescription\n\n\nCallout is a way of setting up an OS timer. When the timer fires, it is delivered as an event to task's event queue.\n\n\nUser would initialize their callout structure using \nos_callout_init()\n, or \nos_callout_func_init()\n and then arm it with \nos_callout_reset()\n.\n\n\nIf user wants to cancel the timer before it expires, they can either use \nos_callout_reset()\n to arm it for later expiry, or stop it altogether by calling \nos_callout_stop()\n.\n\n\nThere are 2 different options for data structure to use. First is \nstruct os_callout\n, which is a bare-bones version. You would initialize this with \nos_callout_init()\n.\n\n\nSecond option is \nstruct os_callout_func\n. This you can use if you expect to have multiple different types of timers in your task, running concurrently. The structure contains a function pointer, and you would call that function from your task's event processing loop.\n\n\nTime unit when arming the timer is OS ticks. This rate of this ticker depends on the platform this is running on. You should use OS define \nOS_TICKS_PER_SEC\n to convert wallclock time to OS  ticks.\n\n\nCallout timer fires out just once. For periodic timer type of operation you need to rearm it once it fires.\n\n\nData structures\n\n\nstruct os_callout {\n    struct os_event c_ev;\n    struct os_eventq *c_evq;\n    uint32_t c_ticks;\n    TAILQ_ENTRY(os_callout) c_next;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nc_ev\n\n\nEvent structure of this callout\n\n\n\n\n\n\nc_evq\n\n\nEvent queue where this callout is placed on timer expiry\n\n\n\n\n\n\nc_ticks\n\n\nOS tick amount when timer fires\n\n\n\n\n\n\nc_next\n\n\nLinkage to other unexpired callouts\n\n\n\n\n\n\n\n\nstruct os_callout_func {\n    struct os_callout cf_c;\n    os_callout_func_t cf_func;\n    void *cf_arg;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncf_c\n\n\nstruct os_callout. See above\n\n\n\n\n\n\ncf_func\n\n\nFunction pointer which should be called by event queue processing\n\n\n\n\n\n\ncf_arg\n\n\nGeneric void * argument to that function\n\n\n\n\n\n\n\n\nList of Functions\n\n\nThe functions available in callout are:\n\n\n\n\nos_callout_func_init\n\n\nos_callout_init\n\n\nos_callout_queued\n\n\nos_callout_reset\n\n\nos_callout_stop", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/callout/callout/#callout", 
            "text": "Callouts are MyNewt OS timers.", 
            "title": "Callout"
        }, 
        {
            "location": "/os/core_os/callout/callout/#description", 
            "text": "Callout is a way of setting up an OS timer. When the timer fires, it is delivered as an event to task's event queue.  User would initialize their callout structure using  os_callout_init() , or  os_callout_func_init()  and then arm it with  os_callout_reset() .  If user wants to cancel the timer before it expires, they can either use  os_callout_reset()  to arm it for later expiry, or stop it altogether by calling  os_callout_stop() .  There are 2 different options for data structure to use. First is  struct os_callout , which is a bare-bones version. You would initialize this with  os_callout_init() .  Second option is  struct os_callout_func . This you can use if you expect to have multiple different types of timers in your task, running concurrently. The structure contains a function pointer, and you would call that function from your task's event processing loop.  Time unit when arming the timer is OS ticks. This rate of this ticker depends on the platform this is running on. You should use OS define  OS_TICKS_PER_SEC  to convert wallclock time to OS  ticks.  Callout timer fires out just once. For periodic timer type of operation you need to rearm it once it fires.", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/callout/callout/#data-structures", 
            "text": "struct os_callout {\n    struct os_event c_ev;\n    struct os_eventq *c_evq;\n    uint32_t c_ticks;\n    TAILQ_ENTRY(os_callout) c_next;\n};     Element  Description      c_ev  Event structure of this callout    c_evq  Event queue where this callout is placed on timer expiry    c_ticks  OS tick amount when timer fires    c_next  Linkage to other unexpired callouts     struct os_callout_func {\n    struct os_callout cf_c;\n    os_callout_func_t cf_func;\n    void *cf_arg;\n};     Element  Description      cf_c  struct os_callout. See above    cf_func  Function pointer which should be called by event queue processing    cf_arg  Generic void * argument to that function", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/core_os/callout/callout/#list-of-functions", 
            "text": "The functions available in callout are:   os_callout_func_init  os_callout_init  os_callout_queued  os_callout_reset  os_callout_stop", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_func_init/", 
            "text": "os_callout_func_init \n\n\nvoid os_callout_func_init(struct os_callout_func *cf, struct os_eventq *evq, os_callout_func_t timo_func, void *ev_arg)\n\n\n\n\nInitializes the given \nstruct os_callout_func\n. Data structure is filled in with elements given as argument.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncf\n\n\nPointer to os_callout_func being initialized\n\n\n\n\n\n\nevq\n\n\nEvent queue where this gets delivered to\n\n\n\n\n\n\ntimo_func\n\n\nTimeout function. Event processing should call this\n\n\n\n\n\n\nev_arg\n\n\nGeneric argument for the event\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nThe same notes as with \nos_callout_init()\n.\n\n\nExample\n\n\n\n\nstruct os_callout_func g_native_cputimer;\nstruct os_eventq g_native_cputime_evq;\nvoid native_cputimer_cb(void *arg);\n\n    /* Initialize the callout function */\n    os_callout_func_init(\ng_native_cputimer,\n                         \ng_native_cputime_evq,\n                         native_cputimer_cb,\n                         NULL);", 
            "title": "os_callout_func_init"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_func_init/#os_callout_func_init", 
            "text": "void os_callout_func_init(struct os_callout_func *cf, struct os_eventq *evq, os_callout_func_t timo_func, void *ev_arg)  Initializes the given  struct os_callout_func . Data structure is filled in with elements given as argument.", 
            "title": " os_callout_func_init "
        }, 
        {
            "location": "/os/core_os/callout/os_callout_func_init/#arguments", 
            "text": "Arguments  Description      cf  Pointer to os_callout_func being initialized    evq  Event queue where this gets delivered to    timo_func  Timeout function. Event processing should call this    ev_arg  Generic argument for the event", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_func_init/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_func_init/#notes", 
            "text": "The same notes as with  os_callout_init() .", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_func_init/#example", 
            "text": "struct os_callout_func g_native_cputimer;\nstruct os_eventq g_native_cputime_evq;\nvoid native_cputimer_cb(void *arg);\n\n    /* Initialize the callout function */\n    os_callout_func_init( g_native_cputimer,\n                          g_native_cputime_evq,\n                         native_cputimer_cb,\n                         NULL);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_init/", 
            "text": "os_callout_init \n\n\nvoid os_callout_init(struct os_callout *c, struct os_eventq *evq, void *ev_arg)\n\n\n\n\nInitializes \nstruct os_callout\n. Event type will be set to \nOS_EVENT_T_TIMER\n.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nc\n\n\nPointer to os_callout to initialize\n\n\n\n\n\n\nevq\n\n\nEvent queue where this gets delivered to\n\n\n\n\n\n\nev_arg\n\n\nGeneric argument which is filled in for the event\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nBe careful not to call this if the callout is armed, because that will mess up the list of pending callouts.\nOr if the timer has already fired, it will mess up the event queue where the callout was delivered to.\n\n\nExample\n\n\n\n\nstruct os_eventq my_evq;\nstruct os_callout my_callouts[8];\n\n    for (i = 0; i \n 8; i++) {\n        os_callout_init(\nmy_callouts[i], \nmy_evq, (void *)i);\n    }", 
            "title": "os_callout_init"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_init/#os_callout_init", 
            "text": "void os_callout_init(struct os_callout *c, struct os_eventq *evq, void *ev_arg)  Initializes  struct os_callout . Event type will be set to  OS_EVENT_T_TIMER .", 
            "title": "os_callout_init "
        }, 
        {
            "location": "/os/core_os/callout/os_callout_init/#arguments", 
            "text": "Arguments  Description      c  Pointer to os_callout to initialize    evq  Event queue where this gets delivered to    ev_arg  Generic argument which is filled in for the event", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_init/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_init/#notes", 
            "text": "Be careful not to call this if the callout is armed, because that will mess up the list of pending callouts.\nOr if the timer has already fired, it will mess up the event queue where the callout was delivered to.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_init/#example", 
            "text": "struct os_eventq my_evq;\nstruct os_callout my_callouts[8];\n\n    for (i = 0; i   8; i++) {\n        os_callout_init( my_callouts[i],  my_evq, (void *)i);\n    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_queued/", 
            "text": "os_callout_queued\n\n\nint os_callout_queued(struct os_callout *c)\n\n\n\n\nTells whether the callout has been armed or not.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nc\n\n\nPointer to callout being checked\n\n\n\n\n\n\n\n\nReturned values\n\n\n0: timer is not armed\nnon-zero: timer is armed\n\n\nNotes\n\n\nExample\n\n\n\n\nInsert the code snippet here", 
            "title": "os_callout_queued"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_queued/#os_callout_queued", 
            "text": "int os_callout_queued(struct os_callout *c)  Tells whether the callout has been armed or not.", 
            "title": "os_callout_queued"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_queued/#arguments", 
            "text": "Arguments  Description      c  Pointer to callout being checked", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_queued/#returned-values", 
            "text": "0: timer is not armed\nnon-zero: timer is armed", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_queued/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_queued/#example", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_reset/", 
            "text": "os_callout_reset \n\n\nvoid os_callout_reset(struct os_callout *c, int32_t timo)\n\n\n\n\nResets the callout to happen \ntimo\n in OS ticks.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nc\n\n\nPointer to os_callout being reset\n\n\n\n\n\n\ntimo\n\n\nOS ticks the timer is being set to\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nExample\n\n\n\n\n    /* Re-start the timer (run every 50 msecs) */\n    os_callout_reset(\ng_bletest_timer.cf_c, OS_TICKS_PER_SEC / 20);", 
            "title": "os_callout_reset"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_reset/#os_callout_reset", 
            "text": "void os_callout_reset(struct os_callout *c, int32_t timo)  Resets the callout to happen  timo  in OS ticks.", 
            "title": " os_callout_reset "
        }, 
        {
            "location": "/os/core_os/callout/os_callout_reset/#arguments", 
            "text": "Arguments  Description      c  Pointer to os_callout being reset    timo  OS ticks the timer is being set to", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_reset/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_reset/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_reset/#example", 
            "text": "/* Re-start the timer (run every 50 msecs) */\n    os_callout_reset( g_bletest_timer.cf_c, OS_TICKS_PER_SEC / 20);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_stop/", 
            "text": "os_callout_stop \n\n\nvoid os_callout_stop(struct os_callout *c)\n\n\n\n\nDisarms a timer.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nc\n\n\nPointer to os_callout being stopped\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nNotes\n\n\nExample\n\n\n\n\nstruct os_callout_func g_native_cputimer;\n\n     os_callout_stop(\ng_native_cputimer.cf_c);", 
            "title": "os_callout_stop"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_stop/#os_callout_stop", 
            "text": "void os_callout_stop(struct os_callout *c)  Disarms a timer.", 
            "title": " os_callout_stop "
        }, 
        {
            "location": "/os/core_os/callout/os_callout_stop/#arguments", 
            "text": "Arguments  Description      c  Pointer to os_callout being stopped", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_stop/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_stop/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/core_os/callout/os_callout_stop/#example", 
            "text": "struct os_callout_func g_native_cputimer;\n\n     os_callout_stop( g_native_cputimer.cf_c);", 
            "title": "Example"
        }, 
        {
            "location": "/os/core_os/porting/port_os/", 
            "text": "Porting Mynewt OS\n\n\nThis chapter describes how to adapt the Mynewt OS to different platforms. \n\n\nDescription\n\n\nThe Mynewt OS is a complete multi-tasking environment with scheduler, time \ncontrol, buffer management, and synchronization objects. it also includes \nlibraries and services like console, command shell, image manager, \nbootloader, and file systems etc.\n\n\nThee majority of this software is platform independent and requires no\nintervention to run on your platform, but some of the components require \nsupport from the underlying platform. \n\n\nThe platform dependency of these components can fall into several categories:\n\n\n\n\nCPU Core Dependencies\n -- Specific code or \nconfiguration to operate the CPU core within your target platform\n\n\nMCU Dependencies\n -- Specific code or configuration to operate the MCU or \nSoC within your target platform\n\n\nBSP Dependencies\n -- Specific code or configuration to accommodate the \nspecific layout and functionality of your target platform \n\n\n\n\nBSP Dependency\n\n\nWith all of the functionality provided by the core, MCU, and MCU HAL (Hardware Abstraction Layer), there are still some things that must be specified for your particular system. This \nis provided in Mynewt to allow you the flexibility to design for the exact\nfunctionality, peripherals and features that you require in your product.  \n\n\nIn Mynewt, these settings/components are included in a Board Support Package \n(BSP).  The BSP contains the information specific to running Mynewt on a target \nplatform or hardware board.  Mynewt supports some common open source hardware as well\nas the development boards for some common MCUs.  These development systems\nmight be enough for you to get your prototype up and running, but when building\na product you are likely going to have your own board which is slightly different\nfrom those already supported by Mynewt.\n\n\nFor example, you might decide on your system that 16 Kilobytes of flash space\nin one flash device is reserved for a flash file system.  Or on your system \nyou may decide that GPIO pin 5 of the MCU is connected to the system LED. Or\nyou may decide that the OS Tick (the underlying time source for the OS) should\nrun slower than the defaults to conserve battery power.  These types of \nbehaviors are specified in the BSP.  \n\n\nThe information provided in the BSP (what you need to specify to get a \ncomplete executable) can vary depending on the MCU and its underlying core\narchitecture.  For example, some MCUs have dedicated pins for UART, SPI etc,\nso there is no configuration required in the BSP when using these peripherals.\nHowever some MCUs have a pin multiplexor that allows the UART to be mapped to\nseveral different pins.  For these MCUs, the BSP must specify if and where\nthe UART pins should appear to match the hardware layout of your system.\n\n\n\n\nIf your BSP is already supported my Mynewt, there is no additional BSP work involved in porting to your platform.  You need only to set the \nbsp\n attribute in your Mynewt target using the \nnewt command tool\n. \n\n\nIf your BSP is not yet supported by Mynewt, you can add support following the instructions on \nhow to add BSP support to Mynewt\n\n\n\n\nMCU Dependency\n\n\nSome OS code depends on the MCU or SoC that the system contains. For example, the MCU may specify the potential memory map of the system - where code and data can reside.\n\n\n\n\nIf your MCU is already supported my Mynewt, there is no additional MCU work involved in porting to your platform.  You need only to set the \narch\n attribute in your Mynewt target using the \nnewt command tool\n. \n\n\nIf your MCU is not yet supported by Mynewt, you can add support following the instructions on\nhow to add MCU support to Mynewt\n\n\n\n\nMCU HAL\n\n\nMynewt's architecture supports a hardware abstraction layer (HAL) for common on or off-chip MCU peripherals such as GPIO, UARTs, flash memory etc.  Even if your MCU is supported for the core OS, you may find that you need to implement the HAL functionality for a new peripheral.   For a description of the HAL abstraction and implementation information,\nsee the \nHAL API\n\n\nCPU Core Dependency\n\n\nSome OS code depends on the CPU core that your system is using.  For example, a given CPU core has a specific assembly language instruction set, and may require special cross compiler or compiler settings to use the appropriate instruction set.  \n\n\n\n\nIf your CPU architecture is already supported my Mynewt, there is no CPU core work involved in porting to your platform.  You need only to set the  \narch\n and \ncompiler\n attributes in your Mynewt target using the \nnewt command tool\n. \n\n\nIf your CPU architecture is not supported by Mynewt, you can add support following the instructions on \nhow to add CPU architecture support to Mynewt", 
            "title": "Overview"
        }, 
        {
            "location": "/os/core_os/porting/port_os/#porting-mynewt-os", 
            "text": "This chapter describes how to adapt the Mynewt OS to different platforms.", 
            "title": "Porting Mynewt OS"
        }, 
        {
            "location": "/os/core_os/porting/port_os/#description", 
            "text": "The Mynewt OS is a complete multi-tasking environment with scheduler, time \ncontrol, buffer management, and synchronization objects. it also includes \nlibraries and services like console, command shell, image manager, \nbootloader, and file systems etc.  Thee majority of this software is platform independent and requires no\nintervention to run on your platform, but some of the components require \nsupport from the underlying platform.   The platform dependency of these components can fall into several categories:   CPU Core Dependencies  -- Specific code or \nconfiguration to operate the CPU core within your target platform  MCU Dependencies  -- Specific code or configuration to operate the MCU or \nSoC within your target platform  BSP Dependencies  -- Specific code or configuration to accommodate the \nspecific layout and functionality of your target platform", 
            "title": "Description"
        }, 
        {
            "location": "/os/core_os/porting/port_os/#bsp-dependency", 
            "text": "With all of the functionality provided by the core, MCU, and MCU HAL (Hardware Abstraction Layer), there are still some things that must be specified for your particular system. This \nis provided in Mynewt to allow you the flexibility to design for the exact\nfunctionality, peripherals and features that you require in your product.    In Mynewt, these settings/components are included in a Board Support Package \n(BSP).  The BSP contains the information specific to running Mynewt on a target \nplatform or hardware board.  Mynewt supports some common open source hardware as well\nas the development boards for some common MCUs.  These development systems\nmight be enough for you to get your prototype up and running, but when building\na product you are likely going to have your own board which is slightly different\nfrom those already supported by Mynewt.  For example, you might decide on your system that 16 Kilobytes of flash space\nin one flash device is reserved for a flash file system.  Or on your system \nyou may decide that GPIO pin 5 of the MCU is connected to the system LED. Or\nyou may decide that the OS Tick (the underlying time source for the OS) should\nrun slower than the defaults to conserve battery power.  These types of \nbehaviors are specified in the BSP.    The information provided in the BSP (what you need to specify to get a \ncomplete executable) can vary depending on the MCU and its underlying core\narchitecture.  For example, some MCUs have dedicated pins for UART, SPI etc,\nso there is no configuration required in the BSP when using these peripherals.\nHowever some MCUs have a pin multiplexor that allows the UART to be mapped to\nseveral different pins.  For these MCUs, the BSP must specify if and where\nthe UART pins should appear to match the hardware layout of your system.   If your BSP is already supported my Mynewt, there is no additional BSP work involved in porting to your platform.  You need only to set the  bsp  attribute in your Mynewt target using the  newt command tool .   If your BSP is not yet supported by Mynewt, you can add support following the instructions on  how to add BSP support to Mynewt", 
            "title": "BSP Dependency"
        }, 
        {
            "location": "/os/core_os/porting/port_os/#mcu-dependency", 
            "text": "Some OS code depends on the MCU or SoC that the system contains. For example, the MCU may specify the potential memory map of the system - where code and data can reside.   If your MCU is already supported my Mynewt, there is no additional MCU work involved in porting to your platform.  You need only to set the  arch  attribute in your Mynewt target using the  newt command tool .   If your MCU is not yet supported by Mynewt, you can add support following the instructions on how to add MCU support to Mynewt", 
            "title": "MCU Dependency"
        }, 
        {
            "location": "/os/core_os/porting/port_os/#mcu-hal", 
            "text": "Mynewt's architecture supports a hardware abstraction layer (HAL) for common on or off-chip MCU peripherals such as GPIO, UARTs, flash memory etc.  Even if your MCU is supported for the core OS, you may find that you need to implement the HAL functionality for a new peripheral.   For a description of the HAL abstraction and implementation information,\nsee the  HAL API", 
            "title": "MCU HAL"
        }, 
        {
            "location": "/os/core_os/porting/port_os/#cpu-core-dependency", 
            "text": "Some OS code depends on the CPU core that your system is using.  For example, a given CPU core has a specific assembly language instruction set, and may require special cross compiler or compiler settings to use the appropriate instruction set.     If your CPU architecture is already supported my Mynewt, there is no CPU core work involved in porting to your platform.  You need only to set the   arch  and  compiler  attributes in your Mynewt target using the  newt command tool .   If your CPU architecture is not supported by Mynewt, you can add support following the instructions on  how to add CPU architecture support to Mynewt", 
            "title": "CPU Core Dependency"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/", 
            "text": "Create a BSP for your Target\n\n\nIntroduction\n\n\nIf you are using a board or system not currently supported by Mynewt, you will need to create a BSP for the new target.   If another similar BSP exists it is recommended to copy that BSP as a starting point.  For example, if another BSP exists using the same MCU, start with a copy of that BSP.\n\n\nEither way, this document describes the steps necessary to create a new BSP from scratch.  \n\n\nKeep your Reference Documents handy\n\n\nTo build a proper BSP, you will typically need the following:\n\n\n\n\nThe datasheet for the MCU you have chosen\n\n\nThe schematic of your board\n\n\nThe information on the CPU core within your MCU if it is not included in your MCU documentation\n\n\nThis Mynewt documentation\n\n\n\n\nName your BSP\n\n\nSelect a name for your BSP.  For the remainder of this document, we'll assume the bsp is named \nmyboard\n. In general its best to select a name that describes the board/system you are creating.\n\n\nCreate a BSP directory\n\n\nCreate a directory \nhw/bsp/myboard\n using the name chosen above. Within this BSP directory, create the following subdirectories:\n\n\n\n\ninclude\n\n\ninclude/bsp\n\n\nsrc\n\n\n\n\nCreate a Target using Mynewt\n\n\nCreate a newt target for your test project for the BSP. To learn how to create a target, see this \nhowto\n \nTutorial\n. Once you are \nfamiliar with creating targets, move on below to create a target to use to \ntest your BSP.\n\n\nIts recommended to use a simple \nproject\n like \nblinky\n to minimize time to get a \nworking Mynewt system.  For this document, we will assume the \ntarget\n is called \n\nmyboard_blinky\n and uses project \nblinky\n.  \n\n\nSet the \nbsp\n of the project to \n/hw/bsp/myboard\n.\nWhile creating your target, you will need to specify your \narch\nand \ncompiler\n. If your platform requires an architecture or compiler that are not defined in Mynewt, you will need to add them first.  To add a CPU architecture see \nCPU Porting\n.\n\n\nWhen you are complete, your \ntarget\n may look similar to this.\n\n\n    $newt target show \n        myboard_blinky\n            arch=cortex_m0\n            bsp=hw/bsp/myboard\n            compiler=arm-none-eabi-m0\n            compiler_def=debug\n            name=myboard_blinky\n            project=blinky\n\n\n\n\nCreate Required Files For Compilation\n\n\nCreate the following files within the BSP directory tree. For now, they can be empty files. We will fill them out one at a time.\n\n\n\n\n\n\n\n\nFile Path Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLICENSE\n\n\nA File to present the source license for your BSP\n\n\n\n\n\n\nREADME.md\n\n\nA markdown file to write documentation for your BSP\n\n\n\n\n\n\npkg.yml\n\n\nA package file to describe your BSP contents\n\n\n\n\n\n\ninclude/bsp/bsp.h\n\n\nA header file to include definitions required by system from the BSP\n\n\n\n\n\n\nsrc/os_bsp.c\n\n\nA C source file to provide functions required by the OS from your BSP\n\n\n\n\n\n\nsrc/sbrk.c\n\n\nA C source file to memory from your heap to the OS\n\n\n\n\n\n\nsrc/libc_stubs.c\n\n\nA C source file to provide stubs/methods required by libc\n\n\n\n\n\n\nmyboard.ld\n\n\nA linker script to provide the memory map for your linked code\n\n\n\n\n\n\n\n\nOptionally, create these files as necessary to provide all functionality from Mynewt.\n\n\n\n\n\n\n\n\nFile Path Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmyboard_boot.ld\n\n\nA linker script to provide the memory map for your bootloader\n\n\n\n\n\n\nmyboard_download.sh\n\n\nA bash script to download code into your platform\n\n\n\n\n\n\nmyboard_debug.sh\n\n\nA bash script to intiate a gdb session with your platform\n\n\n\n\n\n\nsrc/hal_bsp.c\n\n\nA C source file to provide functions required by the HAL from your BSP\n\n\n\n\n\n\n\n\nFill Out your Package File\n\n\nEdit the package file to describe your BSP. \n\n\nThe package file must contain:\n\n\n    pkg.name: \nhw/bsp/myboard\n\n    pkg.linkerscript: \nmyboard.ld\n\n\n\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg.name\n\n\nThe name of your bsp package\n\n\n\n\n\n\npkg.linkerscript\n\n\nThe linker script that controls the memory placement of the compiled code sections from the Mynewt OS and your applications.\n\n\n\n\n\n\n\n\nThe linker script is a key component of the BSP and specifies where each section of code and data are stored within your CPU which can vary with the BSP depending on your chosen memory layout.  For a tutorial on writing linker scripts, see \nCreate or Copy Linker Script(s)\n.\n\n\nThe package file typically contains:\n\n\n    pkg.linkerscript.bootloader.OVERWRITE: \nmyboard_boot.ld\n\n    pkg.downloadscript: \nmyboard_download.sh\n\n    pkg.debugscript: \nmyboard_debug.sh\n\n    pkg.deps: \n    - hw/mcu/mymcu/variant\n\n\n\n\nwhere \nmymcu/variant\n should be replaced with the specific MCU and variant used in your design.\n\n\nThe following table describes additional attributes relevant to the BSP \npkg.yml\n file.\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg.linkerscript.bootloader.OVERWRITE\n\n\nA special linker for creating a bootloader for Mynewt\n\n\n\n\n\n\npkg.downloadscript\n\n\nA script that can download a flash image into your target platform\n\n\n\n\n\n\npkg.debugscript\n\n\nA script that can run the GDB debugger on your board\n\n\n\n\n\n\npkg.deps\n\n\nAny dependencies on your BSP\n\n\n\n\n\n\n\n\nThe BSP will invariably depend upon an MCU ( in this sample it's \nhw/mcu/mymcu/variant\n) since the Mynewt OS runs on an MCU within your target.  If your MCU is not supported by Mynewt, see \n\nMCU Porting\n for details on how to create an MCU in Mynewt.\n\n\nThe package file may also contain:\n\n\n    pkg.cflags: -D__MY_SPECIAL_BSP_OPTIONS_\n    pkg.deps:\n    - libs/cmsis-core\n\n\n\n\n\n\n\n\n\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg.cflags\n\n\nAny specific compiler flags for your bsp\n\n\n\n\n\n\npkg.deps\n\n\nAny other libraries that may be required.  Some architectures (like ARM) have special libraries to make BSP creation easier.\n\n\n\n\n\n\n\n\nCreate or Copy Linker Script\n\n\nIt's probably best to start with a linker script from another BSP using the same MCU.  If this is not available, consult your MCU documentation and library samples to find a linker script to start with.\n\n\nTypically, a linker script has to specify the following sections for code:\n\n\n\n\n.text -- the location and alignment of the memory section to store your code\n\n\n.data -- the location and alignment of the memory section to store initialized data\n\n\n.bss -- the location and alignment of the memory section to store uninitialized data\n\n\n.heap -- the location and alignment of the memory section to provide system memory\n\n\n\n\nThe linker script should specify the location and size of the different memory regions in your BSP and map the code sections described above into these regions.  \n\n\nThe linker script should also include an ENTRY point. This is used by the debugger to know where to start the program counter when the target is debugged.\n\n\nThere may be additional requirements from the MCU or OS that you may find easiest to place in the linker script. Some specific variables that the OS and MCU depends on are :\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__bss_start__\n\n\na variable located at the start of the BSS section\n\n\n\n\n\n\n__bss_end__\n\n\na variable located at the end of the BSS section\n\n\n\n\n\n\n__isr_vector\n\n\nSome CPUs map their interrupt vectors. They may need to be specified in the linker\n\n\n\n\n\n\n_user_heap_start\n\n\nthe start of the heap for unallocated memory\n\n\n\n\n\n\n_user_heap_end\n\n\nthe end of the heap for unallocated memory\n\n\n\n\n\n\n\n\nCreate an alternate linker script for the bootloader since it is typically linked to use different addresses to boot the main image.  \n\n\nAdd Functions and Defines\n\n\nAt this point, it will be possible to run the \nnewt\n tool to build your target. \n\n\nYou may find a few Mynewt specific functions missing.  We will describe these below.\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nos_bsp_init()\n\n\ncode to initialize the bsp\n\n\n\n\n\n\nos_bsp_systick_init()\n\n\ncode to setup the system tick for the OS\n\n\n\n\n\n\n\n\nYou may also find several libc definitions that can be stubbed in your first BSP.  But you must implement the following function to provide memory to the OS and system.\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n_sbrk\n\n\nReturns memory from heap (used by malloc)\n\n\n\n\n\n\n\n\n\n\nImplement \n_sbrk()\n\n\n\n\nsbrk()\n is required by libc to get memory from the heap for things like malloc. Although not strongly BSP dependent, this is currently in the BSP to allow  flexibility in providing system memory.  See other BSPs for providing \nsbrk\n functionality.\n\n\n\n\nImplement \nos_bsp_init()\n\n\n\n\nos_bsp_init\n should initialize anything required by the OS by the BSP. Typically this is a very small set.  \n\n\nNOTE: Currently we are making calls to \n_sbrk()\n and \nclose(0)\n from \nos_bsp_init\n to get around a linker issue where some of libc is not getting included.  Please include this in your \nos_bsp_init\n.\n\n\n    /*\n     * XXX these references are here to keep the functions in for libc to find.\n     */\n    _sbrk(0);\n    _close(0);\n\n\n\n\n\n\n\nOther Unresolved Defines or Functions\n\n\n\n\nThere may be other unresolved defines or functions that are required by the specific MCU within your BSP. Below lists some sample defines.\n\n\n\n\n\n\n\n\nUndefined Variable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCONSOLE_UART_PORT\n\n\nWhich communications port on your target runs the console\n\n\n\n\n\n\nLED_BLINK_PIN\n\n\nwhich pin on your target runs the blinky LED\n\n\n\n\n\n\n\n\nThe set of missing functionality depends upon the libraries and dependencies you have included in the project.  That's why its best to keep your first project pretty simple then add incrementally.  For example, if you include Newtron file system, you will need to define a file system map for your BSP.\n\n\nMissing functionality may take the form of \n#define\n items required to compile, or they may take the form of missing functions.  \n\n\n\n\ncmsis_nvic.h\n\n\n\n\nIf you are using an ARM cortex architecture, you need to define the number of interrupts supported by your system.  If you are not using ARM Cortex architecture this may not be required (but something else might be).\n\n\nAdd Debug Script\n\n\nThe debug script in the bsp directory allows the newt tool to automatically connect to the debugger, and create a debug session with the target.  This requires knowledge of your target debug interface. Most of the Mynewt BSP targets use \nopenocd\n to perform debugging.  This script typically creates an openocd connection to the target and then connects a gdb instance to this openocd connection.  There are several examples in existing BSPs to follow.\n\n\nThe script must take a single argument which is the name of the image file minus the '.elf' suffix.\n\n\nThe BSP is complete without this file, but newt will be unable to establish a debug session without it.\n\n\nAdd Download Script\n\n\nSimilar to the debug script, the download script is a hook for newt to download the image to the target system.  The download script also typically uses openocd interface to erase flash, and progam the code into the device.\n\n\nNOTE: The download script needs to command openocd to program the image into the appropriate location, which is typically called \nFLASH_OFFSET\n in  these scripts. This location has to match the linker script location of the image link address.  For example, if your linker links the code to be run at \n0xC000\n your download script should download the image to the same\naddress in the correct flash.  \n\n\nAdd License and Documentation\n\n\nThe \nLICENSE\n file is an ASCII text file that describes the source license for this\npackage.\n\n\nThe \nREADME.md\n is a \nmarkdown\n\n file that contains any documentation you \nwant to provide for the BSP.", 
            "title": "BSP Porting"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#create-a-bsp-for-your-target", 
            "text": "", 
            "title": "Create a BSP for your Target"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#introduction", 
            "text": "If you are using a board or system not currently supported by Mynewt, you will need to create a BSP for the new target.   If another similar BSP exists it is recommended to copy that BSP as a starting point.  For example, if another BSP exists using the same MCU, start with a copy of that BSP.  Either way, this document describes the steps necessary to create a new BSP from scratch.", 
            "title": "Introduction"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#keep-your-reference-documents-handy", 
            "text": "To build a proper BSP, you will typically need the following:   The datasheet for the MCU you have chosen  The schematic of your board  The information on the CPU core within your MCU if it is not included in your MCU documentation  This Mynewt documentation", 
            "title": "Keep your Reference Documents handy"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#name-your-bsp", 
            "text": "Select a name for your BSP.  For the remainder of this document, we'll assume the bsp is named  myboard . In general its best to select a name that describes the board/system you are creating.", 
            "title": "Name your BSP"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#create-a-bsp-directory", 
            "text": "Create a directory  hw/bsp/myboard  using the name chosen above. Within this BSP directory, create the following subdirectories:   include  include/bsp  src", 
            "title": "Create a BSP directory"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#create-a-target-using-mynewt", 
            "text": "Create a newt target for your test project for the BSP. To learn how to create a target, see this  howto   Tutorial . Once you are \nfamiliar with creating targets, move on below to create a target to use to \ntest your BSP.  Its recommended to use a simple  project  like  blinky  to minimize time to get a \nworking Mynewt system.  For this document, we will assume the  target  is called  myboard_blinky  and uses project  blinky .    Set the  bsp  of the project to  /hw/bsp/myboard .\nWhile creating your target, you will need to specify your  arch and  compiler . If your platform requires an architecture or compiler that are not defined in Mynewt, you will need to add them first.  To add a CPU architecture see  CPU Porting .  When you are complete, your  target  may look similar to this.      $newt target show \n        myboard_blinky\n            arch=cortex_m0\n            bsp=hw/bsp/myboard\n            compiler=arm-none-eabi-m0\n            compiler_def=debug\n            name=myboard_blinky\n            project=blinky", 
            "title": "Create a Target using Mynewt"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#create-required-files-for-compilation", 
            "text": "Create the following files within the BSP directory tree. For now, they can be empty files. We will fill them out one at a time.     File Path Name  Description      LICENSE  A File to present the source license for your BSP    README.md  A markdown file to write documentation for your BSP    pkg.yml  A package file to describe your BSP contents    include/bsp/bsp.h  A header file to include definitions required by system from the BSP    src/os_bsp.c  A C source file to provide functions required by the OS from your BSP    src/sbrk.c  A C source file to memory from your heap to the OS    src/libc_stubs.c  A C source file to provide stubs/methods required by libc    myboard.ld  A linker script to provide the memory map for your linked code     Optionally, create these files as necessary to provide all functionality from Mynewt.     File Path Name  Description      myboard_boot.ld  A linker script to provide the memory map for your bootloader    myboard_download.sh  A bash script to download code into your platform    myboard_debug.sh  A bash script to intiate a gdb session with your platform    src/hal_bsp.c  A C source file to provide functions required by the HAL from your BSP", 
            "title": "Create Required Files For Compilation"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#fill-out-your-package-file", 
            "text": "Edit the package file to describe your BSP.   The package file must contain:      pkg.name:  hw/bsp/myboard \n    pkg.linkerscript:  myboard.ld      Attribute  Description      pkg.name  The name of your bsp package    pkg.linkerscript  The linker script that controls the memory placement of the compiled code sections from the Mynewt OS and your applications.     The linker script is a key component of the BSP and specifies where each section of code and data are stored within your CPU which can vary with the BSP depending on your chosen memory layout.  For a tutorial on writing linker scripts, see  Create or Copy Linker Script(s) .  The package file typically contains:      pkg.linkerscript.bootloader.OVERWRITE:  myboard_boot.ld \n    pkg.downloadscript:  myboard_download.sh \n    pkg.debugscript:  myboard_debug.sh \n    pkg.deps: \n    - hw/mcu/mymcu/variant  where  mymcu/variant  should be replaced with the specific MCU and variant used in your design.  The following table describes additional attributes relevant to the BSP  pkg.yml  file.     Attribute  Description      pkg.linkerscript.bootloader.OVERWRITE  A special linker for creating a bootloader for Mynewt    pkg.downloadscript  A script that can download a flash image into your target platform    pkg.debugscript  A script that can run the GDB debugger on your board    pkg.deps  Any dependencies on your BSP     The BSP will invariably depend upon an MCU ( in this sample it's  hw/mcu/mymcu/variant ) since the Mynewt OS runs on an MCU within your target.  If your MCU is not supported by Mynewt, see  MCU Porting  for details on how to create an MCU in Mynewt.  The package file may also contain:      pkg.cflags: -D__MY_SPECIAL_BSP_OPTIONS_\n    pkg.deps:\n    - libs/cmsis-core     Attribute  Description      pkg.cflags  Any specific compiler flags for your bsp    pkg.deps  Any other libraries that may be required.  Some architectures (like ARM) have special libraries to make BSP creation easier.", 
            "title": "Fill Out your Package File"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#create-or-copy-linker-script", 
            "text": "It's probably best to start with a linker script from another BSP using the same MCU.  If this is not available, consult your MCU documentation and library samples to find a linker script to start with.  Typically, a linker script has to specify the following sections for code:   .text -- the location and alignment of the memory section to store your code  .data -- the location and alignment of the memory section to store initialized data  .bss -- the location and alignment of the memory section to store uninitialized data  .heap -- the location and alignment of the memory section to provide system memory   The linker script should specify the location and size of the different memory regions in your BSP and map the code sections described above into these regions.    The linker script should also include an ENTRY point. This is used by the debugger to know where to start the program counter when the target is debugged.  There may be additional requirements from the MCU or OS that you may find easiest to place in the linker script. Some specific variables that the OS and MCU depends on are :     Variable  Description      __bss_start__  a variable located at the start of the BSS section    __bss_end__  a variable located at the end of the BSS section    __isr_vector  Some CPUs map their interrupt vectors. They may need to be specified in the linker    _user_heap_start  the start of the heap for unallocated memory    _user_heap_end  the end of the heap for unallocated memory     Create an alternate linker script for the bootloader since it is typically linked to use different addresses to boot the main image.", 
            "title": "Create or Copy Linker Script"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#add-functions-and-defines", 
            "text": "At this point, it will be possible to run the  newt  tool to build your target.   You may find a few Mynewt specific functions missing.  We will describe these below.     Function  Description      os_bsp_init()  code to initialize the bsp    os_bsp_systick_init()  code to setup the system tick for the OS     You may also find several libc definitions that can be stubbed in your first BSP.  But you must implement the following function to provide memory to the OS and system.     Function  Description      _sbrk  Returns memory from heap (used by malloc)      Implement  _sbrk()   sbrk()  is required by libc to get memory from the heap for things like malloc. Although not strongly BSP dependent, this is currently in the BSP to allow  flexibility in providing system memory.  See other BSPs for providing  sbrk  functionality.   Implement  os_bsp_init()   os_bsp_init  should initialize anything required by the OS by the BSP. Typically this is a very small set.    NOTE: Currently we are making calls to  _sbrk()  and  close(0)  from  os_bsp_init  to get around a linker issue where some of libc is not getting included.  Please include this in your  os_bsp_init .      /*\n     * XXX these references are here to keep the functions in for libc to find.\n     */\n    _sbrk(0);\n    _close(0);   Other Unresolved Defines or Functions   There may be other unresolved defines or functions that are required by the specific MCU within your BSP. Below lists some sample defines.     Undefined Variable  Description      CONSOLE_UART_PORT  Which communications port on your target runs the console    LED_BLINK_PIN  which pin on your target runs the blinky LED     The set of missing functionality depends upon the libraries and dependencies you have included in the project.  That's why its best to keep your first project pretty simple then add incrementally.  For example, if you include Newtron file system, you will need to define a file system map for your BSP.  Missing functionality may take the form of  #define  items required to compile, or they may take the form of missing functions.     cmsis_nvic.h   If you are using an ARM cortex architecture, you need to define the number of interrupts supported by your system.  If you are not using ARM Cortex architecture this may not be required (but something else might be).", 
            "title": "Add Functions and Defines"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#add-debug-script", 
            "text": "The debug script in the bsp directory allows the newt tool to automatically connect to the debugger, and create a debug session with the target.  This requires knowledge of your target debug interface. Most of the Mynewt BSP targets use  openocd  to perform debugging.  This script typically creates an openocd connection to the target and then connects a gdb instance to this openocd connection.  There are several examples in existing BSPs to follow.  The script must take a single argument which is the name of the image file minus the '.elf' suffix.  The BSP is complete without this file, but newt will be unable to establish a debug session without it.", 
            "title": "Add Debug Script"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#add-download-script", 
            "text": "Similar to the debug script, the download script is a hook for newt to download the image to the target system.  The download script also typically uses openocd interface to erase flash, and progam the code into the device.  NOTE: The download script needs to command openocd to program the image into the appropriate location, which is typically called  FLASH_OFFSET  in  these scripts. This location has to match the linker script location of the image link address.  For example, if your linker links the code to be run at  0xC000  your download script should download the image to the same\naddress in the correct flash.", 
            "title": "Add Download Script"
        }, 
        {
            "location": "/os/core_os/porting/port_bsp/#add-license-and-documentation", 
            "text": "The  LICENSE  file is an ASCII text file that describes the source license for this\npackage.  The  README.md  is a  markdown \n file that contains any documentation you \nwant to provide for the BSP.", 
            "title": "Add License and Documentation"
        }, 
        {
            "location": "/os/core_os/porting/port_mcu/", 
            "text": "Porting Mynewt to a new MCU\n\n\nPorting Mynew to a new MCU is not a difficult task if the core CPU architectures is already supported.\n\n\nThe depth of work depends on the amount of HAL (Hardware Abstraction Layer) support you need and provide in your port.\n\n\nTo get started:\n\n\n\n\nCreate a \nhw/mcu/mymcu\n directory where \nmymcu\n is the MCU you are porting to. Replace the name \nmymcu\n with a description of the MCU you are using.\n\n\nCreate a \nhw/mcu/mymcu/variant\n directory where the variant is the specific variant of the part you are usuing.  Many MCU parts have variants with different capabilities (RAM, FLASH etc) or different pinouts.  Replace \nvariant\n with a description of the variant of the part you are using.\n\n\nCreate a \nhw/mcu/mymcu/variant/pkg.yml\n file.  Copy from another mcu and fill out the relevant information\n\n\nCreate  \nhw/mcu/mymcu/variant/include\n,\nhw/mcu/mymcu/variant/include/mcu\n, and \n\nhw/mcu/mymcu/variant/src\n directories to contain the code for your mcu.\n\n\n\n\nAt this point there are two main tasks to complete.\n\n\n\n\nImplement any OS-specific code required by the OS\n\n\nImplement the HAL functionality that you are looking for\n\n\n\n\nPlease contact the Mynewt development list for help and advice porting to new MCU.", 
            "title": "MCU Porting"
        }, 
        {
            "location": "/os/core_os/porting/port_mcu/#porting-mynewt-to-a-new-mcu", 
            "text": "Porting Mynew to a new MCU is not a difficult task if the core CPU architectures is already supported.  The depth of work depends on the amount of HAL (Hardware Abstraction Layer) support you need and provide in your port.  To get started:   Create a  hw/mcu/mymcu  directory where  mymcu  is the MCU you are porting to. Replace the name  mymcu  with a description of the MCU you are using.  Create a  hw/mcu/mymcu/variant  directory where the variant is the specific variant of the part you are usuing.  Many MCU parts have variants with different capabilities (RAM, FLASH etc) or different pinouts.  Replace  variant  with a description of the variant of the part you are using.  Create a  hw/mcu/mymcu/variant/pkg.yml  file.  Copy from another mcu and fill out the relevant information  Create   hw/mcu/mymcu/variant/include , hw/mcu/mymcu/variant/include/mcu , and  hw/mcu/mymcu/variant/src  directories to contain the code for your mcu.   At this point there are two main tasks to complete.   Implement any OS-specific code required by the OS  Implement the HAL functionality that you are looking for   Please contact the Mynewt development list for help and advice porting to new MCU.", 
            "title": "Porting Mynewt to a new MCU"
        }, 
        {
            "location": "/os/core_os/porting/port_cpu/", 
            "text": "Porting Mynewt to a new CPU Architecture\n\n\nA new CPU architecture typically requires the following:\n\n\n\n\nA new compiler\n\n\nNew architecture-specific code for the OS\n\n\nHelper libraries to help others porting to the same architecture\n\n\n\n\nThese are discussed below:\n\n\nCreate A New Compiler\n\n\nNOTE: Newt does not automatically install the compilers require to build all platforms.  Its up to the user using their local machines package manager to install the compilers.  The step described here just registers the compiler with newt.  \n\n\nCreate a new directory (named after the compiler you are adding). Copy the \npkg.yml\n file from another compiler.  \n\n\nEdit the \npkg.yml\n file and change the configuration attributes to match your compiler.  Most are self-explanatory paths to different compiler and linker tools.  There are a few configuration attributes worth noting.\n\n\n\n\n\n\n\n\nConfiguration Attributes\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg.keywords\n\n\nSpecific keywords to help others search for this using newt\n\n\n\n\n\n\ncompiler.flags.default\n\n\ndefault compiler flags for this architecture\n\n\n\n\n\n\ncompiler.flags.optimized\n\n\nadditional flags when the newt tool builds an optimized image\n\n\n\n\n\n\ncompiler.flags.debug\n\n\nadditional flags when the newt tool builds a debug image\n\n\n\n\n\n\n\n\nImplement architecture-specific OS code\n\n\nThere are several architecture-specific code functions that are required when implementing a new architecture.  You can find examples in the \nsim\n architecture within Mynewt.\n\n\nWhen porting to a new CPU architecture, use the existing architectures as samples when writing your implementation.\n\n\nPlease contact the Mynewt development list for help and advice portingto new MCU.", 
            "title": "CPU Porting"
        }, 
        {
            "location": "/os/core_os/porting/port_cpu/#porting-mynewt-to-a-new-cpu-architecture", 
            "text": "A new CPU architecture typically requires the following:   A new compiler  New architecture-specific code for the OS  Helper libraries to help others porting to the same architecture   These are discussed below:", 
            "title": "Porting Mynewt to a new CPU Architecture"
        }, 
        {
            "location": "/os/core_os/porting/port_cpu/#create-a-new-compiler", 
            "text": "NOTE: Newt does not automatically install the compilers require to build all platforms.  Its up to the user using their local machines package manager to install the compilers.  The step described here just registers the compiler with newt.    Create a new directory (named after the compiler you are adding). Copy the  pkg.yml  file from another compiler.    Edit the  pkg.yml  file and change the configuration attributes to match your compiler.  Most are self-explanatory paths to different compiler and linker tools.  There are a few configuration attributes worth noting.     Configuration Attributes  Description      pkg.keywords  Specific keywords to help others search for this using newt    compiler.flags.default  default compiler flags for this architecture    compiler.flags.optimized  additional flags when the newt tool builds an optimized image    compiler.flags.debug  additional flags when the newt tool builds a debug image", 
            "title": "Create A New Compiler"
        }, 
        {
            "location": "/os/core_os/porting/port_cpu/#implement-architecture-specific-os-code", 
            "text": "There are several architecture-specific code functions that are required when implementing a new architecture.  You can find examples in the  sim  architecture within Mynewt.  When porting to a new CPU architecture, use the existing architectures as samples when writing your implementation.  Please contact the Mynewt development list for help and advice portingto new MCU.", 
            "title": "Implement architecture-specific OS code"
        }, 
        {
            "location": "/os/modules/console/console/", 
            "text": "Console\n\n\nThe console is an operating system window where users interact with system programs of the operating system or a console application by entering text input (typically from a keyboard) and reading text output (typically on the computer terminal or monitor). The text written on the console brings some information and is a sequence of characters sent by the OS or programs running on the OS. \n\n\nSupport is currently available for console access via the serial port on the hardware board.\n\n\nDescription\n\n\nIn the Mynewt OS, the console library comes in two versions:\n\n\n\n\nfull - containing the full implementation\n\n\nstub - containing stubs for the API\n\n\n\n\nBoth of these have \npkg.yml\n file which states that they provide the \nconsole\n API. If a pkg uses this API, it should list \nconsole\n as a requirement.\nFor example, the shell pkg is defined by the following pkg.yml file:\n\n\n    pkg.name: libs/shell \n    pkg.vers: 0.1\n    pkg.deps:\n        - libs/os\n        - libs/util\n    pkg.reqs:\n        - console\n    pkg.identities:\n        - SHELL \n\n\n\n\nThe project .yml file decides which version of the console pkg should be included. \nIf project requires the full console capability it lists dependency \nlibs/console/full\n in its pkg.yml file. On the other hand, a project may not have a physical console (e.g. a UART port to connect a terminal to) but may have a dependency on a pkg that has console capability. In that case you would use a console stub. \n\n\nAnother example would be the bootloader project where we want to keep the size of the image small. It includes the \nlibs/os\n pkg that can print out messages on a console (e.g. if there is a hard fault) and the \nlibs/util\n pkg that uses full console (but only if SHELL is present to provide a CLI). However, we do not want to use any console I/O capability in this particular bootloader project to keep the size small. We simply use the console stub instead, and the pkg.yml file for the project boot pkg looks like the following:\n\n\n    project.name: boot\n    project.identities: bootloader\n    project.pkgs:\n        - libs/os\n        - libs/bootutil\n        - libs/nffs\n        - libs/console/stub\n        - libs/util \n\n\n\n\nConsole has 2 modes for transmit; \nblocking mode\n and \nnon-blocking mode\n. Usually the \nnon-blocking mode\n is the active one; the output buffer is drained by getting TX completion interrupts from hardware, and more data is added based on these interrupts.\n\nBlocking mode\n is used when we don't want TX completion interrupts. It is used when system crashes, and we still want to output info related to that crash.\n\n\nConsole, by default, echoes everything it receives back. Terminal programs expect this, and is a way for the user to know that the console is connected and responsive. Whether echoing happens or not can be controlled programmatically.\n\n\nData structures\n\n\nN/A\n\n\nList of Functions\n\n\nThe functions available in console are:\n\n\n\n\nconsole_blocking_mode\n\n\nconsole_echo\n\n\nconsole_init\n\n\nconsole_is_init\n\n\nconsole_printf\n\n\nconsole_read\n\n\nconsole_write", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/console/console/#console", 
            "text": "The console is an operating system window where users interact with system programs of the operating system or a console application by entering text input (typically from a keyboard) and reading text output (typically on the computer terminal or monitor). The text written on the console brings some information and is a sequence of characters sent by the OS or programs running on the OS.   Support is currently available for console access via the serial port on the hardware board.", 
            "title": "Console"
        }, 
        {
            "location": "/os/modules/console/console/#description", 
            "text": "In the Mynewt OS, the console library comes in two versions:   full - containing the full implementation  stub - containing stubs for the API   Both of these have  pkg.yml  file which states that they provide the  console  API. If a pkg uses this API, it should list  console  as a requirement.\nFor example, the shell pkg is defined by the following pkg.yml file:      pkg.name: libs/shell \n    pkg.vers: 0.1\n    pkg.deps:\n        - libs/os\n        - libs/util\n    pkg.reqs:\n        - console\n    pkg.identities:\n        - SHELL   The project .yml file decides which version of the console pkg should be included. \nIf project requires the full console capability it lists dependency  libs/console/full  in its pkg.yml file. On the other hand, a project may not have a physical console (e.g. a UART port to connect a terminal to) but may have a dependency on a pkg that has console capability. In that case you would use a console stub.   Another example would be the bootloader project where we want to keep the size of the image small. It includes the  libs/os  pkg that can print out messages on a console (e.g. if there is a hard fault) and the  libs/util  pkg that uses full console (but only if SHELL is present to provide a CLI). However, we do not want to use any console I/O capability in this particular bootloader project to keep the size small. We simply use the console stub instead, and the pkg.yml file for the project boot pkg looks like the following:      project.name: boot\n    project.identities: bootloader\n    project.pkgs:\n        - libs/os\n        - libs/bootutil\n        - libs/nffs\n        - libs/console/stub\n        - libs/util   Console has 2 modes for transmit;  blocking mode  and  non-blocking mode . Usually the  non-blocking mode  is the active one; the output buffer is drained by getting TX completion interrupts from hardware, and more data is added based on these interrupts. Blocking mode  is used when we don't want TX completion interrupts. It is used when system crashes, and we still want to output info related to that crash.  Console, by default, echoes everything it receives back. Terminal programs expect this, and is a way for the user to know that the console is connected and responsive. Whether echoing happens or not can be controlled programmatically.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/console/console/#data-structures", 
            "text": "N/A", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/console/console/#list-of-functions", 
            "text": "The functions available in console are:   console_blocking_mode  console_echo  console_init  console_is_init  console_printf  console_read  console_write", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/console/console_blocking_mode/", 
            "text": "console_blocking_mode \n\n\n   void\n   console_blocking_mode(void)\n\n\n\n\nCalls the \nconsole_blocking_tx\n function to flush the buffered console output (transmit) queue. The function \nOS_ENTER_CRITICAL()\n is called to disable interrupts and \nOS_EXIT_CRITICAL()\n is called to enable interrupts back again once the buffer is flushed.\n\n\nArguments\n\n\nNone\n\n\nReturned values\n\n\nN/A\n\n\nExample\n\n\nHere is an example of calling \nconsole_blocking_mode\n and printing crash information from an assert to help debug.\n\n\nvoid\n_assert_func(const char *file, int line, const char *func, const char *e)\n{\n    int sr;\n\n    OS_ENTER_CRITICAL(sr);\n    (void)sr;\n    os_die_line = line;\n    os_die_module = file;\n    console_blocking_mode();\n    console_printf(\nAssert %s; failed in %s:%d\\n\n, e ? e : \n, file, line);\n    system_reset();\n}", 
            "title": "console_blocking_mode"
        }, 
        {
            "location": "/os/modules/console/console_blocking_mode/#console_blocking_mode", 
            "text": "void\n   console_blocking_mode(void)  Calls the  console_blocking_tx  function to flush the buffered console output (transmit) queue. The function  OS_ENTER_CRITICAL()  is called to disable interrupts and  OS_EXIT_CRITICAL()  is called to enable interrupts back again once the buffer is flushed.", 
            "title": " console_blocking_mode "
        }, 
        {
            "location": "/os/modules/console/console_blocking_mode/#arguments", 
            "text": "None", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_blocking_mode/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_blocking_mode/#example", 
            "text": "Here is an example of calling  console_blocking_mode  and printing crash information from an assert to help debug.  void\n_assert_func(const char *file, int line, const char *func, const char *e)\n{\n    int sr;\n\n    OS_ENTER_CRITICAL(sr);\n    (void)sr;\n    os_die_line = line;\n    os_die_module = file;\n    console_blocking_mode();\n    console_printf( Assert %s; failed in %s:%d\\n , e ? e :  , file, line);\n    system_reset();\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/console/console_echo/", 
            "text": "console_echo \n\n\n   void console_echo(int on)\n\n\n\n\nControls whether echoing is on or off for the console. When echoing is on, all characters received are transmitted back.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\non\n\n\n1 turns on echoing, 0 turns it off\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nNotes\n\n\nExample\n\n\nHere is an example where newtmgr protocol handler is controlling whether echoing is on or off. Newtmgr, the tool, turns echoing off when it's transmitting large chunks of data to target board.\n\n\nstatic int\nnmgr_def_console_echo(struct nmgr_jbuf *njb)\n{\n    int echo_on = 1;\n    int rc;\n    struct json_attr_t attrs[3] = {\n        [0] = {\n            .attribute = \necho\n,\n            .type = t_integer,\n            .addr.integer = \necho_on,\n            .nodefault = 1\n        },\n        [1] = {\n            .attribute = NULL\n        }\n    };\n\n    rc = json_read_object(\nnjb-\nnjb_buf, attrs);\n    if (rc) {\n        return OS_EINVAL;\n    }\n\n    if (echo_on) {\n        console_echo(1);\n    } else {\n        console_echo(0);\n    }\n    return (0);\n}", 
            "title": "console_echo"
        }, 
        {
            "location": "/os/modules/console/console_echo/#console_echo", 
            "text": "void console_echo(int on)  Controls whether echoing is on or off for the console. When echoing is on, all characters received are transmitted back.", 
            "title": " console_echo "
        }, 
        {
            "location": "/os/modules/console/console_echo/#arguments", 
            "text": "Arguments  Description      on  1 turns on echoing, 0 turns it off", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_echo/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_echo/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/console/console_echo/#example", 
            "text": "Here is an example where newtmgr protocol handler is controlling whether echoing is on or off. Newtmgr, the tool, turns echoing off when it's transmitting large chunks of data to target board.  static int\nnmgr_def_console_echo(struct nmgr_jbuf *njb)\n{\n    int echo_on = 1;\n    int rc;\n    struct json_attr_t attrs[3] = {\n        [0] = {\n            .attribute =  echo ,\n            .type = t_integer,\n            .addr.integer =  echo_on,\n            .nodefault = 1\n        },\n        [1] = {\n            .attribute = NULL\n        }\n    };\n\n    rc = json_read_object( njb- njb_buf, attrs);\n    if (rc) {\n        return OS_EINVAL;\n    }\n\n    if (echo_on) {\n        console_echo(1);\n    } else {\n        console_echo(0);\n    }\n    return (0);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/console/console_init/", 
            "text": "console_init \n\n\n   int\n   console_init(console_rx_cb rx_cb)\n\n\n\n\nInitializes console receive buffer and calls hal funtions \nhal_uart_init_cbs\n and \nhal_uart_config\n to initialize serial port connection and configure it (e.g. baud rate, flow control etc.)\n\n\nCaller registers a function pointer of \ntype void (*console_rx_cb)(int full_line)\n. This function will be called when console receives either a) full line of data or b) when RX buffer in console is full. Note that this function is most likely getting called from interrupt context.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrx_cb\n\n\nFunction pointer, which gets called input is received.\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success.\nNon-zero if HAL UART function calls fail.\n\n\nExample\n\n\nint\nmain(int argc, char **argv)\n{\n    ....\n\n    /* Init tasks */\n    shell_task_init(SHELL_TASK_PRIO, shell_stack, SHELL_TASK_STACK_SIZE,\n                         SHELL_MAX_INPUT_LEN);\n    console_init(shell_console_rx_cb);\n\n    ....\n}", 
            "title": "console_init"
        }, 
        {
            "location": "/os/modules/console/console_init/#console_init", 
            "text": "int\n   console_init(console_rx_cb rx_cb)  Initializes console receive buffer and calls hal funtions  hal_uart_init_cbs  and  hal_uart_config  to initialize serial port connection and configure it (e.g. baud rate, flow control etc.)  Caller registers a function pointer of  type void (*console_rx_cb)(int full_line) . This function will be called when console receives either a) full line of data or b) when RX buffer in console is full. Note that this function is most likely getting called from interrupt context.", 
            "title": " console_init "
        }, 
        {
            "location": "/os/modules/console/console_init/#arguments", 
            "text": "Arguments  Description      rx_cb  Function pointer, which gets called input is received.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_init/#returned-values", 
            "text": "Returns 0 on success.\nNon-zero if HAL UART function calls fail.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_init/#example", 
            "text": "int\nmain(int argc, char **argv)\n{\n    ....\n\n    /* Init tasks */\n    shell_task_init(SHELL_TASK_PRIO, shell_stack, SHELL_TASK_STACK_SIZE,\n                         SHELL_MAX_INPUT_LEN);\n    console_init(shell_console_rx_cb);\n\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/console/console_is_init/", 
            "text": "console_is_init \n\n\n   int console_is_init(void)\n\n\n\n\nReturns whether console has been initialized or not. I.e. whether \nconsole_init()\n has been called yet.\n\n\nArguments\n\n\nNone\n\n\nReturned values\n\n\nReturns 1 if console has been initialized. 0 if not.\n\n\nExample\n\n\nstatic int\nlog_console_append(struct log *log, void *buf, int len)\n{\n    ....\n\n    if (!console_is_init()) {\n        return (0);\n    }\n\n    /* print log entry to console */\n    ....\n}", 
            "title": "console_is_init"
        }, 
        {
            "location": "/os/modules/console/console_is_init/#console_is_init", 
            "text": "int console_is_init(void)  Returns whether console has been initialized or not. I.e. whether  console_init()  has been called yet.", 
            "title": " console_is_init "
        }, 
        {
            "location": "/os/modules/console/console_is_init/#arguments", 
            "text": "None", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_is_init/#returned-values", 
            "text": "Returns 1 if console has been initialized. 0 if not.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_is_init/#example", 
            "text": "static int\nlog_console_append(struct log *log, void *buf, int len)\n{\n    ....\n\n    if (!console_is_init()) {\n        return (0);\n    }\n\n    /* print log entry to console */\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/console/console_printf/", 
            "text": "console_printf\n\n\n    void\n    console_printf(const char *fmt, ...)\n\n\n\n\nWrites a formatted message instead of raw output to the console. It first composes a C string containing text specified as arguments to the function or containing the elements in the variable argument list passed to it using snprintf or vsnprintf, respectively. It then uses function \nconsole_write\n to output the formatted data (messages) on the console.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfmt\n\n\nPointer to C string that contains a format string that follows the same specifications as format in printf. The string is printed to console.\n\n\n\n\n\n\n...\n\n\nDepending on the format string, the function may expect either a sequence of additional arguments to be used to replace a format specifier in the format string or a variable arguments list. va_list is a special type defined in \n in stdarg.h.\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nNotes\n\n\nWhile \nconsole_printf\n, with its well understood formatting options in C, is more convenient and easy on the eyes than the raw output of \nconsole_write\n, the associated code size is considerably larger.\n\n\nExample\n\n\nExample #1:\n\n\nchar adv_data_buf[32];\n\nvoid\ntask()\n{\n   char adv_data_buf[32];\n\n   console_printf(\n%s\n, adv_data_buf);\n}\n\n\n\n\nExample #2:\n\n\nstruct exception_frame {\n    uint32_t r0;\n    uint32_t r1;\n\nstruct trap_frame {\n    struct exception_frame *ef;\n    uint32_t r2;\n    uint32_t r3;\n};\n\nvoid\ntask(struct trap_frame *tf)\n{\n     console_printf(\n r0:%8.8x  r1:%8.8x\n, tf-\nef-\nr0, tf-\nef-\nr1);\n     console_printf(\n r8:%8.8x  r9:%8.8x\n, tf-\nr2, tf-\nr3);\n}", 
            "title": "console_printf"
        }, 
        {
            "location": "/os/modules/console/console_printf/#console_printf", 
            "text": "void\n    console_printf(const char *fmt, ...)  Writes a formatted message instead of raw output to the console. It first composes a C string containing text specified as arguments to the function or containing the elements in the variable argument list passed to it using snprintf or vsnprintf, respectively. It then uses function  console_write  to output the formatted data (messages) on the console.", 
            "title": " console_printf"
        }, 
        {
            "location": "/os/modules/console/console_printf/#arguments", 
            "text": "Arguments  Description      fmt  Pointer to C string that contains a format string that follows the same specifications as format in printf. The string is printed to console.    ...  Depending on the format string, the function may expect either a sequence of additional arguments to be used to replace a format specifier in the format string or a variable arguments list. va_list is a special type defined in   in stdarg.h.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_printf/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_printf/#notes", 
            "text": "While  console_printf , with its well understood formatting options in C, is more convenient and easy on the eyes than the raw output of  console_write , the associated code size is considerably larger.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/console/console_printf/#example", 
            "text": "Example #1:  char adv_data_buf[32];\n\nvoid\ntask()\n{\n   char adv_data_buf[32];\n\n   console_printf( %s , adv_data_buf);\n}  Example #2:  struct exception_frame {\n    uint32_t r0;\n    uint32_t r1;\n\nstruct trap_frame {\n    struct exception_frame *ef;\n    uint32_t r2;\n    uint32_t r3;\n};\n\nvoid\ntask(struct trap_frame *tf)\n{\n     console_printf(  r0:%8.8x  r1:%8.8x , tf- ef- r0, tf- ef- r1);\n     console_printf(  r8:%8.8x  r9:%8.8x , tf- r2, tf- r3);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/console/console_read/", 
            "text": "console_read \n\n\n  int\n  console_read(char *str, int cnt)\n\n\n\n\nCopies up to \ncnt\n bytes of received data to buffer pointed by \nstr\n. Function tries to break the input into separate lines; once it encounters a newline character, it replaces that with end-of-string and returns.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nBuffer where data is copied to.\n\n\n\n\n\n\ncnt\n\n\nMaximum number of characters to copy.\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns the number of characters copied. 0 if there was no data\navailable, or if the first received character was '\\n'.\n\n\nExample\n\n\nvoid\ntask1_loop(void *arg)\n{\n    struct os_event *ev;\n    char rx_msg[128];\n    int rx_len;\n\n    while (1) {\n        ev = os_eventq_get(\ntask1_evq);\n        assert(ev);\n        if (ev-\nev_type == CONS_EV_TYPE) {\n            rx_len = console_read(rx_msg, sizeof(rx_msg));\n            if (rx_len) {\n                    if (!strncmp(rx_msg, \nreset\n, rx_len)) {\n                            assert(0);\n                    }", 
            "title": "console_read"
        }, 
        {
            "location": "/os/modules/console/console_read/#console_read", 
            "text": "int\n  console_read(char *str, int cnt)  Copies up to  cnt  bytes of received data to buffer pointed by  str . Function tries to break the input into separate lines; once it encounters a newline character, it replaces that with end-of-string and returns.", 
            "title": " console_read "
        }, 
        {
            "location": "/os/modules/console/console_read/#arguments", 
            "text": "Arguments  Description      str  Buffer where data is copied to.    cnt  Maximum number of characters to copy.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_read/#returned-values", 
            "text": "Returns the number of characters copied. 0 if there was no data\navailable, or if the first received character was '\\n'.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_read/#example", 
            "text": "void\ntask1_loop(void *arg)\n{\n    struct os_event *ev;\n    char rx_msg[128];\n    int rx_len;\n\n    while (1) {\n        ev = os_eventq_get( task1_evq);\n        assert(ev);\n        if (ev- ev_type == CONS_EV_TYPE) {\n            rx_len = console_read(rx_msg, sizeof(rx_msg));\n            if (rx_len) {\n                    if (!strncmp(rx_msg,  reset , rx_len)) {\n                            assert(0);\n                    }", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/console/console_write/", 
            "text": "console_write \n\n\n   void\n   console_write(char *str, int cnt)\n\n\n\n\nQueues characters to console display over serial port.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*str\n\n\npointer to the character or packet to be transmitted\n\n\n\n\n\n\ncnt\n\n\nnumber of characters in \nstr\n\n\n\n\n\n\n\n\nReturned values\n\n\nN/A\n\n\nExample\n\n\nHere is an example of the function being used in an echo command with a newline at the end.\n\n\nstatic int\nshell_echo_cmd(int argc, char **argv)\n{\n    int i;\n\n    for (i = 1; i \n argc; i++) {\n        console_write(argv[i], strlen(argv[i]));\n        console_write(\n \n, sizeof(\n \n)-1);\n    }\n    console_write(\n\\n\n, sizeof(\n\\n\n)-1);\n\n    return (0);\n}", 
            "title": "console_write"
        }, 
        {
            "location": "/os/modules/console/console_write/#console_write", 
            "text": "void\n   console_write(char *str, int cnt)  Queues characters to console display over serial port.", 
            "title": " console_write "
        }, 
        {
            "location": "/os/modules/console/console_write/#arguments", 
            "text": "Arguments  Description      *str  pointer to the character or packet to be transmitted    cnt  number of characters in  str", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/console/console_write/#returned-values", 
            "text": "N/A", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/console/console_write/#example", 
            "text": "Here is an example of the function being used in an echo command with a newline at the end.  static int\nshell_echo_cmd(int argc, char **argv)\n{\n    int i;\n\n    for (i = 1; i   argc; i++) {\n        console_write(argv[i], strlen(argv[i]));\n        console_write(   , sizeof(   )-1);\n    }\n    console_write( \\n , sizeof( \\n )-1);\n\n    return (0);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/shell/shell/", 
            "text": "Shell\n\n\nThe shell is package sitting on top of console, handling 2 jobs: processing console input and implementing newtmgr line protocol over serial line. Shell runs on its own task.\n\n\nDescription\n\n\n\n\n\n\nShell's first job is directing incoming commands to other subsystems. It parses the incoming character string, and splits it into tokens. Then it looks for the subsystem to handle this command based on the first token of input.\n\n\nSubsystems register their command handlers using \nshell_cmd_register()\n. When shell calls the command handler, it passes the other tokens as arguments.\n\n\nA few commands are currently available in the shell - \ntasks\n, \nlog\n, and \nstat stat\n. A $ prompt sign will be coming soon!\n\n\n\n\n\n\nShell's second job is doing framing, encoding and decoding newtmgr protocol when it's carried over the console. Protocol handler (libs/newtmgr) registers itself using \nshell_nlip_input_register()\n, and shell calls the registered handler for every frame. Outgoing frames for the protocol are sent using \nshell_nlip_output()\n.\n\n\n\n\n\n\n\n\nCreate a sim target to check out these commands available in shell.\n\n\nuser@~/dev/larva$ newt target create blinky_sim\nCreating target blinky_sim\nTarget blinky_sim successfully created!\nuser@~/dev/larva$ newt target set blinky_sim name=blinky_sim\nTarget blinky_sim successfully set name to blinky_sim\nuser@~/dev/larva$ newt target set blinky_sim arch=sim\nTarget blinky_sim successfully set arch to sim\nuser@~/dev/larva$ newt target set blinky_sim project=blinky\nTarget blinky_sim successfully set project to blinky\nuser@~/dev/larva$ newt target set blinky_sim bsp=hw/bsp/native\nTarget blinky_sim successfully set bsp to hw/bsp/native\nuser@~/dev/larva$ newt target set blinky_sim compiler_def=debug\nTarget blinky_sim successfully set compiler_def to debug\nuser@~/dev/larva$ newt target set blinky_sim compiler=sim\nTarget blinky_sim successfully set compiler to sim\nuser@~/dev/larva$ newt target show\nblinky_sim\n    arch: sim\n    bsp: hw/bsp/native\n    compiler: sim\n    compiler_def: debug\n    name: blinky_sim\n    project: blinky\nuser@~/dev/larva$ newt target build blinky_sim\nBuilding target blinky_sim (project = blinky)\nCompiling case.c\nCompiling suite.c\nCompiling testutil.c\n..\n..\nBuilding project blinky\nLinking blinky.elf\nSuccessfully run!\n\nuser@~/dev/larva$ ./project/blinky/bin/blinky_sim/blinky.elf\nuart0 at /dev/ttys005\n\n\n\n\n\nOpen up a new terminal to run minicom, a text-based serial port control and terminal emulation program. Set device name to the serial port of the target. \n\n\nuser@~$ minicom -D /dev/ttys005\nWelcome to minicom 2.7\n\nOPTIONS: \nCompiled on Nov 24 2015, 16:14:21.\nPort /dev/ttys005, 11:32:17\n\nPress Meta-Z for help on special keys\n\nlog \n174578:[0] bla\n174578:[0] bab\n\ntasks\n217809:6 tasks: \n217809:  shell (prio: 3, nw: 0, flags: 0x0, ssize: 0, cswcnt: 59, tot_run_time: 0ms)\n217840:  idle (prio: 255, nw: 0, flags: 0x0, ssize: 0, cswcnt: 18763, tot_run_time: 217809ms)\n217878:  uart_poller (prio: 0, nw: 217819, flags: 0x0, ssize: 0, cswcnt: 18667, tot_run_time: 0ms)\n217923:  task1 (prio: 1, nw: 218710, flags: 0x0, ssize: 0, cswcnt: 218, tot_run_time: 0ms)\n217953:  os_sanity (prio: 254, nw: 218710, flags: 0x0, ssize: 0, cswcnt: 218, tot_run_time: 0ms)\n218010:  task2 (prio: 2, nw: 217709, flags: 0x3, ssize: 0, cswcnt: 218, tot_run_time: 0ms)\n\nstat stat\n229881:s0: 1\n\n\n\n\n\nData structures\n\n\nThis data structure is used in holding information about registered command handlers.\n\n\nstruct shell_cmd {\n    char *sc_cmd;\n    shell_cmd_func_t sc_cmd_func;\n    STAILQ_ENTRY(shell_cmd) sc_next;\n};\n\n\n\n\n\n\n\n\n\n\nElement\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsc_cmd\n\n\nCharacter string of the command\n\n\n\n\n\n\nsc_cmd_func\n\n\nPointer to the command handler\n\n\n\n\n\n\nsc_next\n\n\nBookkeeping linkage internal for shell\n\n\n\n\n\n\n\n\nList of Functions\n\n\n\n\nThe functions available in this OS feature are:\n\n\n\n\nshell_task_init\n\n\nshell_cmd_register\n\n\nshell_nlip_input_register\n\n\nshell_nlip_output", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/shell/shell/#shell", 
            "text": "The shell is package sitting on top of console, handling 2 jobs: processing console input and implementing newtmgr line protocol over serial line. Shell runs on its own task.", 
            "title": "Shell"
        }, 
        {
            "location": "/os/modules/shell/shell/#description", 
            "text": "Shell's first job is directing incoming commands to other subsystems. It parses the incoming character string, and splits it into tokens. Then it looks for the subsystem to handle this command based on the first token of input.  Subsystems register their command handlers using  shell_cmd_register() . When shell calls the command handler, it passes the other tokens as arguments.  A few commands are currently available in the shell -  tasks ,  log , and  stat stat . A $ prompt sign will be coming soon!    Shell's second job is doing framing, encoding and decoding newtmgr protocol when it's carried over the console. Protocol handler (libs/newtmgr) registers itself using  shell_nlip_input_register() , and shell calls the registered handler for every frame. Outgoing frames for the protocol are sent using  shell_nlip_output() .     Create a sim target to check out these commands available in shell.  user@~/dev/larva$ newt target create blinky_sim\nCreating target blinky_sim\nTarget blinky_sim successfully created!\nuser@~/dev/larva$ newt target set blinky_sim name=blinky_sim\nTarget blinky_sim successfully set name to blinky_sim\nuser@~/dev/larva$ newt target set blinky_sim arch=sim\nTarget blinky_sim successfully set arch to sim\nuser@~/dev/larva$ newt target set blinky_sim project=blinky\nTarget blinky_sim successfully set project to blinky\nuser@~/dev/larva$ newt target set blinky_sim bsp=hw/bsp/native\nTarget blinky_sim successfully set bsp to hw/bsp/native\nuser@~/dev/larva$ newt target set blinky_sim compiler_def=debug\nTarget blinky_sim successfully set compiler_def to debug\nuser@~/dev/larva$ newt target set blinky_sim compiler=sim\nTarget blinky_sim successfully set compiler to sim\nuser@~/dev/larva$ newt target show\nblinky_sim\n    arch: sim\n    bsp: hw/bsp/native\n    compiler: sim\n    compiler_def: debug\n    name: blinky_sim\n    project: blinky\nuser@~/dev/larva$ newt target build blinky_sim\nBuilding target blinky_sim (project = blinky)\nCompiling case.c\nCompiling suite.c\nCompiling testutil.c\n..\n..\nBuilding project blinky\nLinking blinky.elf\nSuccessfully run!\n\nuser@~/dev/larva$ ./project/blinky/bin/blinky_sim/blinky.elf\nuart0 at /dev/ttys005  Open up a new terminal to run minicom, a text-based serial port control and terminal emulation program. Set device name to the serial port of the target.   user@~$ minicom -D /dev/ttys005\nWelcome to minicom 2.7\n\nOPTIONS: \nCompiled on Nov 24 2015, 16:14:21.\nPort /dev/ttys005, 11:32:17\n\nPress Meta-Z for help on special keys\n\nlog \n174578:[0] bla\n174578:[0] bab\n\ntasks\n217809:6 tasks: \n217809:  shell (prio: 3, nw: 0, flags: 0x0, ssize: 0, cswcnt: 59, tot_run_time: 0ms)\n217840:  idle (prio: 255, nw: 0, flags: 0x0, ssize: 0, cswcnt: 18763, tot_run_time: 217809ms)\n217878:  uart_poller (prio: 0, nw: 217819, flags: 0x0, ssize: 0, cswcnt: 18667, tot_run_time: 0ms)\n217923:  task1 (prio: 1, nw: 218710, flags: 0x0, ssize: 0, cswcnt: 218, tot_run_time: 0ms)\n217953:  os_sanity (prio: 254, nw: 218710, flags: 0x0, ssize: 0, cswcnt: 218, tot_run_time: 0ms)\n218010:  task2 (prio: 2, nw: 217709, flags: 0x3, ssize: 0, cswcnt: 218, tot_run_time: 0ms)\n\nstat stat\n229881:s0: 1", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/shell/shell/#data-structures", 
            "text": "This data structure is used in holding information about registered command handlers.  struct shell_cmd {\n    char *sc_cmd;\n    shell_cmd_func_t sc_cmd_func;\n    STAILQ_ENTRY(shell_cmd) sc_next;\n};     Element  Description      sc_cmd  Character string of the command    sc_cmd_func  Pointer to the command handler    sc_next  Bookkeeping linkage internal for shell", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/shell/shell/#list-of-functions", 
            "text": "The functions available in this OS feature are:   shell_task_init  shell_cmd_register  shell_nlip_input_register  shell_nlip_output", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/shell/shell_task_init/", 
            "text": "shell_task_init\n\n\nint shell_task_init(uint8_t prio, os_stack_t *stack, uint16_t stack_size,\n                    int max_input_length);\n\n\n\n\nInitializes the shell package. This creates a task for shell, and registers few commands on its own (\necho\n, \n?\n, for example). It also allocates memory for buffering console input.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprio\n\n\nPriority of the shell task\n\n\n\n\n\n\nstack\n\n\nPointer to shell tasks's stack\n\n\n\n\n\n\nstack_size\n\n\nSize of the aforementioned stack (in units of os_stack_t)\n\n\n\n\n\n\nmax_input_length\n\n\nthe maximum expected length of line for input\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success; nonzero on failure.\n\n\nNotes\n\n\nYou can register commands before calling this, but only if OS has not been started.\n\n\nExample\n\n\nHere's an example of stand-alone code which allows the user to execute regression tests for sys/config package only.\n\n\n#define SHELL_TASK_PRIO (3)\n#define SHELL_MAX_INPUT_LEN     (256)\n#define SHELL_TASK_STACK_SIZE (OS_STACK_ALIGN(384))\nos_stack_t shell_stack[SHELL_TASK_STACK_SIZE];\n\nint\nmain(int argc, char **argv)\n{\n    ....\n    shell_task_init(SHELL_TASK_PRIO, shell_stack, SHELL_TASK_STACK_SIZE,\n                    SHELL_MAX_INPUT_LEN);\n    ....\n}", 
            "title": "shell_task_init"
        }, 
        {
            "location": "/os/modules/shell/shell_task_init/#shell_task_init", 
            "text": "int shell_task_init(uint8_t prio, os_stack_t *stack, uint16_t stack_size,\n                    int max_input_length);  Initializes the shell package. This creates a task for shell, and registers few commands on its own ( echo ,  ? , for example). It also allocates memory for buffering console input.", 
            "title": " shell_task_init"
        }, 
        {
            "location": "/os/modules/shell/shell_task_init/#arguments", 
            "text": "Arguments  Description      prio  Priority of the shell task    stack  Pointer to shell tasks's stack    stack_size  Size of the aforementioned stack (in units of os_stack_t)    max_input_length  the maximum expected length of line for input", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/shell/shell_task_init/#returned-values", 
            "text": "Returns 0 on success; nonzero on failure.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/shell/shell_task_init/#notes", 
            "text": "You can register commands before calling this, but only if OS has not been started.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/shell/shell_task_init/#example", 
            "text": "Here's an example of stand-alone code which allows the user to execute regression tests for sys/config package only.  #define SHELL_TASK_PRIO (3)\n#define SHELL_MAX_INPUT_LEN     (256)\n#define SHELL_TASK_STACK_SIZE (OS_STACK_ALIGN(384))\nos_stack_t shell_stack[SHELL_TASK_STACK_SIZE];\n\nint\nmain(int argc, char **argv)\n{\n    ....\n    shell_task_init(SHELL_TASK_PRIO, shell_stack, SHELL_TASK_STACK_SIZE,\n                    SHELL_MAX_INPUT_LEN);\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/shell/shell_cmd_register/", 
            "text": "shell_cmd_register \n\n\nint shell_cmd_register(struct shell_cmd *sc)\n\n\n\n\nRegisters a handler for incoming console commands. Within the structure there is the command string and the handler for those commands. Caller must allocate the memory for this structure and keep it around as shell links this to its own internal data structures.\n\n\nCommand handler is of type \nint(*shell_cmd_func_t)(int argc, char **argv)\n. Command line arguments are passed to it as an array of character pointers.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsc\n\n\nStructure containing info about the command.\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success.\nNon-zero on failure.\n\n\nExample\n\n\nstatic int fs_ls_cmd(int argc, char **argv);\n\nstatic struct shell_cmd fs_ls_struct = {\n    .sc_cmd = \nls\n,\n    .sc_cmd_func = fs_ls_cmd\n};\n\nvoid\nfs_cli_init(void)\n{\n    shell_cmd_register(\nfs_ls_struct);\n    ....\n}", 
            "title": "shell_cmd_register"
        }, 
        {
            "location": "/os/modules/shell/shell_cmd_register/#shell_cmd_register", 
            "text": "int shell_cmd_register(struct shell_cmd *sc)  Registers a handler for incoming console commands. Within the structure there is the command string and the handler for those commands. Caller must allocate the memory for this structure and keep it around as shell links this to its own internal data structures.  Command handler is of type  int(*shell_cmd_func_t)(int argc, char **argv) . Command line arguments are passed to it as an array of character pointers.", 
            "title": " shell_cmd_register "
        }, 
        {
            "location": "/os/modules/shell/shell_cmd_register/#arguments", 
            "text": "Arguments  Description      sc  Structure containing info about the command.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/shell/shell_cmd_register/#returned-values", 
            "text": "Returns 0 on success.\nNon-zero on failure.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/shell/shell_cmd_register/#example", 
            "text": "static int fs_ls_cmd(int argc, char **argv);\n\nstatic struct shell_cmd fs_ls_struct = {\n    .sc_cmd =  ls ,\n    .sc_cmd_func = fs_ls_cmd\n};\n\nvoid\nfs_cli_init(void)\n{\n    shell_cmd_register( fs_ls_struct);\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_input_register/", 
            "text": "shell_nlip_input_register \n\n\nint shell_nlip_input_register(shell_nlip_input_func_t nf, void *arg)\n\n\n\n\nRegisters a handler for incoming newtmgr messages. Shell receives incoming data stream from UART and when it detects NLIP frame, it decodes it and passes it on by calling the function \nnf\n.\n\n\nHandler function is of type \nint (*shell_nlip_input_func_t)(struct os_mbuf *m, void *arg)\n. Shell passes the incoming newtmgr message inside os_mbuf \nm\n, and \narg\n is the argument that was passed in during handler registration.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnf\n\n\nHandler for incoming newtmgr datagrams.\n\n\n\n\n\n\narg\n\n\nArgument that gets passed to this handler, along with the datagram\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success.\n\n\nExample\n\n\nstatic int\nnmgr_shell_in(struct os_mbuf *m, void *arg)\n{\n    ....\n}\n\nint \nnmgr_task_init(uint8_t prio, os_stack_t *stack_ptr, uint16_t stack_len)\n{\n    int rc;\n    ....\n    rc = shell_nlip_input_register(nmgr_shell_in, \n            (void *) \ng_nmgr_shell_transport);\n    if (rc != 0) {\n        goto err;\n    }\n    ....\n}", 
            "title": "shell_nlip_input_register"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_input_register/#shell_nlip_input_register", 
            "text": "int shell_nlip_input_register(shell_nlip_input_func_t nf, void *arg)  Registers a handler for incoming newtmgr messages. Shell receives incoming data stream from UART and when it detects NLIP frame, it decodes it and passes it on by calling the function  nf .  Handler function is of type  int (*shell_nlip_input_func_t)(struct os_mbuf *m, void *arg) . Shell passes the incoming newtmgr message inside os_mbuf  m , and  arg  is the argument that was passed in during handler registration.", 
            "title": " shell_nlip_input_register "
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_input_register/#arguments", 
            "text": "Arguments  Description      nf  Handler for incoming newtmgr datagrams.    arg  Argument that gets passed to this handler, along with the datagram", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_input_register/#returned-values", 
            "text": "Returns 0 on success.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_input_register/#example", 
            "text": "static int\nnmgr_shell_in(struct os_mbuf *m, void *arg)\n{\n    ....\n}\n\nint \nnmgr_task_init(uint8_t prio, os_stack_t *stack_ptr, uint16_t stack_len)\n{\n    int rc;\n    ....\n    rc = shell_nlip_input_register(nmgr_shell_in, \n            (void *)  g_nmgr_shell_transport);\n    if (rc != 0) {\n        goto err;\n    }\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_output/", 
            "text": "shell_nlip_output \n\n\nint shell_nlip_output(struct os_mbuf *m)\n\n\n\n\nQueue outgoing newtmgr message for transmission. Shell package will encode this and frame it while sending it out via console.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nm\n\n\nos_mbuf containing the message\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns 0 on success.\n\n\nExample\n\n\nstatic int \nnmgr_shell_out(struct nmgr_transport *nt, struct os_mbuf *m)\n{\n    int rc;\n\n    rc = shell_nlip_output(m);\n    if (rc != 0) {\n        goto err;\n    }\n\n    return (0);\nerr:\n    return (rc);\n}", 
            "title": "shell_nlip_output"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_output/#shell_nlip_output", 
            "text": "int shell_nlip_output(struct os_mbuf *m)  Queue outgoing newtmgr message for transmission. Shell package will encode this and frame it while sending it out via console.", 
            "title": " shell_nlip_output "
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_output/#arguments", 
            "text": "Arguments  Description      m  os_mbuf containing the message", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_output/#returned-values", 
            "text": "Returns 0 on success.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/shell/shell_nlip_output/#example", 
            "text": "static int \nnmgr_shell_out(struct nmgr_transport *nt, struct os_mbuf *m)\n{\n    int rc;\n\n    rc = shell_nlip_output(m);\n    if (rc != 0) {\n        goto err;\n    }\n\n    return (0);\nerr:\n    return (rc);\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/bootloader/bootloader/", 
            "text": "Bootloader\n\n\nInsert synopsis here\n\n\nDescription\n\n\nDescribe module here, special features, how pieces fit together etc.\n\n\nData structures\n\n\nReplace this with the list of data structures used, why, any neat features\n\n\nList of Functions\n\n\n\n\nThe functions available in bootloader are:\n\n\n\n\nboot_build_status\n\n\nboot_build_status_one\n\n\nboot_clear_status\n\n\nboot_copy_area\n\n\nboot_copy_image\n\n\nboot_erase_area\n\n\nboot_fill_slot\n\n\nboot_find_image_area_idx\n\n\nboot_find_image_part\n\n\nboot_find_image_slot\n\n\nboot_go\n\n\nboot_init_flash\n\n\nboot_move_area\n\n\nboot_read_image_header\n\n\nboot_read_image_headers\n\n\nboot_read_status\n\n\nboot_select_image_slot\n\n\nboot_slot_addr\n\n\nboot_slot_to_area_idx\n\n\nboot_swap_areas\n\n\nboot_vect_delete_main\n\n\nboot_vect_delete_test\n\n\nboot_vect_read_main\n\n\nboot_vect_read_one\n\n\nboot_vect_read_test\n\n\nboot_write_status", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/bootloader/bootloader/#bootloader", 
            "text": "Insert synopsis here", 
            "title": "Bootloader"
        }, 
        {
            "location": "/os/modules/bootloader/bootloader/#description", 
            "text": "Describe module here, special features, how pieces fit together etc.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/bootloader/bootloader/#data-structures", 
            "text": "Replace this with the list of data structures used, why, any neat features", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/bootloader/bootloader/#list-of-functions", 
            "text": "The functions available in bootloader are:   boot_build_status  boot_build_status_one  boot_clear_status  boot_copy_area  boot_copy_image  boot_erase_area  boot_fill_slot  boot_find_image_area_idx  boot_find_image_part  boot_find_image_slot  boot_go  boot_init_flash  boot_move_area  boot_read_image_header  boot_read_image_headers  boot_read_status  boot_select_image_slot  boot_slot_addr  boot_slot_to_area_idx  boot_swap_areas  boot_vect_delete_main  boot_vect_delete_test  boot_vect_read_main  boot_vect_read_one  boot_vect_read_test  boot_write_status", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/bootloader/boot_build_status/", 
            "text": "", 
            "title": "boot_build_status"
        }, 
        {
            "location": "/os/modules/bootloader/boot_build_status_one/", 
            "text": "", 
            "title": "boot_build_status_one"
        }, 
        {
            "location": "/os/modules/bootloader/boot_clear_status/", 
            "text": "", 
            "title": "boot_clear_status"
        }, 
        {
            "location": "/os/modules/bootloader/boot_copy_area/", 
            "text": "", 
            "title": "boot_copy_area"
        }, 
        {
            "location": "/os/modules/bootloader/boot_copy_image/", 
            "text": "", 
            "title": "boot_copy_image"
        }, 
        {
            "location": "/os/modules/bootloader/boot_erase_area/", 
            "text": "", 
            "title": "boot_erase_area"
        }, 
        {
            "location": "/os/modules/bootloader/boot_fill_slot/", 
            "text": "", 
            "title": "boot_fill_slot"
        }, 
        {
            "location": "/os/modules/bootloader/boot_find_image_area_idx/", 
            "text": "", 
            "title": "boot_find_image_area_idx"
        }, 
        {
            "location": "/os/modules/bootloader/boot_find_image_part/", 
            "text": "", 
            "title": "boot_find_image_part"
        }, 
        {
            "location": "/os/modules/bootloader/boot_find_image_slot/", 
            "text": "", 
            "title": "boot_find_image_slot"
        }, 
        {
            "location": "/os/modules/bootloader/boot_go/", 
            "text": "", 
            "title": "boot_go"
        }, 
        {
            "location": "/os/modules/bootloader/boot_init_flash/", 
            "text": "", 
            "title": "boot_init_flash"
        }, 
        {
            "location": "/os/modules/bootloader/boot_move_area/", 
            "text": "", 
            "title": "boot_move_area"
        }, 
        {
            "location": "/os/modules/bootloader/boot_read_image_header/", 
            "text": "", 
            "title": "boot_read_image_header"
        }, 
        {
            "location": "/os/modules/bootloader/boot_read_image_headers/", 
            "text": "", 
            "title": "boot_read_image_headers"
        }, 
        {
            "location": "/os/modules/bootloader/boot_read_status/", 
            "text": "", 
            "title": "boot_read_status"
        }, 
        {
            "location": "/os/modules/bootloader/boot_select_image_slot/", 
            "text": "", 
            "title": "boot_select_image_slot"
        }, 
        {
            "location": "/os/modules/bootloader/boot_slot_addr/", 
            "text": "", 
            "title": "boot_slot_addr"
        }, 
        {
            "location": "/os/modules/bootloader/boot_slot_to_area_idx/", 
            "text": "", 
            "title": "boot_slot_to_area_idx"
        }, 
        {
            "location": "/os/modules/bootloader/boot_swap_areas/", 
            "text": "", 
            "title": "boot_swap_areas"
        }, 
        {
            "location": "/os/modules/bootloader/boot_vect_delete_main/", 
            "text": "", 
            "title": "boot_vect_delete_main"
        }, 
        {
            "location": "/os/modules/bootloader/boot_vect_delete_test/", 
            "text": "", 
            "title": "boot_vect_delete_test"
        }, 
        {
            "location": "/os/modules/bootloader/boot_vect_read_main/", 
            "text": "", 
            "title": "boot_vect_read_main"
        }, 
        {
            "location": "/os/modules/bootloader/boot_vect_read_one/", 
            "text": "", 
            "title": "boot_vect_read_one"
        }, 
        {
            "location": "/os/modules/bootloader/boot_vect_read_test/", 
            "text": "", 
            "title": "boot_vect_read_test"
        }, 
        {
            "location": "/os/modules/bootloader/boot_write_status/", 
            "text": "", 
            "title": "boot_write_status"
        }, 
        {
            "location": "/os/modules/filesystem/", 
            "text": "Filesystem\n\n\nMynewt provides a Flash File System abstraction layer (fs) to allow you to swap out the default Newtron File System (nffs) with a different file system of your choice. \n\n\nDescription\n\n\nThe default file system used in the Mynewt OS is the Newtron Flash File System (nffs). Hence the \nnffs\n egg description lists \nlibs/fs\n as a dependency. \n\n\negg.name: libs/nffs\negg.vers: 0.1\negg.identities: NFFS\negg.deps:\n    - libs/os\n    - libs/fs\n    - libs/testutil\n    - hw/hal\n\n\n\n\nIf the user wishes to use a different flash file system (say, \"ownffs\"), the directory containing \"ownffs\" code must include the \negg.yml\n file stating the dependency on \nlibs/fs\n listed as shown above. \"ownffs\" uses the \nlibs/fs\n API available in mynewt, thus minimizing changes to other parts of the project.\n\n\nNote that this generic file system (\nfs\n) API does not expose any file system detection, initialization, and formatting functions. These function calls remain specific to the chosen file system. For example, Project Slinky uses the default Newtron File System (nffs) and therefore calls nffs_init() to initialize the nffs memory and data structures before any other file system operations are attempted. As shown below, the egg for Project Slinky includes the \nlibs/imgmgr\n egg which in turn includes the \nlibs/bootutil\n egg. The egg description for \nlibs/bootutil\n specifies \nfs/nffs\n as a dependency.\n\n\n\n    egg.name: project/slinky\n    egg.vers: 0.1\n    egg.deps:\n        - libs/os\n        - libs/console/full\n        - libs/shell\n        - libs/newtmgr\n        - libs/imgmgr\n        - sys/config\n        - sys/log\n        - sys/stats\n\n\n\n\n\n    egg.name: libs/imgmgr\n    egg.vers: 0.1\n    egg.deps:\n        - libs/newtmgr\n        - libs/bootutil\n    egg.deps.FS:\n        - fs/fs\n    egg.cflags.FS: -DFS_PRESENT\n\n\n\n\n\n    egg.name: libs/bootutil\n    egg.vers: 0.1 \n    egg.deps: \n        - fs/nffs\n        - libs/os \n        - libs/testutil\n        - hw/hal\n\n\n\n\nData Structures\n\n\nAPI\n\n\n   struct fs_file;\n\n\n\n\nThe functions available in this OS feature are:\n\n\n\n\nfs_open\n\n\nfs_close\n\n\nfs_read\n\n\nfs_write\n\n\nfs_seek\n\n\nfs_getpos\n\n\nfs_filelen\n\n\nfs_unlink\n\n\nfs_rename\n\n\nfs_mkdir\n\n\nfs_opendir\n\n\nfs_readdir\n\n\nfs_closedir\n\n\nfs_dirent_name\n\n\nfs_dirent_is_dir\n\n\n\n\nAdditional file system utilities that bundle some of the basic functions above are:\n\n\n\n\nfsutil_read_file\n\n\nfsutil_write_file\n\n\n\n\nAPI Reference\n\n\n\n\n fs_open \n\n\n    int\n    fs_open(const char *filename, uint8_t access_flags, struct fs_file **out_file);\n\n\n\n\nOpens a file at the specified path.  The result of opening a nonexistent file depends on the access flags specified.  All intermediate directories must already exist.\n\n\nThe mode strings passed to fopen() map to fs_open()'s access flags as follows:\n\n\n    \nr\n  -  FS_ACCESS_READ\n    \nr+\n -  FS_ACCESS_READ | FS_ACCESS_WRITE\n    \nw\n  -  FS_ACCESS_WRITE | FS_ACCESS_TRUNCATE\n    \nw+\n -  FS_ACCESS_READ | FS_ACCESS_WRITE | FS_ACCESS_TRUNCATE\n    \na\n  -  FS_ACCESS_WRITE | FS_ACCESS_APPEND\n    \na+\n -  FS_ACCESS_READ | FS_ACCESS_WRITE | FS_ACCESS_APPEND\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilename\n\n\nPointer to the file created at the path of the specified filename\n\n\n\n\n\n\naccess_flags\n\n\nFlags controlling file access; see above table\n\n\n\n\n\n\nout_file\n\n\nOn success, a pointer to the newly-created file handle gets written here\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\nThere is no concept of current working directory. Therefore all file names should start with '/'.\n\n\nExample\n\n\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n\n fs_close \n\n\n   int\n   fs_close(struct fs_file *file)\n\n\n\n\nCloses the specified file and invalidates the file handle.  If the file has already been unlinked, and this is the last open handle to the file, this operation causes the file to be deleted from disk.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nPointer to the file to close\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\nDon't use file handle after closing the file.\n\n\nExample\n\n\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n\n fs_read \n\n\n   int\n   fs_read(struct fs_file *file, uint32_t len, void *out_data, uint32_t *out_len);\n\n\n\n\nReads data from the specified file.  If more data is requested than remains in the file, all available data is retrieved. Function returns in \nout_len\n the actual number of bytes read (less or equal to \nlen\n).\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nPointer to the the file to read from\n\n\n\n\n\n\nlen\n\n\nThe number of bytes to attempt to read\n\n\n\n\n\n\nout_data\n\n\nThe destination buffer to read into\n\n\n\n\n\n\nout_len\n\n\nOn success, the number of bytes actually read gets written here.  Pass null if you don't care.\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\nThis type of short read results in a success return code.\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n\n fs_write \n\n\n   int\n   fs_write(struct fs_file *file, const void *data, int len);\n\n\n\n\nWrites the supplied data to the current offset of the specified file handle.  \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nPointer to the file to write to\n\n\n\n\n\n\ndata\n\n\nThe data to write\n\n\n\n\n\n\nlen\n\n\nThe number of bytes to write\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_seek \n\n\n   int\n   fs_seek(struct fs_file *file, uint32_t offset);\n\n\n\n\nPositions a file's read and write pointer at the specified offset.  The offset is expressed as the number of bytes from the start of the file (i.e., seeking to offset 0 places the pointer at the first byte in the file). \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nPointer to the file to reposition\n\n\n\n\n\n\noffset\n\n\nThe 0-based file offset to seek to\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_getpos \n\n\n   uint32_t\n   fs_getpos(const struct fs_file *file);\n\n\n\n\nRetrieves the current read and write position of the specified open file. \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nPointer to the file to query\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\nThe file offset, in bytes\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_filelen \n\n\n   int\n   fs_filelen(const struct fs_file *file, uint32_t *out_len);\n\n\n\n\n\nRetrieves the current length of the specified open file.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nPointer to the file to query\n\n\n\n\n\n\nout_len\n\n\nOn success, the number of bytes in the file gets written here\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_unlink \n\n\n   int\n   fs_unlink(const char *filename);\n\n\n\n\n\nUnlinks the file or directory at the specified path.  If the path refers to a directory, all the directory's descendants are recursively unlinked.  Any open file handles refering to an unlinked file remain valid, and can be read from and written to.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilename\n\n\nThe path of the file or directory to unlink\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_rename \n\n\n   int\n   fs_rename(const char *from, const char *to);\n\n\n\n\n\nPerforms a rename and / or move of the specified source path to the specified destination.  \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfrom\n\n\nThe source path\n\n\n\n\n\n\nto\n\n\nThe destination path\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\nThe source path can refer to either a file or a directory.  All intermediate directories in the destination path must already exist.  If the source path refers to a file, the destination path must contain a full filename path, rather than just the new parent directory.  If an object already exists at the specified destination path, this function causes it to be unlinked prior to the rename (i.e., the destination gets clobbered).\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_mkdir \n\n\n   int\n   fs_mkdir(const char *path);\n\n\n\n\n\nCreates the directory represented by the specified path.  \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPointer to the directory to create\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure.\n\n\n\n\nNotes\n\n\nAll intermediate directories must already exist.  The specified path must start with a '/' character.\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_opendir \n\n\n\n   int\n   fs_opendir(const char *path, struct fs_dir **out_dir);\n\n\n\n\n\nOpens the directory at the specified path.  The directory's contents can be read with subsequent calls to fs_readdir().  When you are done with the directory handle, close it with fs_closedir(). \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPointer to the directory to create\n\n\n\n\n\n\nout_dir\n\n\nOn success, points to the directory handle\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nFS_ENOENT if the specified directory does not exist (no such file)\n\n\nOther nonzero on error.\n\n\n\n\nNotes\n\n\nUnlinking files from the directory while it is open may result in unpredictable behavior.  New files can be created inside the directory.\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_readdir \n\n\n   int\n   fs_readdir(struct fs_dir *dir, struct fs_dirent **out_dirent);\n\n\n\n\n\nReads the next entry in an open directory. \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndir\n\n\nThe directory handle to read from\n\n\n\n\n\n\nout_dirent\n\n\nOn success, points to the next child entry in the specified directory\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nFS_ENOENT if there are no more entries in the parent directory\n\n\nOther nonzero on error.\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_closedir \n\n\n   int\n   fs_closedir(struct fs_dir *dir);\n\n\n\n\n\nCloses the specified directory handle. \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndir\n\n\nPointer to the directory to close\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_dirent_name \n\n\n   int\n   fs_dirent_name(const struct fs_dirent *dirent, size_t max_len,\n     char *out_name, uint8_t *out_name_len);\n\n\n\n\n\nRetrieves the filename of the specified directory entry. \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirent\n\n\nPointer to the directory entry to query\n\n\n\n\n\n\nmax_len\n\n\nSize of the \"out_name\" character buffer\n\n\n\n\n\n\nout_name\n\n\nOn success, the entry's filename is written here; always null-terminated\n\n\n\n\n\n\nout_name_len\n\n\nOn success, contains the actual length of the filename, NOT including the null-terminator\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\nThe retrieved filename is always null-terminated.  To ensure enough space to hold the full filename plus a null-termintor, a destination buffer of size  (filename max length + 1) should be used.\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fs_dirent_is_dir \n\n\n   int\n   fs_dirent_is_dir(const struct fs_dirent *dirent);\n\n\n\n\n\nTells you whether the specified directory entry is a sub-directory or a regular file. \n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirent\n\n\nPointer to the directory entry to query\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n1: The entry is a directory\n\n\n0: The entry is a regular file.\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fsutil_read_file \n\n\n   int\n   fsutil_read_file(const char *path, uint32_t offset, uint32_t len, void *dst,\n                    uint32_t *out_len);\n\n\n\n\nCalls fs_open(), fs_read(), and fs_close() to open a file at the specified path, retrieve data from the file starting from the specified offset, and close the file and invalidate the file handle.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPointer to the directory entry to query\n\n\n\n\n\n\noffset\n\n\nPosition of the file's read pointer\n\n\n\n\n\n\nlen\n\n\nNumber of bytes to attempt to read\n\n\n\n\n\n\ndst\n\n\nDestination buffer to read into\n\n\n\n\n\n\nout_len\n\n\nOn success, the number of bytes actually read gets written here.  Pass null if you don't care.\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\nThis is a convenience function. You can use it if the file is small (caller has enough buffer space to hold all the file contents in memory).\n\n\nExample\n\n\n\n\nInsert the code snippet here\n\n\n\n\n\n\n\n fsutil_write_file \n\n\n   int\n   fsutil_write_file(const char *path, const void *data, uint32_t len);\n\n\n\n\nCalls fs_open(), fs_write(), and fs_close() to open a file at the specified path, write the supplied data to the current offset of the specified file handle, and close the file and invalidate the file handle.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPointer to the file to write to\n\n\n\n\n\n\ndata\n\n\nThe data to write\n\n\n\n\n\n\nlen\n\n\nThe number of bytes to write\n\n\n\n\n\n\n\n\nReturned values\n\n\n\n\n0 on success\n\n\nnonzero on failure\n\n\n\n\nNotes\n\n\n\n\nExample\n\n\n\n\nInsert the code snippet here", 
            "title": "File System Abstraction"
        }, 
        {
            "location": "/os/modules/filesystem/#filesystem", 
            "text": "Mynewt provides a Flash File System abstraction layer (fs) to allow you to swap out the default Newtron File System (nffs) with a different file system of your choice.", 
            "title": "Filesystem"
        }, 
        {
            "location": "/os/modules/filesystem/#description", 
            "text": "The default file system used in the Mynewt OS is the Newtron Flash File System (nffs). Hence the  nffs  egg description lists  libs/fs  as a dependency.   egg.name: libs/nffs\negg.vers: 0.1\negg.identities: NFFS\negg.deps:\n    - libs/os\n    - libs/fs\n    - libs/testutil\n    - hw/hal  If the user wishes to use a different flash file system (say, \"ownffs\"), the directory containing \"ownffs\" code must include the  egg.yml  file stating the dependency on  libs/fs  listed as shown above. \"ownffs\" uses the  libs/fs  API available in mynewt, thus minimizing changes to other parts of the project.  Note that this generic file system ( fs ) API does not expose any file system detection, initialization, and formatting functions. These function calls remain specific to the chosen file system. For example, Project Slinky uses the default Newtron File System (nffs) and therefore calls nffs_init() to initialize the nffs memory and data structures before any other file system operations are attempted. As shown below, the egg for Project Slinky includes the  libs/imgmgr  egg which in turn includes the  libs/bootutil  egg. The egg description for  libs/bootutil  specifies  fs/nffs  as a dependency.  \n    egg.name: project/slinky\n    egg.vers: 0.1\n    egg.deps:\n        - libs/os\n        - libs/console/full\n        - libs/shell\n        - libs/newtmgr\n        - libs/imgmgr\n        - sys/config\n        - sys/log\n        - sys/stats  \n    egg.name: libs/imgmgr\n    egg.vers: 0.1\n    egg.deps:\n        - libs/newtmgr\n        - libs/bootutil\n    egg.deps.FS:\n        - fs/fs\n    egg.cflags.FS: -DFS_PRESENT  \n    egg.name: libs/bootutil\n    egg.vers: 0.1 \n    egg.deps: \n        - fs/nffs\n        - libs/os \n        - libs/testutil\n        - hw/hal", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/filesystem/#data-structures", 
            "text": "", 
            "title": "Data Structures"
        }, 
        {
            "location": "/os/modules/filesystem/#api", 
            "text": "struct fs_file;  The functions available in this OS feature are:   fs_open  fs_close  fs_read  fs_write  fs_seek  fs_getpos  fs_filelen  fs_unlink  fs_rename  fs_mkdir  fs_opendir  fs_readdir  fs_closedir  fs_dirent_name  fs_dirent_is_dir   Additional file system utilities that bundle some of the basic functions above are:   fsutil_read_file  fsutil_write_file", 
            "title": "API"
        }, 
        {
            "location": "/os/modules/filesystem/#api-reference", 
            "text": "", 
            "title": "API Reference"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_open", 
            "text": "int\n    fs_open(const char *filename, uint8_t access_flags, struct fs_file **out_file);  Opens a file at the specified path.  The result of opening a nonexistent file depends on the access flags specified.  All intermediate directories must already exist.  The mode strings passed to fopen() map to fs_open()'s access flags as follows:       r   -  FS_ACCESS_READ\n     r+  -  FS_ACCESS_READ | FS_ACCESS_WRITE\n     w   -  FS_ACCESS_WRITE | FS_ACCESS_TRUNCATE\n     w+  -  FS_ACCESS_READ | FS_ACCESS_WRITE | FS_ACCESS_TRUNCATE\n     a   -  FS_ACCESS_WRITE | FS_ACCESS_APPEND\n     a+  -  FS_ACCESS_READ | FS_ACCESS_WRITE | FS_ACCESS_APPEND", 
            "title": " fs_open "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments", 
            "text": "Arguments  Description      filename  Pointer to the file created at the path of the specified filename    access_flags  Flags controlling file access; see above table    out_file  On success, a pointer to the newly-created file handle gets written here", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes", 
            "text": "There is no concept of current working directory. Therefore all file names should start with '/'.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_close", 
            "text": "int\n   fs_close(struct fs_file *file)  Closes the specified file and invalidates the file handle.  If the file has already been unlinked, and this is the last open handle to the file, this operation causes the file to be deleted from disk.", 
            "title": " fs_close "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_1", 
            "text": "Arguments  Description      file  Pointer to the file to close", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_1", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_1", 
            "text": "Don't use file handle after closing the file.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_1", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_read", 
            "text": "int\n   fs_read(struct fs_file *file, uint32_t len, void *out_data, uint32_t *out_len);  Reads data from the specified file.  If more data is requested than remains in the file, all available data is retrieved. Function returns in  out_len  the actual number of bytes read (less or equal to  len ).", 
            "title": " fs_read "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_2", 
            "text": "Arguments  Description      file  Pointer to the the file to read from    len  The number of bytes to attempt to read    out_data  The destination buffer to read into    out_len  On success, the number of bytes actually read gets written here.  Pass null if you don't care.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_2", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_2", 
            "text": "This type of short read results in a success return code.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_2", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_write", 
            "text": "int\n   fs_write(struct fs_file *file, const void *data, int len);  Writes the supplied data to the current offset of the specified file handle.", 
            "title": " fs_write "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_3", 
            "text": "Arguments  Description      file  Pointer to the file to write to    data  The data to write    len  The number of bytes to write", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_3", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_3", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_3", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_seek", 
            "text": "int\n   fs_seek(struct fs_file *file, uint32_t offset);  Positions a file's read and write pointer at the specified offset.  The offset is expressed as the number of bytes from the start of the file (i.e., seeking to offset 0 places the pointer at the first byte in the file).", 
            "title": " fs_seek "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_4", 
            "text": "Arguments  Description      file  Pointer to the file to reposition    offset  The 0-based file offset to seek to", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_4", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_4", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_4", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_getpos", 
            "text": "uint32_t\n   fs_getpos(const struct fs_file *file);  Retrieves the current read and write position of the specified open file.", 
            "title": " fs_getpos "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_5", 
            "text": "Arguments  Description      file  Pointer to the file to query", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_5", 
            "text": "The file offset, in bytes", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_5", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_5", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_filelen", 
            "text": "int\n   fs_filelen(const struct fs_file *file, uint32_t *out_len);  Retrieves the current length of the specified open file.", 
            "title": " fs_filelen "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_6", 
            "text": "Arguments  Description      file  Pointer to the file to query    out_len  On success, the number of bytes in the file gets written here", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_6", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_6", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_6", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_unlink", 
            "text": "int\n   fs_unlink(const char *filename);  Unlinks the file or directory at the specified path.  If the path refers to a directory, all the directory's descendants are recursively unlinked.  Any open file handles refering to an unlinked file remain valid, and can be read from and written to.", 
            "title": " fs_unlink "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_7", 
            "text": "Arguments  Description      filename  The path of the file or directory to unlink", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_7", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_7", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_7", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_rename", 
            "text": "int\n   fs_rename(const char *from, const char *to);  Performs a rename and / or move of the specified source path to the specified destination.", 
            "title": " fs_rename "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_8", 
            "text": "Arguments  Description      from  The source path    to  The destination path", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_8", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_8", 
            "text": "The source path can refer to either a file or a directory.  All intermediate directories in the destination path must already exist.  If the source path refers to a file, the destination path must contain a full filename path, rather than just the new parent directory.  If an object already exists at the specified destination path, this function causes it to be unlinked prior to the rename (i.e., the destination gets clobbered).", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_8", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_mkdir", 
            "text": "int\n   fs_mkdir(const char *path);  Creates the directory represented by the specified path.", 
            "title": " fs_mkdir "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_9", 
            "text": "Arguments  Description      path  Pointer to the directory to create", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_9", 
            "text": "0 on success  nonzero on failure.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_9", 
            "text": "All intermediate directories must already exist.  The specified path must start with a '/' character.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_9", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_opendir", 
            "text": "int\n   fs_opendir(const char *path, struct fs_dir **out_dir);  Opens the directory at the specified path.  The directory's contents can be read with subsequent calls to fs_readdir().  When you are done with the directory handle, close it with fs_closedir().", 
            "title": " fs_opendir "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_10", 
            "text": "Arguments  Description      path  Pointer to the directory to create    out_dir  On success, points to the directory handle", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_10", 
            "text": "0 on success  FS_ENOENT if the specified directory does not exist (no such file)  Other nonzero on error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_10", 
            "text": "Unlinking files from the directory while it is open may result in unpredictable behavior.  New files can be created inside the directory.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_10", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_readdir", 
            "text": "int\n   fs_readdir(struct fs_dir *dir, struct fs_dirent **out_dirent);  Reads the next entry in an open directory.", 
            "title": " fs_readdir "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_11", 
            "text": "Arguments  Description      dir  The directory handle to read from    out_dirent  On success, points to the next child entry in the specified directory", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_11", 
            "text": "0 on success  FS_ENOENT if there are no more entries in the parent directory  Other nonzero on error.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_11", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_11", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_closedir", 
            "text": "int\n   fs_closedir(struct fs_dir *dir);  Closes the specified directory handle.", 
            "title": " fs_closedir "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_12", 
            "text": "Arguments  Description      dir  Pointer to the directory to close", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_12", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_12", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_12", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_dirent_name", 
            "text": "int\n   fs_dirent_name(const struct fs_dirent *dirent, size_t max_len,\n     char *out_name, uint8_t *out_name_len);  Retrieves the filename of the specified directory entry.", 
            "title": " fs_dirent_name "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_13", 
            "text": "Arguments  Description      dirent  Pointer to the directory entry to query    max_len  Size of the \"out_name\" character buffer    out_name  On success, the entry's filename is written here; always null-terminated    out_name_len  On success, contains the actual length of the filename, NOT including the null-terminator", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_13", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_13", 
            "text": "The retrieved filename is always null-terminated.  To ensure enough space to hold the full filename plus a null-termintor, a destination buffer of size  (filename max length + 1) should be used.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_13", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fs_dirent_is_dir", 
            "text": "int\n   fs_dirent_is_dir(const struct fs_dirent *dirent);  Tells you whether the specified directory entry is a sub-directory or a regular file.", 
            "title": " fs_dirent_is_dir "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_14", 
            "text": "Arguments  Description      dirent  Pointer to the directory entry to query", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_14", 
            "text": "1: The entry is a directory  0: The entry is a regular file.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_14", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_14", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fsutil_read_file", 
            "text": "int\n   fsutil_read_file(const char *path, uint32_t offset, uint32_t len, void *dst,\n                    uint32_t *out_len);  Calls fs_open(), fs_read(), and fs_close() to open a file at the specified path, retrieve data from the file starting from the specified offset, and close the file and invalidate the file handle.", 
            "title": " fsutil_read_file "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_15", 
            "text": "Arguments  Description      path  Pointer to the directory entry to query    offset  Position of the file's read pointer    len  Number of bytes to attempt to read    dst  Destination buffer to read into    out_len  On success, the number of bytes actually read gets written here.  Pass null if you don't care.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_15", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_15", 
            "text": "This is a convenience function. You can use it if the file is small (caller has enough buffer space to hold all the file contents in memory).", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_15", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/filesystem/#fsutil_write_file", 
            "text": "int\n   fsutil_write_file(const char *path, const void *data, uint32_t len);  Calls fs_open(), fs_write(), and fs_close() to open a file at the specified path, write the supplied data to the current offset of the specified file handle, and close the file and invalidate the file handle.", 
            "title": " fsutil_write_file "
        }, 
        {
            "location": "/os/modules/filesystem/#arguments_16", 
            "text": "Arguments  Description      path  Pointer to the file to write to    data  The data to write    len  The number of bytes to write", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/filesystem/#returned-values_16", 
            "text": "0 on success  nonzero on failure", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/filesystem/#notes_16", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/filesystem/#example_16", 
            "text": "Insert the code snippet here", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/nffs/", 
            "text": "Newtron Flash Filesystem (nffs)\n\n\nMynewt comes with the flash file system called the Newtron Flash File System (nffs) which is designed with two priorities that makes it suitable for embedded use: \n\n\n\n\nMinimal RAM usage\n\n\nReliability\n\n\n\n\nMynewt also provides an abstraction layer API (fs) to allow you to swap out nffs with a different file system of your choice.\n\n\nDescription\n\n\nDescribe module here, special features, how pieces fit together etc.\n\n\nDisk and data structures\n\n\nAt the top level, an nffs disk is partitioned into areas.  An area is a region\nof disk with the following properties:\n\n\n\n\nAn area can be fully erased without affecting any other areas.\n\n\nA write to one area does not restrict writes to other areas.\n\n\n\n\nNote\n: Some flash hardware divides its memory space into \"blocks.\"  Writes within a block must be sequential, but writes to one block have no effect on what parts of other blocks can be written.  Thus, for flash hardware with such a restriction, each area must comprise a discrete number of blocks.\n\n\nWhile not strictly necessary, it is recommended that all areas have the same\nsize.\n\n\nOn disk, each area is prefixed with the following header:\n\n\n/** On-disk representation of an area header. */\nstruct nffs_disk_area {\n    uint32_t nda_magic[4];  /* NFFS_AREA_MAGIC{0,1,2,3} */\n    uint32_t nda_length;    /* Total size of area, in bytes. */\n    uint8_t nda_ver;        /* Current nffs version: 0 */\n    uint8_t nda_gc_seq;     /* Garbage collection count. */\n    uint8_t reserved8;\n    uint8_t nda_id;         /* 0xff if scratch area. */\n};\n\n\n\n\nBeyond its header, an area contains a sequence of disk objects, representing\nthe contents of the file system.  There are two types of objects: \ninodes\n and\n\ndata blocks\n.  An inode represents a file or directory; a data block represents\npart of a file's contents.\n\n\n/** On-disk representation of an inode (file or directory). */\nstruct nffs_disk_inode {\n    uint32_t ndi_magic;         /* NFFS_INODE_MAGIC */\n    uint32_t ndi_id;            /* Unique object ID. */\n    uint32_t ndi_seq;           /* Sequence number; greater supersedes\n                                   lesser. */\n    uint32_t ndi_parent_id;     /* Object ID of parent directory inode. */\n    uint8_t reserved8;\n    uint8_t ndi_filename_len;   /* Length of filename, in bytes. */\n    uint16_t ndi_crc16;         /* Covers rest of header and filename. */\n    /* Followed by filename. */\n};\n\n\n\n\nAn inode filename's length cannot exceed 256 bytes.  The filename is not\nnull-terminated.  The following ASCII characters are not allowed in a\nfilename:\n    * /  (slash character)\n    * \\0 (NUL character)\n\n\n/** On-disk representation of a data block. */\nstruct nffs_disk_block {\n    uint32_t ndb_magic;     /* NFFS_BLOCK_MAGIC */\n    uint32_t ndb_id;        /* Unique object ID. */\n    uint32_t ndb_seq;       /* Sequence number; greater supersedes lesser. */\n    uint32_t ndb_inode_id;  /* Object ID of owning inode. */\n    uint32_t ndb_prev_id;   /* Object ID of previous block in file;\n                               NFFS_ID_NONE if this is the first block. */\n    uint16_t ndb_data_len;  /* Length of data contents, in bytes. */\n    uint16_t ndb_crc16;     /* Covers rest of header and data. */\n    /* Followed by 'ndb_data_len' bytes of data. */\n};\n\n\n\n\nEach data block contains the ID of the previous data block in the file.\nTogether, the set of blocks in a file form a reverse singly-linked list.\n\n\nThe maximum number of data bytes that a block can contain is determined at\ninitialization-time.  The result is the greatest number which satisfies all of\nthe following restrictions:\n    o No more than 2048.\n    o At least two maximum-sized blocks can fit in the smallest area.\n\n\nThe 2048 number was chosen somewhat arbitrarily, and may change in the future.\n\n\nID space\n\n\nAll disk objects have a unique 32-bit ID.  The ID space is partitioned as\nfollows:\n      * 0x00000000 - 0x0fffffff: Directory inodes.\n      * 0x10000000 - 0x7fffffff: File inodes.\n      * 0x80000000 - 0xfffffffe: Data blocks.\n      * 0xffffffff             : Reserved (NFFS_ID_NONE)\n\n\nScratch area\n\n\nA valid nffs file system must contain a single \"scratch area.\"  The scratch\narea does not contain any objects of its own, and is only used during garbage\ncollection.  The scratch area must have a size greater than or equal to each\nof the other areas in flash.\n\n\nRAM representation\n\n\nEvery object in the file system is stored in a 256-entry hash table.  An\nobject's hash key is derived from its 32-bit ID.  Each list in the hash table\nis sorted by time of use; most-recently-used is at the front of the list. All\nobjects are represented by the following structure:\n\n\n/**\n * What gets stored in the hash table.  Each entry represents a data block or\n * an inode.\n */\nstruct nffs_hash_entry {\n    SLIST_ENTRY(nffs_hash_entry) nhe_next;\n    uint32_t nhe_id;        /* 0 - 0x7fffffff if inode; else if block. */\n    uint32_t nhe_flash_loc; /* Upper-byte = area idx; rest = area offset. */\n};\n\n\n\n\nFor each data block, the above structure is all that is stored in RAM.  To\nacquire more information about a data block, the block header must be read\nfrom flash.\n\n\nInodes require a fuller RAM representation to capture the structure of the\nfile system.  There are two types of inodes: \nfiles\n and \ndirectories\n.  Each\ninode hash entry is actually an instance of the following structure:\n\n\n/** Each inode hash entry is actually one of these. */\nstruct nffs_inode_entry {\n    struct nffs_hash_entry nie_hash_entry;\n    SLIST_ENTRY(nffs_inode_entry) nie_sibling_next;\n    union {\n        struct nffs_inode_list nie_child_list;           /* If directory */\n        struct nffs_hash_entry *nie_last_block_entry;    /* If file */\n    };\n    uint8_t nie_refcnt;\n};\n\n\n\n\nA directory inode contains a list of its child files and directories\n(fie_child_list).  These entries are sorted alphabetically using the ASCII\ncharacter set.\n\n\nA file inode contains a pointer to the last data block in the file\n(nie_last_block_entry).  For most file operations, the reversed block list must\nbe walked backwards.  This introduces a number of speed inefficiencies:\n    * All data blocks must be read to determine the length of the file.\n    * Data blocks often need to be processed sequentially.  The reversed\n      nature of the block list transforms this from linear time to an O(n^2)\n      operation.\n\n\nFurthermore, obtaining information about any constituent data block requires a\nseparate flash read.\n\n\nInode cache and Data Block cache\n\n\nThe speed issues are addressed by a pair of caches.  Cached inodes entries\ncontain the file length and a much more convenient doubly-linked list of\ncached data blocks.  The benefit of using caches is that the size of the\ncaches need not be proportional to the size of the file system.  In other\nwords, caches can address speed efficiency concerns without negatively\nimpacting the file system's scalability.\n\n\nnffs requires both caches during normal operation, so it is not possible to\ndisable them.  However, the cache sizes are configurable, and both caches can\nbe configured with a size of one if RAM usage must be minimized.\n\n\nThe following data structures are used in the inode and data block caches.\n\n\n/** Full data block representation; not stored permanently in RAM. */\nstruct nffs_block {\n    struct nffs_hash_entry *nb_hash_entry;   /* Points to real block entry. */\n    uint32_t nb_seq;                         /* Sequence number; greater\n                                                supersedes lesser. */\n    struct nffs_inode_entry *nb_inode_entry; /* Owning inode. */\n    struct nffs_hash_entry *nb_prev;         /* Previous block in file. */\n    uint16_t nb_data_len;                    /* # of data bytes in block. */\n    uint16_t reserved16;\n};\n\n/** Represents a single cached data block. */\nstruct nffs_cache_block {\n    TAILQ_ENTRY(nffs_cache_block) ncb_link; /* Next / prev cached block. */\n    struct nffs_block ncb_block;            /* Full data block. */\n    uint32_t ncb_file_offset;               /* File offset of this block. */\n};\n\n/** Full inode representation; not stored permanently in RAM. */\nstruct nffs_inode {\n    struct nffs_inode_entry *ni_inode_entry; /* Points to real inode entry. */\n    uint32_t ni_seq;                         /* Sequence number; greater\n                                                supersedes lesser. */\n    struct nffs_inode_entry *ni_parent;      /* Points to parent directory. */\n    uint8_t ni_filename_len;                 /* # chars in filename. */\n    uint8_t ni_filename[NFFS_SHORT_FILENAME_LEN]; /* First 3 bytes. */\n};\n\n/** Doubly-linked tail queue of cached blocks; contained in cached inodes. */\nTAILQ_HEAD(nffs_block_cache_list, nffs_block_cache_entry);\n\n/** Represents a single cached file inode. */\nstruct nffs_cache_inode {\n    TAILQ_ENTRY(nffs_cache_inode) nci_link;        /* Sorted; LRU at tail. */\n    struct nffs_inode nci_inode;                   /* Full inode. */\n    struct nffs_cache_block_list nci_block_list;   /* List of cached blocks. */\n    uint32_t nci_file_size;                        /* Total file size. */\n};\n\n\n\n\nOnly file inodes are cached; directory inodes are never cached.\n\n\nWithin a cached inode, all cached data blocks are contiguous.  E.g., if the\nstart and end of a file are cached, then the middle must also be cached.  A\ndata block is only cached if its owning file is also cached.\n\n\nInternally, cached inodes are stored in a singly-linked list, ordered by time\nof use.  The most-recently-used entry is the first element in the list.  If a\nnew inode needs to be cached, but the inode cache is full, the\nleast-recently-used entry is freed to make room for the new one.  The\nfollowing operations cause an inode to be cached:\n\n\n\n\nQuerying a file's length.\n\n\nSeeking within a file.\n\n\nReading from a file.\n\n\nWriting to a file.\n\n\n\n\nThe following operations cause a data block to be cached:\n\n\n\n\nReading from the block.\n\n\nWriting to the block.\n\n\n\n\nIf one of the above operations is applied to a data block that is not currently\ncached, nffs uses the following procedure to cache the necessary block:\n\n\n\n\nIf none of the owning inode's blocks are currently cached, allocate a\n       cached block entry corresponding to the requested block and insert it\n       into the inode's list.\n\n\nElse if the requested file offset is less than that of the first cached\n       block, bridge the gap between the inode's sequence of cached blocks and\n       the block that now needs to be cached.  This is accomplished by caching\n       each block in the gap, finishing with the requested block.\n\n\nElse (the requested offset is beyond the end of the cache),\n   a. If the requested offset belongs to the block that immediately follows the end of the cache, cache the block and append it to the list.\n   b. Else, clear the cache, and populate it with the single entry corresponding to the requested block.\n\n\n\n\nIf the system is unable to allocate a cached block entry at any point during\nthe above procedure, the system frees up other blocks currently in the cache. This is accomplished as follows:\n\n\n\n\nIterate the inode cache in reverse (i.e., start with the least-recently-used entry).  For each entry:\n   a. If the entry's cached block list is empty, advance to the next entry.\n   b. Else, free all the cached blocks in the entry's list.\n\n\n\n\nBecause the system imposes a minimum block cache size of one, the above\nprocedure will always reclaim at least one cache block entry.  The above\nprocedure may result in the freeing of the block list that belongs to the very\ninode being operated on.  This is OK, as the final block to get cached is\nalways the block being requested.\n\n\nConfiguration\n\n\nThe file system is configured by populating fields in a global structure.\nEach field in the structure corresponds to a setting.  All configuration must\nbe done prior to calling nffs_init().  The configuration structure is defined\nas follows:\n\n\n\nstruct nffs_config {\n    /** Maximum number of inodes; default=1024. */\n    uint32_t nc_num_inodes;\n\n    /** Maximum number of data blocks; default=4096. */\n    uint32_t nc_num_blocks;\n\n    /** Maximum number of open files; default=4. */\n    uint32_t nc_num_files;\n\n    /** Inode cache size; default=4. */\n    uint32_t nc_num_cache_inodes;\n\n    /** Data block cache size; default=64. */\n    uint32_t nc_num_cache_blocks;\n    };\n\nextern struct nffs_config nffs_config;\n\n\n\n\nAny fields that are set to 0 (or not set at all) inherit the corresponding\ndefault value.  This means that it is impossible to configure any setting with\na value of zero.\n\n\nInitialization\n\n\nThere are two means of initializing an nffs file system:\n\n\n\n\nRestore an existing file system via detection.\n\n\nCreate a new file system via formatting.\n\n\n\n\nBoth methods require the user to describe how the flash memory is divided into\nareas.  This is accomplished with an array of struct nffs_area_desc, defined as\nfollows:\n\n\nstruct nffs_area_desc {\n    uint32_t nad_offset;    /* Flash offset of start of area. */\n    uint32_t nad_length;    /* Size of area, in bytes. */\n};\n\n\n\n\nAn array of area descriptors is terminated by an entry with a fad_length field\nof 0.\n\n\nOne common initialization sequence is the following:\n\n\n\n\nDetect an nffs file system anywhere in flash.\n\n\nIf no file system detected, format a new file system in a specific\n        region of flash.\n\n\n\n\nDetection\n\n\nThe file system detection process consists of scanning a specified set of\nflash regions for valid nffs areas, and then populating the RAM representation\nof the file system with the detected objects.  Detection is initiated with the\nfollowing function:\n\n\n/**\n * Searches for a valid nffs file system among the specified areas.  This\n * function succeeds if a file system is detected among any subset of the\n * supplied areas.  If the area set does not contain a valid file system,\n * a new one can be created via a separate call to nffs_format().\n *\n * @param area_descs        The area set to search.  This array must be\n *                              terminated with a 0-length area.\n *\n * @return                  0 on success;\n *                          NFFS_ECORRUPT if no valid file system was detected;\n *                          other nonzero on error.\n */\nint nffs_detect(const struct nffs_area_desc *area_descs);\n\n\n\n\nAs indicated, not every area descriptor needs to reference a valid nffs area.\nDetection is successful as long as a complete file system is detected\nsomewhere in the specified regions of flash.  If an application is unsure\nwhere a file system might be located, it can initiate detection across the\nentire flash region.\n\n\nA detected file system is valid if:\n\n\n\n\nAt least one non-scratch area is present.\n\n\nAt least one scratch area is present (only the first gets used if there is more than one).\n\n\nThe root directory inode is present.\n\n\n\n\nDuring detection, each indicated region of flash is checked for a valid area\nheader.  The contents of each valid non-scratch area are then restored into\nthe nffs RAM representation.  The following procedure is applied to each object\nin the area:\n\n\n\n\n\n\nVerify the object's integrity via a crc16 check.  If invalid, the object is discarded and the procedure restarts on the next object in the area.\n\n\n\n\n\n\nConvert the disk object into its corresponding RAM representation and insert it into the hash table.  If the object is an inode, its reference count is initialized to 1, indicating ownership by its parent directory.\n\n\n\n\n\n\nIf an object with the same ID is already present, then one supersedes the other.  Accept the object with the greater sequence number and discard the other.\n\n\n\n\n\n\nIf the object references a nonexistant inode (parent directory in the case of an inode; owning file in the case of a data block), insert a temporary \"dummy\" inode into the hash table so that inter-object links can be maintained until the absent inode is eventually restored.  Dummy inodes are identified by a reference count of 0.\n\n\n\n\n\n\nIf a delete record for an inode is encountered, the inode's parent pointer is set to null to indicate that it should be removed from RAM.\n\n\n\n\n\n\nIf nffs encounters an object that cannot be identified (i.e., its magic number\nis not valid), it scans the remainder of the flash area for the next valid\nmagic number.  Upon encountering a valid object, nffs resumes the procedure\ndescribed above.\n\n\nAfter all areas have been restored, a sweep is performed across the entire RAM\nrepresentation so that invalid inodes can be deleted from memory.\n\n\nFor each directory inode:\n\n\n\n\nIf its reference count is 0 (i.e., it is a dummy), migrate its children to the /lost+found directory, and delete it from the RAM representation. This should only happen in the case of file system corruption.\n\n\nIf its parent reference is null (i.e., it was deleted), delete it and all its children from the RAM representation.\n\n\n\n\nFor each file inode:\n\n\n\n\nIf its reference count is 0 (i.e., it is a dummy), delete it from the RAM representation.  This should only happen in the case of file system corruption.  (We should try to migrate the file to the lost+found directory in this case, as mentioned in the todo section).\n\n\n\n\nWhen an object is deleted during this sweep, it is only deleted from the RAM\nrepresentation; nothing is written to disk.\n\n\nWhen objects are migrated to the lost+found directory, their parent inode\nreference is permanently updated on the disk.\n\n\nIn addition, a single scratch area is identified during the detection process.\nThe first area whose 'fda_id' value is set to 0xff is designated as the file\nsystem scratch area.  If no valid scratch area is found, the cause could be\nthat the system was restarted while a garbage collection cycle was in progress.\nSuch a condition is identified by the presence of two areas with the same ID.\nIn such a case, the shorter of the two areas is erased and designated as the\nscratch area.\n\n\nFormatting\n\n\nA new file system is created via formatting.  Formatting is achieved via the\nfollowing function:\n\n\n/**\n * Erases all the specified areas and initializes them with a clean nffs\n * file system.\n *\n * @param area_descs        The set of areas to format.\n *\n * @return                  0 on success;\n *                          nonzero on failure.\n */\nint nffs_format(const struct nffs_area_desc *area_descs);\n\n\n\n\nOn success, an area header is written to each of the specified locations.  The\nlargest area in the set is designated as the initial scratch area.\n\n\nFlash writes\n\n\nThe nffs implementation always writes in a strictly sequential fashion within an\narea.  For each area, the system keeps track of the current offset.  Whenever\nan object gets written to an area, it gets written to that area's current\noffset, and the offset is increased by the object's disk size.\n\n\nWhen a write needs to be performed, the nffs implementation selects the\nappropriate destination area by iterating though each area until one with\nsufficient free space is encountered.\n\n\nThere is no write buffering.  Each call to a write function results in a write\noperation being sent to the flash hardware.\n\n\nNew objects\n\n\nWhenever a new object is written to disk, it is assigned the following\nproperties:\n    * ID: A unique value is selected from the 32-bit ID space, as appropriate\n      for the object's type.\n    * Sequence number: 0\n\n\nWhen a new file or directory is created, a corresponding inode is written to\nflash.  Likewise, a new data block also results in the writing of a\ncorresponding disk object.\n\n\nMoving/Renaming files and directories\n\n\nWhen a file or directory is moved or renamed, its corresponding inode is\nrewritten to flash with the following properties:\n\n\n\n\nID: Unchanged\n\n\nSequence number: Previous value plus one.\n\n\nParent inode: As specified by the move / rename operation.\n\n\nFilename: As specified by the move / rename operation.\n\n\n\n\nBecause the inode's ID is unchanged, all dependent objects remain valid.\n\n\nUnlinking files and directories\n\n\nWhen a file or directory is unlinked from its parent directory, a deletion\nrecord for the unlinked inode gets written to flash.  The deletion record is an\ninode with the following properties:\n\n\n\n\nID: Unchanged\n\n\nSequence number: Previous value plus one.\n\n\nParent inode ID: NFFS_ID_NONE\n\n\n\n\nWhen an inode is unlinked, no deletion records need to be written for the\ninode's dependent objects (constituent data blocks or child inodes).  During\nthe next file system detection, it is recognized that the objects belong to\na deleted inode, so they are not restored into the RAM representation.\n\n\nIf a file has an open handle at the time it gets unlinked, application code\ncan continued to use the file handle to read and write data.  All files retain\na reference count, and a file isn't deleted from the RAM representation until\nits reference code drops to 0.  Any attempt to open an unlinked file fails,\neven if the file is referenced by other file handles.\n\n\nWriting to a file\n\n\nThe following procedure is used whenever the application code writes to a file.\nFirst, if the write operation specifies too much data to fit into a single\nblock, the operation is split into several separate write operations.  Then,\nfor each write operation:\n\n\n1. Determine which existing blocks the write operation overlaps (n = number of overwritten blocks).\n\n\n2. If n = 0, this is an append operation.  Write a data block with the following properties:\n\n\n\n\nID: New unique value.\n\n\nSequence number: 0.\n\n\n\n\n3. Else (n \n 1), this write overlaps existing data.\n\n\n(a) For each block in [1, 2, ... n-1], write a new block containing the updated contents.  Each new block supersedes the block it overwrites.  That is, each block has the following properties:\n\n\n\n\nID: Unchanged\n\n\nSequence number: Previous value plus one.\n\n\n\n\n(b) Write the nth block.  The nth block includes all appended data, if any.  As with the other blocks, its ID is unchanged and its sequence number is incremented.\n\n\nAppended data can only be written to the end of the file.  That is, \"holes\" are\nnot supported.\n\n\nGarbage collection\n\n\nWhen the file system is too full to accomodate a write operation, the system\nmust perform garbage collection to make room.  The garbage collection\nprocedure is described below:\n\n\n\n\n\n\nThe non-scratch area with the lowest garbage collection sequence number is selected as the \"source area.\"  If there are other areas with the same sequence number, the one with the smallest flash offset is selected. \n\n\n\n\n\n\nThe source area's ID is written to the scratch area's header, transforming it into a non-scratch ID.  This former scratch area is now known as the \"destination area.\"\n\n\n\n\n\n\nThe RAM representation is exhaustively searched for collectible objects.  The following procedure is applied to each inode in the system:\n\n\n\n\nIf the inode is resident in the source area, copy the inode record to the destination area.\n\n\nIf the inode is a file inode, walk the inode's list of data blocks, starting with the last block in the file.  Each block that is resident in the source area is copied to the destination area.  If there is a run of two or more blocks that are resident in the source area, they are consolidated and copied to the destination area as a single new block (subject to the maximum block size restriction).\n\n\n\n\n\n\n\n\nThe source area is reformatted as a scratch sector (i.e., is is fully erased, and its header is rewritten with an ID of 0xff).  The area's garbage collection sequence number is incremented prior to rewriting the header.  This area is now the new scratch sector.\n\n\n\n\n\n\nMiscellaneous measures\n\n\n\n\n\n\nRAM usage:\n\n\n\n\n24 bytes per inode\n\n\n12 bytes per data block\n\n\n36 bytes per inode cache entry\n\n\n32 bytes per data block cache entry\n\n\n\n\n\n\n\n\nMaximum filename size: 256 characters (no null terminator required)\n\n\n\n\nDisallowed filename characters: '/' and '\\0'\n\n\n\n\nFuture enhancements\n\n\n\n\nAPI function to traverse a directory.\n\n\nMigrate corrupt files to the /lost+found directory during restore, rather than discarding them from RAM.\n\n\nError correction.\n\n\nEncryption.\n\n\nCompression.", 
            "title": "Newtron Flash File System"
        }, 
        {
            "location": "/os/modules/nffs/#newtron-flash-filesystem-nffs", 
            "text": "Mynewt comes with the flash file system called the Newtron Flash File System (nffs) which is designed with two priorities that makes it suitable for embedded use:    Minimal RAM usage  Reliability   Mynewt also provides an abstraction layer API (fs) to allow you to swap out nffs with a different file system of your choice.", 
            "title": "Newtron Flash Filesystem (nffs)"
        }, 
        {
            "location": "/os/modules/nffs/#description", 
            "text": "Describe module here, special features, how pieces fit together etc.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/nffs/#disk-and-data-structures", 
            "text": "At the top level, an nffs disk is partitioned into areas.  An area is a region\nof disk with the following properties:   An area can be fully erased without affecting any other areas.  A write to one area does not restrict writes to other areas.   Note : Some flash hardware divides its memory space into \"blocks.\"  Writes within a block must be sequential, but writes to one block have no effect on what parts of other blocks can be written.  Thus, for flash hardware with such a restriction, each area must comprise a discrete number of blocks.  While not strictly necessary, it is recommended that all areas have the same\nsize.  On disk, each area is prefixed with the following header:  /** On-disk representation of an area header. */\nstruct nffs_disk_area {\n    uint32_t nda_magic[4];  /* NFFS_AREA_MAGIC{0,1,2,3} */\n    uint32_t nda_length;    /* Total size of area, in bytes. */\n    uint8_t nda_ver;        /* Current nffs version: 0 */\n    uint8_t nda_gc_seq;     /* Garbage collection count. */\n    uint8_t reserved8;\n    uint8_t nda_id;         /* 0xff if scratch area. */\n};  Beyond its header, an area contains a sequence of disk objects, representing\nthe contents of the file system.  There are two types of objects:  inodes  and data blocks .  An inode represents a file or directory; a data block represents\npart of a file's contents.  /** On-disk representation of an inode (file or directory). */\nstruct nffs_disk_inode {\n    uint32_t ndi_magic;         /* NFFS_INODE_MAGIC */\n    uint32_t ndi_id;            /* Unique object ID. */\n    uint32_t ndi_seq;           /* Sequence number; greater supersedes\n                                   lesser. */\n    uint32_t ndi_parent_id;     /* Object ID of parent directory inode. */\n    uint8_t reserved8;\n    uint8_t ndi_filename_len;   /* Length of filename, in bytes. */\n    uint16_t ndi_crc16;         /* Covers rest of header and filename. */\n    /* Followed by filename. */\n};  An inode filename's length cannot exceed 256 bytes.  The filename is not\nnull-terminated.  The following ASCII characters are not allowed in a\nfilename:\n    * /  (slash character)\n    * \\0 (NUL character)  /** On-disk representation of a data block. */\nstruct nffs_disk_block {\n    uint32_t ndb_magic;     /* NFFS_BLOCK_MAGIC */\n    uint32_t ndb_id;        /* Unique object ID. */\n    uint32_t ndb_seq;       /* Sequence number; greater supersedes lesser. */\n    uint32_t ndb_inode_id;  /* Object ID of owning inode. */\n    uint32_t ndb_prev_id;   /* Object ID of previous block in file;\n                               NFFS_ID_NONE if this is the first block. */\n    uint16_t ndb_data_len;  /* Length of data contents, in bytes. */\n    uint16_t ndb_crc16;     /* Covers rest of header and data. */\n    /* Followed by 'ndb_data_len' bytes of data. */\n};  Each data block contains the ID of the previous data block in the file.\nTogether, the set of blocks in a file form a reverse singly-linked list.  The maximum number of data bytes that a block can contain is determined at\ninitialization-time.  The result is the greatest number which satisfies all of\nthe following restrictions:\n    o No more than 2048.\n    o At least two maximum-sized blocks can fit in the smallest area.  The 2048 number was chosen somewhat arbitrarily, and may change in the future.", 
            "title": "Disk and data structures"
        }, 
        {
            "location": "/os/modules/nffs/#id-space", 
            "text": "All disk objects have a unique 32-bit ID.  The ID space is partitioned as\nfollows:\n      * 0x00000000 - 0x0fffffff: Directory inodes.\n      * 0x10000000 - 0x7fffffff: File inodes.\n      * 0x80000000 - 0xfffffffe: Data blocks.\n      * 0xffffffff             : Reserved (NFFS_ID_NONE)", 
            "title": "ID space"
        }, 
        {
            "location": "/os/modules/nffs/#scratch-area", 
            "text": "A valid nffs file system must contain a single \"scratch area.\"  The scratch\narea does not contain any objects of its own, and is only used during garbage\ncollection.  The scratch area must have a size greater than or equal to each\nof the other areas in flash.", 
            "title": "Scratch area"
        }, 
        {
            "location": "/os/modules/nffs/#ram-representation", 
            "text": "Every object in the file system is stored in a 256-entry hash table.  An\nobject's hash key is derived from its 32-bit ID.  Each list in the hash table\nis sorted by time of use; most-recently-used is at the front of the list. All\nobjects are represented by the following structure:  /**\n * What gets stored in the hash table.  Each entry represents a data block or\n * an inode.\n */\nstruct nffs_hash_entry {\n    SLIST_ENTRY(nffs_hash_entry) nhe_next;\n    uint32_t nhe_id;        /* 0 - 0x7fffffff if inode; else if block. */\n    uint32_t nhe_flash_loc; /* Upper-byte = area idx; rest = area offset. */\n};  For each data block, the above structure is all that is stored in RAM.  To\nacquire more information about a data block, the block header must be read\nfrom flash.  Inodes require a fuller RAM representation to capture the structure of the\nfile system.  There are two types of inodes:  files  and  directories .  Each\ninode hash entry is actually an instance of the following structure:  /** Each inode hash entry is actually one of these. */\nstruct nffs_inode_entry {\n    struct nffs_hash_entry nie_hash_entry;\n    SLIST_ENTRY(nffs_inode_entry) nie_sibling_next;\n    union {\n        struct nffs_inode_list nie_child_list;           /* If directory */\n        struct nffs_hash_entry *nie_last_block_entry;    /* If file */\n    };\n    uint8_t nie_refcnt;\n};  A directory inode contains a list of its child files and directories\n(fie_child_list).  These entries are sorted alphabetically using the ASCII\ncharacter set.  A file inode contains a pointer to the last data block in the file\n(nie_last_block_entry).  For most file operations, the reversed block list must\nbe walked backwards.  This introduces a number of speed inefficiencies:\n    * All data blocks must be read to determine the length of the file.\n    * Data blocks often need to be processed sequentially.  The reversed\n      nature of the block list transforms this from linear time to an O(n^2)\n      operation.  Furthermore, obtaining information about any constituent data block requires a\nseparate flash read.", 
            "title": "RAM representation"
        }, 
        {
            "location": "/os/modules/nffs/#inode-cache-and-data-block-cache", 
            "text": "The speed issues are addressed by a pair of caches.  Cached inodes entries\ncontain the file length and a much more convenient doubly-linked list of\ncached data blocks.  The benefit of using caches is that the size of the\ncaches need not be proportional to the size of the file system.  In other\nwords, caches can address speed efficiency concerns without negatively\nimpacting the file system's scalability.  nffs requires both caches during normal operation, so it is not possible to\ndisable them.  However, the cache sizes are configurable, and both caches can\nbe configured with a size of one if RAM usage must be minimized.  The following data structures are used in the inode and data block caches.  /** Full data block representation; not stored permanently in RAM. */\nstruct nffs_block {\n    struct nffs_hash_entry *nb_hash_entry;   /* Points to real block entry. */\n    uint32_t nb_seq;                         /* Sequence number; greater\n                                                supersedes lesser. */\n    struct nffs_inode_entry *nb_inode_entry; /* Owning inode. */\n    struct nffs_hash_entry *nb_prev;         /* Previous block in file. */\n    uint16_t nb_data_len;                    /* # of data bytes in block. */\n    uint16_t reserved16;\n};\n\n/** Represents a single cached data block. */\nstruct nffs_cache_block {\n    TAILQ_ENTRY(nffs_cache_block) ncb_link; /* Next / prev cached block. */\n    struct nffs_block ncb_block;            /* Full data block. */\n    uint32_t ncb_file_offset;               /* File offset of this block. */\n};\n\n/** Full inode representation; not stored permanently in RAM. */\nstruct nffs_inode {\n    struct nffs_inode_entry *ni_inode_entry; /* Points to real inode entry. */\n    uint32_t ni_seq;                         /* Sequence number; greater\n                                                supersedes lesser. */\n    struct nffs_inode_entry *ni_parent;      /* Points to parent directory. */\n    uint8_t ni_filename_len;                 /* # chars in filename. */\n    uint8_t ni_filename[NFFS_SHORT_FILENAME_LEN]; /* First 3 bytes. */\n};\n\n/** Doubly-linked tail queue of cached blocks; contained in cached inodes. */\nTAILQ_HEAD(nffs_block_cache_list, nffs_block_cache_entry);\n\n/** Represents a single cached file inode. */\nstruct nffs_cache_inode {\n    TAILQ_ENTRY(nffs_cache_inode) nci_link;        /* Sorted; LRU at tail. */\n    struct nffs_inode nci_inode;                   /* Full inode. */\n    struct nffs_cache_block_list nci_block_list;   /* List of cached blocks. */\n    uint32_t nci_file_size;                        /* Total file size. */\n};  Only file inodes are cached; directory inodes are never cached.  Within a cached inode, all cached data blocks are contiguous.  E.g., if the\nstart and end of a file are cached, then the middle must also be cached.  A\ndata block is only cached if its owning file is also cached.  Internally, cached inodes are stored in a singly-linked list, ordered by time\nof use.  The most-recently-used entry is the first element in the list.  If a\nnew inode needs to be cached, but the inode cache is full, the\nleast-recently-used entry is freed to make room for the new one.  The\nfollowing operations cause an inode to be cached:   Querying a file's length.  Seeking within a file.  Reading from a file.  Writing to a file.   The following operations cause a data block to be cached:   Reading from the block.  Writing to the block.   If one of the above operations is applied to a data block that is not currently\ncached, nffs uses the following procedure to cache the necessary block:   If none of the owning inode's blocks are currently cached, allocate a\n       cached block entry corresponding to the requested block and insert it\n       into the inode's list.  Else if the requested file offset is less than that of the first cached\n       block, bridge the gap between the inode's sequence of cached blocks and\n       the block that now needs to be cached.  This is accomplished by caching\n       each block in the gap, finishing with the requested block.  Else (the requested offset is beyond the end of the cache),\n   a. If the requested offset belongs to the block that immediately follows the end of the cache, cache the block and append it to the list.\n   b. Else, clear the cache, and populate it with the single entry corresponding to the requested block.   If the system is unable to allocate a cached block entry at any point during\nthe above procedure, the system frees up other blocks currently in the cache. This is accomplished as follows:   Iterate the inode cache in reverse (i.e., start with the least-recently-used entry).  For each entry:\n   a. If the entry's cached block list is empty, advance to the next entry.\n   b. Else, free all the cached blocks in the entry's list.   Because the system imposes a minimum block cache size of one, the above\nprocedure will always reclaim at least one cache block entry.  The above\nprocedure may result in the freeing of the block list that belongs to the very\ninode being operated on.  This is OK, as the final block to get cached is\nalways the block being requested.", 
            "title": "Inode cache and Data Block cache"
        }, 
        {
            "location": "/os/modules/nffs/#configuration", 
            "text": "The file system is configured by populating fields in a global structure.\nEach field in the structure corresponds to a setting.  All configuration must\nbe done prior to calling nffs_init().  The configuration structure is defined\nas follows:  \nstruct nffs_config {\n    /** Maximum number of inodes; default=1024. */\n    uint32_t nc_num_inodes;\n\n    /** Maximum number of data blocks; default=4096. */\n    uint32_t nc_num_blocks;\n\n    /** Maximum number of open files; default=4. */\n    uint32_t nc_num_files;\n\n    /** Inode cache size; default=4. */\n    uint32_t nc_num_cache_inodes;\n\n    /** Data block cache size; default=64. */\n    uint32_t nc_num_cache_blocks;\n    };\n\nextern struct nffs_config nffs_config;  Any fields that are set to 0 (or not set at all) inherit the corresponding\ndefault value.  This means that it is impossible to configure any setting with\na value of zero.", 
            "title": "Configuration"
        }, 
        {
            "location": "/os/modules/nffs/#initialization", 
            "text": "There are two means of initializing an nffs file system:   Restore an existing file system via detection.  Create a new file system via formatting.   Both methods require the user to describe how the flash memory is divided into\nareas.  This is accomplished with an array of struct nffs_area_desc, defined as\nfollows:  struct nffs_area_desc {\n    uint32_t nad_offset;    /* Flash offset of start of area. */\n    uint32_t nad_length;    /* Size of area, in bytes. */\n};  An array of area descriptors is terminated by an entry with a fad_length field\nof 0.  One common initialization sequence is the following:   Detect an nffs file system anywhere in flash.  If no file system detected, format a new file system in a specific\n        region of flash.", 
            "title": "Initialization"
        }, 
        {
            "location": "/os/modules/nffs/#detection", 
            "text": "The file system detection process consists of scanning a specified set of\nflash regions for valid nffs areas, and then populating the RAM representation\nof the file system with the detected objects.  Detection is initiated with the\nfollowing function:  /**\n * Searches for a valid nffs file system among the specified areas.  This\n * function succeeds if a file system is detected among any subset of the\n * supplied areas.  If the area set does not contain a valid file system,\n * a new one can be created via a separate call to nffs_format().\n *\n * @param area_descs        The area set to search.  This array must be\n *                              terminated with a 0-length area.\n *\n * @return                  0 on success;\n *                          NFFS_ECORRUPT if no valid file system was detected;\n *                          other nonzero on error.\n */\nint nffs_detect(const struct nffs_area_desc *area_descs);  As indicated, not every area descriptor needs to reference a valid nffs area.\nDetection is successful as long as a complete file system is detected\nsomewhere in the specified regions of flash.  If an application is unsure\nwhere a file system might be located, it can initiate detection across the\nentire flash region.  A detected file system is valid if:   At least one non-scratch area is present.  At least one scratch area is present (only the first gets used if there is more than one).  The root directory inode is present.   During detection, each indicated region of flash is checked for a valid area\nheader.  The contents of each valid non-scratch area are then restored into\nthe nffs RAM representation.  The following procedure is applied to each object\nin the area:    Verify the object's integrity via a crc16 check.  If invalid, the object is discarded and the procedure restarts on the next object in the area.    Convert the disk object into its corresponding RAM representation and insert it into the hash table.  If the object is an inode, its reference count is initialized to 1, indicating ownership by its parent directory.    If an object with the same ID is already present, then one supersedes the other.  Accept the object with the greater sequence number and discard the other.    If the object references a nonexistant inode (parent directory in the case of an inode; owning file in the case of a data block), insert a temporary \"dummy\" inode into the hash table so that inter-object links can be maintained until the absent inode is eventually restored.  Dummy inodes are identified by a reference count of 0.    If a delete record for an inode is encountered, the inode's parent pointer is set to null to indicate that it should be removed from RAM.    If nffs encounters an object that cannot be identified (i.e., its magic number\nis not valid), it scans the remainder of the flash area for the next valid\nmagic number.  Upon encountering a valid object, nffs resumes the procedure\ndescribed above.  After all areas have been restored, a sweep is performed across the entire RAM\nrepresentation so that invalid inodes can be deleted from memory.  For each directory inode:   If its reference count is 0 (i.e., it is a dummy), migrate its children to the /lost+found directory, and delete it from the RAM representation. This should only happen in the case of file system corruption.  If its parent reference is null (i.e., it was deleted), delete it and all its children from the RAM representation.   For each file inode:   If its reference count is 0 (i.e., it is a dummy), delete it from the RAM representation.  This should only happen in the case of file system corruption.  (We should try to migrate the file to the lost+found directory in this case, as mentioned in the todo section).   When an object is deleted during this sweep, it is only deleted from the RAM\nrepresentation; nothing is written to disk.  When objects are migrated to the lost+found directory, their parent inode\nreference is permanently updated on the disk.  In addition, a single scratch area is identified during the detection process.\nThe first area whose 'fda_id' value is set to 0xff is designated as the file\nsystem scratch area.  If no valid scratch area is found, the cause could be\nthat the system was restarted while a garbage collection cycle was in progress.\nSuch a condition is identified by the presence of two areas with the same ID.\nIn such a case, the shorter of the two areas is erased and designated as the\nscratch area.", 
            "title": "Detection"
        }, 
        {
            "location": "/os/modules/nffs/#formatting", 
            "text": "A new file system is created via formatting.  Formatting is achieved via the\nfollowing function:  /**\n * Erases all the specified areas and initializes them with a clean nffs\n * file system.\n *\n * @param area_descs        The set of areas to format.\n *\n * @return                  0 on success;\n *                          nonzero on failure.\n */\nint nffs_format(const struct nffs_area_desc *area_descs);  On success, an area header is written to each of the specified locations.  The\nlargest area in the set is designated as the initial scratch area.", 
            "title": "Formatting"
        }, 
        {
            "location": "/os/modules/nffs/#flash-writes", 
            "text": "The nffs implementation always writes in a strictly sequential fashion within an\narea.  For each area, the system keeps track of the current offset.  Whenever\nan object gets written to an area, it gets written to that area's current\noffset, and the offset is increased by the object's disk size.  When a write needs to be performed, the nffs implementation selects the\nappropriate destination area by iterating though each area until one with\nsufficient free space is encountered.  There is no write buffering.  Each call to a write function results in a write\noperation being sent to the flash hardware.", 
            "title": "Flash writes"
        }, 
        {
            "location": "/os/modules/nffs/#new-objects", 
            "text": "Whenever a new object is written to disk, it is assigned the following\nproperties:\n    * ID: A unique value is selected from the 32-bit ID space, as appropriate\n      for the object's type.\n    * Sequence number: 0  When a new file or directory is created, a corresponding inode is written to\nflash.  Likewise, a new data block also results in the writing of a\ncorresponding disk object.", 
            "title": "New objects"
        }, 
        {
            "location": "/os/modules/nffs/#movingrenaming-files-and-directories", 
            "text": "When a file or directory is moved or renamed, its corresponding inode is\nrewritten to flash with the following properties:   ID: Unchanged  Sequence number: Previous value plus one.  Parent inode: As specified by the move / rename operation.  Filename: As specified by the move / rename operation.   Because the inode's ID is unchanged, all dependent objects remain valid.", 
            "title": "Moving/Renaming files and directories"
        }, 
        {
            "location": "/os/modules/nffs/#unlinking-files-and-directories", 
            "text": "When a file or directory is unlinked from its parent directory, a deletion\nrecord for the unlinked inode gets written to flash.  The deletion record is an\ninode with the following properties:   ID: Unchanged  Sequence number: Previous value plus one.  Parent inode ID: NFFS_ID_NONE   When an inode is unlinked, no deletion records need to be written for the\ninode's dependent objects (constituent data blocks or child inodes).  During\nthe next file system detection, it is recognized that the objects belong to\na deleted inode, so they are not restored into the RAM representation.  If a file has an open handle at the time it gets unlinked, application code\ncan continued to use the file handle to read and write data.  All files retain\na reference count, and a file isn't deleted from the RAM representation until\nits reference code drops to 0.  Any attempt to open an unlinked file fails,\neven if the file is referenced by other file handles.", 
            "title": "Unlinking files and directories"
        }, 
        {
            "location": "/os/modules/nffs/#writing-to-a-file", 
            "text": "The following procedure is used whenever the application code writes to a file.\nFirst, if the write operation specifies too much data to fit into a single\nblock, the operation is split into several separate write operations.  Then,\nfor each write operation:  1. Determine which existing blocks the write operation overlaps (n = number of overwritten blocks).  2. If n = 0, this is an append operation.  Write a data block with the following properties:   ID: New unique value.  Sequence number: 0.   3. Else (n   1), this write overlaps existing data.  (a) For each block in [1, 2, ... n-1], write a new block containing the updated contents.  Each new block supersedes the block it overwrites.  That is, each block has the following properties:   ID: Unchanged  Sequence number: Previous value plus one.   (b) Write the nth block.  The nth block includes all appended data, if any.  As with the other blocks, its ID is unchanged and its sequence number is incremented.  Appended data can only be written to the end of the file.  That is, \"holes\" are\nnot supported.", 
            "title": "Writing to a file"
        }, 
        {
            "location": "/os/modules/nffs/#garbage-collection", 
            "text": "When the file system is too full to accomodate a write operation, the system\nmust perform garbage collection to make room.  The garbage collection\nprocedure is described below:    The non-scratch area with the lowest garbage collection sequence number is selected as the \"source area.\"  If there are other areas with the same sequence number, the one with the smallest flash offset is selected.     The source area's ID is written to the scratch area's header, transforming it into a non-scratch ID.  This former scratch area is now known as the \"destination area.\"    The RAM representation is exhaustively searched for collectible objects.  The following procedure is applied to each inode in the system:   If the inode is resident in the source area, copy the inode record to the destination area.  If the inode is a file inode, walk the inode's list of data blocks, starting with the last block in the file.  Each block that is resident in the source area is copied to the destination area.  If there is a run of two or more blocks that are resident in the source area, they are consolidated and copied to the destination area as a single new block (subject to the maximum block size restriction).     The source area is reformatted as a scratch sector (i.e., is is fully erased, and its header is rewritten with an ID of 0xff).  The area's garbage collection sequence number is incremented prior to rewriting the header.  This area is now the new scratch sector.", 
            "title": "Garbage collection"
        }, 
        {
            "location": "/os/modules/nffs/#miscellaneous-measures", 
            "text": "RAM usage:   24 bytes per inode  12 bytes per data block  36 bytes per inode cache entry  32 bytes per data block cache entry     Maximum filename size: 256 characters (no null terminator required)   Disallowed filename characters: '/' and '\\0'", 
            "title": "Miscellaneous measures"
        }, 
        {
            "location": "/os/modules/nffs/#future-enhancements", 
            "text": "API function to traverse a directory.  Migrate corrupt files to the /lost+found directory during restore, rather than discarding them from RAM.  Error correction.  Encryption.  Compression.", 
            "title": "Future enhancements"
        }, 
        {
            "location": "/os/modules/hal/hal/", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/hal/hal_gpio/", 
            "text": "", 
            "title": "GPIO"
        }, 
        {
            "location": "/os/modules/hal/hal_flash/", 
            "text": "", 
            "title": "Flash memory"
        }, 
        {
            "location": "/os/modules/hal/hal_cpu_timer/", 
            "text": "", 
            "title": "CPU timer"
        }, 
        {
            "location": "/os/modules/hal/hal_uart/", 
            "text": "", 
            "title": "UART"
        }, 
        {
            "location": "/os/modules/hal/hal_sys/", 
            "text": "", 
            "title": "System"
        }, 
        {
            "location": "/os/modules/testutil/testutil/", 
            "text": "testutil\n\n\nThe testutil package is a test framework that provides facilities for specifying test cases and recording test results.\n\n\nYou would use it to build regression tests for your library.\n\n\nDescription\n\n\nA package may optionally contain a set of test cases.  Test cases are not normally compiled and linked when a package is built; they are only included\nwhen the \"test\" identity is specified.  All of a package's test code goes in its \nsrc/test\n directory.  For example, the nffs package's test code is located in the following directory:\n\n\n    * fs/nffs/src/test/\n\n\n\n\nThis directory contains the source and header files that implement the nffs test code.\n\n\nThe test code has access to all the header files in the following directories:\n\n\n    * src\n    * src/arch/\ntarget-arch\n\n    * include\n    * src/test\n    * src/test/arch/\ntarget-arch\n\n    * include directories of all package dependencies\n\n\n\n\nPackage test code typically depends on the testutil package, described later in this document.  If a package's test code uses testutil, then the package itself needs to have testutil in its dependency list.\n\n\nSome test cases or test initialization code may be platform-specific.  In such cases, the platform-specific function definitions are placed in arch subdirectories within the package test directory.\n\n\nWhile building the test code (i.e., when the \ntest\n identity is specified), the newt tool defines the \nTEST\n macro.  This macro is defined during compilation of all C source files in all projects and packages.\n\n\nTests are structured according to the following hierarchy:\n\n\n                [test]\n               /      \\\n        [suite]        [suite]\n       /       \\      /       \\\n     [case] [case]  [case] [case]\n\n\n\n\nI.e., a test consists of test suites, and a test suite consists of test cases.\n\n\nThe test code uses testutil to define test suites and test cases.\n\n\nRegression test can then be executed using 'newt target test' command, or by including a call to your test suite from \nproject/test/src/test.c\n.\n\n\nExample\n\n\nThe following example demonstrates how to create a simple test suite.\n\n\n    TEST_CASE(test_addition)\n    {\n        int sum;\n\n        sum = 5 + 10;\n        TEST_ASSERT(sum == 15, \nactual value: %d\n, sum);\n    }\n\n    TEST_CASE(test_times_0)\n    {\n        TEST_ASSERT(3 * 0 == 0);\n        TEST_ASSERT(4 * 0 == 0);\n        TEST_ASSERT(712 * 0 == 0);\n    }\n\n    TEST_SUITE(test_suite_arithmetic)\n    {\n        test_addition();\n        test_times_0();\n    }\n\n\n\n\nThe test suite would then be executed via a call to \ntest_suite_arithmetic()\n.\n\n\nData structures\n\n\nstruct tu_config {\n    int tc_print_results;\n    int tc_system_assert;\n\n    tu_case_init_fn_t *tc_case_init_cb;\n    void *tc_case_init_arg;\n\n    tu_case_report_fn_t *tc_case_fail_cb;\n    void *tc_case_fail_arg;\n\n    tu_case_report_fn_t *tc_case_pass_cb;\n    void *tc_case_pass_arg;\n\n    tu_suite_init_fn_t *tc_suite_init_cb;\n    void *tc_suite_init_arg;\n\n    tu_restart_fn_t *tc_restart_cb;\n    void *tc_restart_arg;\n};\nextern struct tu_config tu_config;\n\n\n\n\nThe global \ntu_config\n struct contains all the testutil package's settings.\nThis should be populated before \ntu_init()\n is called.\n\n\nList of Functions\n\n\n\n\nThe functions, and macros available in testutil are:\n\n\n\n\ntu_init\n\n\nTEST_ASSERT\n\n\nTEST_PASS\n\n\nTEST_SUITE\n\n\nTEST_CASE\n\n\ntu_restart", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/testutil/testutil/#testutil", 
            "text": "The testutil package is a test framework that provides facilities for specifying test cases and recording test results.  You would use it to build regression tests for your library.", 
            "title": "testutil"
        }, 
        {
            "location": "/os/modules/testutil/testutil/#description", 
            "text": "A package may optionally contain a set of test cases.  Test cases are not normally compiled and linked when a package is built; they are only included\nwhen the \"test\" identity is specified.  All of a package's test code goes in its  src/test  directory.  For example, the nffs package's test code is located in the following directory:      * fs/nffs/src/test/  This directory contains the source and header files that implement the nffs test code.  The test code has access to all the header files in the following directories:      * src\n    * src/arch/ target-arch \n    * include\n    * src/test\n    * src/test/arch/ target-arch \n    * include directories of all package dependencies  Package test code typically depends on the testutil package, described later in this document.  If a package's test code uses testutil, then the package itself needs to have testutil in its dependency list.  Some test cases or test initialization code may be platform-specific.  In such cases, the platform-specific function definitions are placed in arch subdirectories within the package test directory.  While building the test code (i.e., when the  test  identity is specified), the newt tool defines the  TEST  macro.  This macro is defined during compilation of all C source files in all projects and packages.  Tests are structured according to the following hierarchy:                  [test]\n               /      \\\n        [suite]        [suite]\n       /       \\      /       \\\n     [case] [case]  [case] [case]  I.e., a test consists of test suites, and a test suite consists of test cases.  The test code uses testutil to define test suites and test cases.  Regression test can then be executed using 'newt target test' command, or by including a call to your test suite from  project/test/src/test.c .", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/testutil/testutil/#example", 
            "text": "The following example demonstrates how to create a simple test suite.      TEST_CASE(test_addition)\n    {\n        int sum;\n\n        sum = 5 + 10;\n        TEST_ASSERT(sum == 15,  actual value: %d , sum);\n    }\n\n    TEST_CASE(test_times_0)\n    {\n        TEST_ASSERT(3 * 0 == 0);\n        TEST_ASSERT(4 * 0 == 0);\n        TEST_ASSERT(712 * 0 == 0);\n    }\n\n    TEST_SUITE(test_suite_arithmetic)\n    {\n        test_addition();\n        test_times_0();\n    }  The test suite would then be executed via a call to  test_suite_arithmetic() .", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/testutil/testutil/#data-structures", 
            "text": "struct tu_config {\n    int tc_print_results;\n    int tc_system_assert;\n\n    tu_case_init_fn_t *tc_case_init_cb;\n    void *tc_case_init_arg;\n\n    tu_case_report_fn_t *tc_case_fail_cb;\n    void *tc_case_fail_arg;\n\n    tu_case_report_fn_t *tc_case_pass_cb;\n    void *tc_case_pass_arg;\n\n    tu_suite_init_fn_t *tc_suite_init_cb;\n    void *tc_suite_init_arg;\n\n    tu_restart_fn_t *tc_restart_cb;\n    void *tc_restart_arg;\n};\nextern struct tu_config tu_config;  The global  tu_config  struct contains all the testutil package's settings.\nThis should be populated before  tu_init()  is called.", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/testutil/testutil/#list-of-functions", 
            "text": "The functions, and macros available in testutil are:   tu_init  TEST_ASSERT  TEST_PASS  TEST_SUITE  TEST_CASE  tu_restart", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/testutil/tu_init/", 
            "text": "tu_init\n\n\nint tu_init(void)\n\n\n\n\nInitializes the test framework according to the contents of the \ntu_config\n struct. This function must be called before any tests are run.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nReturns 0 on success; nonzero on failure.\n\n\nExample\n\n\nHere's an example of stand-alone code which allows the user to execute regression tests for sys/config package only.\n\n\n#ifdef PKG_TEST\n\nint\nmain(int argc, char **argv)\n{\n    tu_config.tc_print_results = 1;\n    tu_init();\n\n    conf_init();\n    config_test_all();\n\n    return tu_any_failed;\n}\n\n#endif", 
            "title": "tu_init"
        }, 
        {
            "location": "/os/modules/testutil/tu_init/#tu_init", 
            "text": "int tu_init(void)  Initializes the test framework according to the contents of the  tu_config  struct. This function must be called before any tests are run.", 
            "title": " tu_init"
        }, 
        {
            "location": "/os/modules/testutil/tu_init/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/testutil/tu_init/#returned-values", 
            "text": "Returns 0 on success; nonzero on failure.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/testutil/tu_init/#example", 
            "text": "Here's an example of stand-alone code which allows the user to execute regression tests for sys/config package only.  #ifdef PKG_TEST\n\nint\nmain(int argc, char **argv)\n{\n    tu_config.tc_print_results = 1;\n    tu_init();\n\n    conf_init();\n    config_test_all();\n\n    return tu_any_failed;\n}\n\n#endif", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/testutil/test_assert/", 
            "text": "TEST_ASSERT\n\n\nTEST_ASSERT(expression, fail_msg, ...)\n\n\n\n\nTEST_ASSERT_FATAL(expression, fail_msg, ...)\n\n\n\n\nAsserts that the specified condition is true.  If the expression is true, nothing gets reported. \nfail_msg\n will be printed out if the expression is false. The expression argument is mandatory; the rest are optional.  The fail_msg argument is a printf format string which specifies how the remaining arguments are parsed.\n\n\nTEST_ASSERT_FATAL()\n causes the current test case to be aborted, if expression fails.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexpression\n\n\nCondition being tested. If it fails, test is considered a failure, and a message is printed out.\n\n\n\n\n\n\nfail_msg\n\n\nPointer to C string that contains a format string that follows the same specifications as format in printf.\n\n\n\n\n\n\n...\n\n\nDepending on the format string, the function may expect either a sequence of additional arguments to be used to replace a format specifier in the format string or a variable arguments list. va_list is a special type defined in \n in stdarg.h.\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nNotes\n\n\nWhile \nconsole_printf\n, with its well understood formatting options in C, is more convenient and easy on the eyes than the raw output of \nconsole_write\n, the associated code size is considerably larger.\n\n\nExample\n\n\nExample #1:\n\n\nTEST_CASE(config_test_insert)\n{\n    int rc;\n\n    rc = conf_register(\nconfig_test_handler);\n    TEST_ASSERT(rc == 0);\n}\n\n\n\n\nExample #2:\n\n\nTEST_CASE(nffs_test_unlink)\n{\n    int rc;\n\n    ....\n\n    rc = nffs_format(nffs_area_descs);\n    TEST_ASSERT_FATAL(rc == 0);\n\n    ....\n}\n\n\n\n\nExample #3:\n\n\n\nstatic int \ncbmem_test_case_1_walk(struct cbmem *cbmem, struct cbmem_entry_hdr *hdr, \n        void *arg)\n{\n    ....\n\n    rc = cbmem_read(cbmem, hdr, \nactual, 0, sizeof(actual));\n    TEST_ASSERT_FATAL(rc == 1, \nCouldn't read 1 byte from cbmem\n);\n    TEST_ASSERT_FATAL(actual == expected, \n            \nActual doesn't equal expected (%d = %d)\n, actual, expected);\n\n    ....\n}", 
            "title": "TEST_ASSERT"
        }, 
        {
            "location": "/os/modules/testutil/test_assert/#test_assert", 
            "text": "TEST_ASSERT(expression, fail_msg, ...)  TEST_ASSERT_FATAL(expression, fail_msg, ...)  Asserts that the specified condition is true.  If the expression is true, nothing gets reported.  fail_msg  will be printed out if the expression is false. The expression argument is mandatory; the rest are optional.  The fail_msg argument is a printf format string which specifies how the remaining arguments are parsed.  TEST_ASSERT_FATAL()  causes the current test case to be aborted, if expression fails.", 
            "title": " TEST_ASSERT"
        }, 
        {
            "location": "/os/modules/testutil/test_assert/#arguments", 
            "text": "Arguments  Description      expression  Condition being tested. If it fails, test is considered a failure, and a message is printed out.    fail_msg  Pointer to C string that contains a format string that follows the same specifications as format in printf.    ...  Depending on the format string, the function may expect either a sequence of additional arguments to be used to replace a format specifier in the format string or a variable arguments list. va_list is a special type defined in   in stdarg.h.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/testutil/test_assert/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/testutil/test_assert/#notes", 
            "text": "While  console_printf , with its well understood formatting options in C, is more convenient and easy on the eyes than the raw output of  console_write , the associated code size is considerably larger.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/testutil/test_assert/#example", 
            "text": "Example #1:  TEST_CASE(config_test_insert)\n{\n    int rc;\n\n    rc = conf_register( config_test_handler);\n    TEST_ASSERT(rc == 0);\n}  Example #2:  TEST_CASE(nffs_test_unlink)\n{\n    int rc;\n\n    ....\n\n    rc = nffs_format(nffs_area_descs);\n    TEST_ASSERT_FATAL(rc == 0);\n\n    ....\n}  Example #3:  \nstatic int \ncbmem_test_case_1_walk(struct cbmem *cbmem, struct cbmem_entry_hdr *hdr, \n        void *arg)\n{\n    ....\n\n    rc = cbmem_read(cbmem, hdr,  actual, 0, sizeof(actual));\n    TEST_ASSERT_FATAL(rc == 1,  Couldn't read 1 byte from cbmem );\n    TEST_ASSERT_FATAL(actual == expected, \n             Actual doesn't equal expected (%d = %d) , actual, expected);\n\n    ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/testutil/test_pass/", 
            "text": "TEST_PASS \n\n\nTEST_PASS(msg, ...)\n\n\n\n\nReports a success result for the current test.  This function is not normally needed, as all successful tests automatically write an empty pass result at completion. It is only needed when the success result report should contain text.  The msg argument is a printf format string\n    which specifies how the remaining arguments are parsed.  The result file\n    produced by this function contains the following text:\n\n\n        |\nfile\n:\nline-number\n| manual pass\n        \nmsg\n\n\n\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nThis is a printf format string which specifies how the remaining arguments are parsed\n\n\n\n\n\n\n...\n\n\nDepending on the format string, the function may expect either a sequence of additional arguments to be used to replace a format specifier in the format string or a variable arguments list. va_list is a special type defined in \n in stdarg.h.\n\n\n\n\n\n\n\n\nReturned values\n\n\nNone\n\n\nNotes\n\n\nAfter this function is called, the remainder of the test case is not executed.", 
            "title": "TEST_PASS"
        }, 
        {
            "location": "/os/modules/testutil/test_pass/#test_pass", 
            "text": "TEST_PASS(msg, ...)  Reports a success result for the current test.  This function is not normally needed, as all successful tests automatically write an empty pass result at completion. It is only needed when the success result report should contain text.  The msg argument is a printf format string\n    which specifies how the remaining arguments are parsed.  The result file\n    produced by this function contains the following text:          | file : line-number | manual pass\n         msg", 
            "title": " TEST_PASS "
        }, 
        {
            "location": "/os/modules/testutil/test_pass/#arguments", 
            "text": "Arguments  Description      msg  This is a printf format string which specifies how the remaining arguments are parsed    ...  Depending on the format string, the function may expect either a sequence of additional arguments to be used to replace a format specifier in the format string or a variable arguments list. va_list is a special type defined in   in stdarg.h.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/testutil/test_pass/#returned-values", 
            "text": "None", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/testutil/test_pass/#notes", 
            "text": "After this function is called, the remainder of the test case is not executed.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/testutil/test_suite/", 
            "text": "TEST_SUITE \n\n\nTEST_SUITE(test_suite_name)\n\n\n\n\nDeclares a test suite function with the following type \nint test_suite_name(void)\n. This can then be called from either \nproject/test\n, or from main routine for package specific regression test.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntest_suite_name\n\n\nUsed as the function name for this test suite.\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturn value is 0 if the test suite passed; nonzero if it failed. Generally, the return code is not used. It is expected that the individual test cases will pass/fail with tests done using \nTEST_ASSERT()\n.\n\n\nExample\n\n\nTEST_SUITE(os_sem_test_suite)\n{\n    os_sem_test_basic();\n    os_sem_test_case_1();\n    os_sem_test_case_2();\n    os_sem_test_case_3();\n    os_sem_test_case_4();\n}", 
            "title": "TEST_SUITE"
        }, 
        {
            "location": "/os/modules/testutil/test_suite/#test_suite", 
            "text": "TEST_SUITE(test_suite_name)  Declares a test suite function with the following type  int test_suite_name(void) . This can then be called from either  project/test , or from main routine for package specific regression test.", 
            "title": " TEST_SUITE "
        }, 
        {
            "location": "/os/modules/testutil/test_suite/#arguments", 
            "text": "Arguments  Description      test_suite_name  Used as the function name for this test suite.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/testutil/test_suite/#returned-values", 
            "text": "Return value is 0 if the test suite passed; nonzero if it failed. Generally, the return code is not used. It is expected that the individual test cases will pass/fail with tests done using  TEST_ASSERT() .", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/testutil/test_suite/#example", 
            "text": "TEST_SUITE(os_sem_test_suite)\n{\n    os_sem_test_basic();\n    os_sem_test_case_1();\n    os_sem_test_case_2();\n    os_sem_test_case_3();\n    os_sem_test_case_4();\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/testutil/test_case/", 
            "text": "TEST_CASE \n\n\nTEST_CASE(test_case_name)\n\n\n\n\nDeclares a test case function with the following type \nint test_case_name(void)\n. This can then be called from regression test's \nTEST_SUITE()\n function.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntest_case_name\n\n\nUsed as the function name for this test case.\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturn value is 0 if the test case passed; nonzero if it failed. Generally, the return code is not used. It is expected that the case will pass/fail with tests done using \nTEST_ASSERT()\n.\n\n\nExample\n\n\nTEST_CASE(config_test_insert)\n{\n     ....\n}", 
            "title": "TEST_CASE"
        }, 
        {
            "location": "/os/modules/testutil/test_case/#test_case", 
            "text": "TEST_CASE(test_case_name)  Declares a test case function with the following type  int test_case_name(void) . This can then be called from regression test's  TEST_SUITE()  function.", 
            "title": " TEST_CASE "
        }, 
        {
            "location": "/os/modules/testutil/test_case/#arguments", 
            "text": "Arguments  Description      test_case_name  Used as the function name for this test case.", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/testutil/test_case/#returned-values", 
            "text": "Return value is 0 if the test case passed; nonzero if it failed. Generally, the return code is not used. It is expected that the case will pass/fail with tests done using  TEST_ASSERT() .", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/testutil/test_case/#example", 
            "text": "TEST_CASE(config_test_insert)\n{\n     ....\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/testutil/tu_restart/", 
            "text": "tu_restart \n\n\nvoid tu_restart(void)\n\n\n\n\nThis function is used when a system reset is necessary to proceed with testing.  For example, the OS is designed to run forever once started, so a test which creates several OS tasks and then starts the OS has no means of completing. This function, when called from such a test, gracefully ends the current test case and proceeds to the next test case.\n\n\nThe particulars of this function depend on whether it is called from a simulated environment.  In a simulated environment, this function uses a \nlongjmp()\n call to break out of the current test case.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nReturns 0 on success; nonzero on failure.\n\n\nExample\n\n\nvoid\nos_test_restart(void)\n{\n    ....\n\n    tu_restart();\n}\n#endif", 
            "title": "tu_restart"
        }, 
        {
            "location": "/os/modules/testutil/tu_restart/#tu_restart", 
            "text": "void tu_restart(void)  This function is used when a system reset is necessary to proceed with testing.  For example, the OS is designed to run forever once started, so a test which creates several OS tasks and then starts the OS has no means of completing. This function, when called from such a test, gracefully ends the current test case and proceeds to the next test case.  The particulars of this function depend on whether it is called from a simulated environment.  In a simulated environment, this function uses a  longjmp()  call to break out of the current test case.", 
            "title": " tu_restart "
        }, 
        {
            "location": "/os/modules/testutil/tu_restart/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/testutil/tu_restart/#returned-values", 
            "text": "Returns 0 on success; nonzero on failure.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/testutil/tu_restart/#example", 
            "text": "void\nos_test_restart(void)\n{\n    ....\n\n    tu_restart();\n}\n#endif", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr/", 
            "text": "Image Manager\n\n\nDescription\n\n\nThis library accepts incoming image management commands from newtmgr and acts on them.\n\n\nImages can be uploaded, present images listed, and system can be told to switch to another image.\n\n\nCurrently the package assumes that there are 2 image slots, one active one and another one in standby. When new image is uploaded, it replaces the one in standby slot. This is the model for scenario when MCU has internal flash only, it executes the code from that flash, and there is enough space to store 2 full images.\n\n\nImage manager interacts with bootloader by telling it to boot to a specific image. At the moment this has to be done by writing a file which contains a version number of the image to boot. Note that image manager itself does not replace the active image.\n\n\nImage manager also can upload files to filesystem as well as download them.\n\n\nNote that commands accessing filesystems (next boot target, file upload/download) will not be available unless project includes filesystem implementation.\n\n\nData structures\n\n\nN/A.\n\n\nList of Functions\n\n\n\n\nThe functions available in imgmgr are:\n\n\n\n\nimgmgr_module_init\n\n\nimgr_ver_parse\n\n\nimgr_ver_str", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr/#image-manager", 
            "text": "", 
            "title": "Image Manager"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr/#description", 
            "text": "This library accepts incoming image management commands from newtmgr and acts on them.  Images can be uploaded, present images listed, and system can be told to switch to another image.  Currently the package assumes that there are 2 image slots, one active one and another one in standby. When new image is uploaded, it replaces the one in standby slot. This is the model for scenario when MCU has internal flash only, it executes the code from that flash, and there is enough space to store 2 full images.  Image manager interacts with bootloader by telling it to boot to a specific image. At the moment this has to be done by writing a file which contains a version number of the image to boot. Note that image manager itself does not replace the active image.  Image manager also can upload files to filesystem as well as download them.  Note that commands accessing filesystems (next boot target, file upload/download) will not be available unless project includes filesystem implementation.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr/#data-structures", 
            "text": "N/A.", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr/#list-of-functions", 
            "text": "The functions available in imgmgr are:   imgmgr_module_init  imgr_ver_parse  imgr_ver_str", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr_module_init/", 
            "text": "imgmgr_module_init \n\n\n   int\n   imgmgr_module_init(void)\n\n\n\n\nRegisters image manager commands with newtmgr. This function should be called while initializing the project, preferably after newtmgr itself has been initialized.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nList any values returned.\nError codes?\n\n\nNotes\n\n\nExample\n\n\nint main(int argc, char **argv)\n{\n    ...\n\n    nmgr_task_init(NEWTMGR_TASK_PRIO, newtmgr_stack, NEWTMGR_TASK_STACK_SIZE);\n    imgmgr_module_init();\n\n    ...\n}", 
            "title": "imgmgr_module_init"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr_module_init/#imgmgr_module_init", 
            "text": "int\n   imgmgr_module_init(void)  Registers image manager commands with newtmgr. This function should be called while initializing the project, preferably after newtmgr itself has been initialized.", 
            "title": " imgmgr_module_init "
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr_module_init/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr_module_init/#returned-values", 
            "text": "List any values returned.\nError codes?", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr_module_init/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/imgmgr/imgmgr_module_init/#example", 
            "text": "int main(int argc, char **argv)\n{\n    ...\n\n    nmgr_task_init(NEWTMGR_TASK_PRIO, newtmgr_stack, NEWTMGR_TASK_STACK_SIZE);\n    imgmgr_module_init();\n\n    ...\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_parse/", 
            "text": "imgr_ver_parse \n\n\n   int\n   imgr_ver_parse(char *src, struct image_version *ver)\n\n\n\n\nParses character string containing image version number \nsrc\n and writes that to \nver\n. Version number string should be in format \n.\n.\n.\n. Major and minor numbers should be within range 0-255, revision between 0-65535 and build_number 0-4294967295.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc\n\n\nPointer to C string that contains version number being parsed\n\n\n\n\n\n\nver\n\n\nImage version number structure containing the returned value\n\n\n\n\n\n\n\n\nReturned values\n\n\n0 on success and \n0 if version number string could not be parsed.\n\n\nNotes\n\n\nNumbers within the string are separated by \n.\n. The first   number is the major number, and must be provided. Rest of the numbers (minor etc.) are optional.\n\n\nExample\n\n\nint main(int argc, char **argv)\n{\n    struct image_version hdr_ver;\n    int rc;\n    ...\n\n    rc = imgr_ver_parse(argv[3], \nhdr_ver);\n    if (rc != 0) {\n        print_usage(stderr);\n        return 1;\n    }\n    ...\n}", 
            "title": "imgr_ver_parse"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_parse/#imgr_ver_parse", 
            "text": "int\n   imgr_ver_parse(char *src, struct image_version *ver)  Parses character string containing image version number  src  and writes that to  ver . Version number string should be in format  . . . . Major and minor numbers should be within range 0-255, revision between 0-65535 and build_number 0-4294967295.", 
            "title": " imgr_ver_parse "
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_parse/#arguments", 
            "text": "Arguments  Description      src  Pointer to C string that contains version number being parsed    ver  Image version number structure containing the returned value", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_parse/#returned-values", 
            "text": "0 on success and  0 if version number string could not be parsed.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_parse/#notes", 
            "text": "Numbers within the string are separated by  . . The first   number is the major number, and must be provided. Rest of the numbers (minor etc.) are optional.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_parse/#example", 
            "text": "int main(int argc, char **argv)\n{\n    struct image_version hdr_ver;\n    int rc;\n    ...\n\n    rc = imgr_ver_parse(argv[3],  hdr_ver);\n    if (rc != 0) {\n        print_usage(stderr);\n        return 1;\n    }\n    ...\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_str/", 
            "text": "imgr_ver_str \n\n\n   int\n   imgr_ver_str(struct image_version *ver, char *dst)\n\n\n\n\nTakes the version string from \nver\n and formats that into a printable string to \ndst\n. Caller must make sure that \ndst\n contains enough space to hold maximum lenght version string. The convenience defininition for max length version string is named \nIMGMGR_MAX_VER_STR\n.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nver\n\n\nImage version number structure containing the value being formatted\n\n\n\n\n\n\ndst\n\n\nPointer to C string where results will be stored\n\n\n\n\n\n\n\n\nReturned values\n\n\nFunction returns the number of characters filled into the destination string.\n\n\nNotes\n\n\nIf build number is \n0\n in image version structure, it will be left out of the string.\n\n\nExample\n\n\nstatic void\nimgr_ver_jsonstr(struct json_encoder *enc, char *key,\n  struct image_version *ver)\n{\n    char ver_str[IMGMGR_MAX_VER_STR];\n    int ver_len;\n    ...\n    ver_len = imgr_ver_str(ver, ver_str)\n    ...\n}", 
            "title": "imgr_ver_str"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_str/#imgr_ver_str", 
            "text": "int\n   imgr_ver_str(struct image_version *ver, char *dst)  Takes the version string from  ver  and formats that into a printable string to  dst . Caller must make sure that  dst  contains enough space to hold maximum lenght version string. The convenience defininition for max length version string is named  IMGMGR_MAX_VER_STR .", 
            "title": " imgr_ver_str "
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_str/#arguments", 
            "text": "Arguments  Description      ver  Image version number structure containing the value being formatted    dst  Pointer to C string where results will be stored", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_str/#returned-values", 
            "text": "Function returns the number of characters filled into the destination string.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_str/#notes", 
            "text": "If build number is  0  in image version structure, it will be left out of the string.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/imgmgr/imgr_ver_str/#example", 
            "text": "static void\nimgr_ver_jsonstr(struct json_encoder *enc, char *key,\n  struct image_version *ver)\n{\n    char ver_str[IMGMGR_MAX_VER_STR];\n    int ver_len;\n    ...\n    ver_len = imgr_ver_str(ver, ver_str)\n    ...\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/baselibc/", 
            "text": "Baselibc\n\n\nBaselibc is a very simple libc for embedded systems geared primarily for 32-bit microcontrollers in the 10-100kB memory range. The library of basic system calls and facilities compiles to less than 5kB total on Cortex-M3, and much less if some functions aren't used.\n\n\nThe code is based on klibc and tinyprintf modules, and licensed under the BSD license.\n\n\nBaselibc comes from https://github.com/PetteriAimonen/Baselibc.git\n\n\nDescription\n\n\nMynewt OS can utilize libc which comes with compiler (e.g. newlib bundled with some binary distributions of arm-none-eabi-gcc). However, you may choose to replace the libc with baselibc for a reduced image size. Baselibc optimizes for size rather than performance, which is usually a more important goal in embedded environments.\n\n\nHow to switch to baselibc\n\n\nIn order to switch from using libc to using baselibc you have to add the baselibc pkg as a dependency in the project pkg. Specifying this dependency ensures that the linker first looks for the functions in baselibc before falling back to libc while creating the executable. For example, project \nboot\n uses baselibc. Its project description file \nboot.yml\n looks like the following:\n\n\nno-highlight\n   project.name: boot\n   project.identities: bootloader\n   project.pkgs:\n       - libs/os\n       - libs/bootutil\n       - libs/nffs\n       - libs/console/stub\n       - libs/util\n       - libs/baselibc\n\n\nList of Functions\n\n\nDocumentation for libc functions is available from multiple places. One example are the on-line manual pages at \nhttps://www.freebsd.org/cgi/man.cgi\n.\n\n\nbaselibc supports most libc functionality; malloc(), printf-family, string handling, and conversion routines.\n\n\nThere is some functionality which is not available, e.g. support for floating point numbers, and limited support for 'long long'.", 
            "title": "Baselibc library"
        }, 
        {
            "location": "/os/modules/baselibc/#baselibc", 
            "text": "Baselibc is a very simple libc for embedded systems geared primarily for 32-bit microcontrollers in the 10-100kB memory range. The library of basic system calls and facilities compiles to less than 5kB total on Cortex-M3, and much less if some functions aren't used.  The code is based on klibc and tinyprintf modules, and licensed under the BSD license.  Baselibc comes from https://github.com/PetteriAimonen/Baselibc.git", 
            "title": "Baselibc"
        }, 
        {
            "location": "/os/modules/baselibc/#description", 
            "text": "Mynewt OS can utilize libc which comes with compiler (e.g. newlib bundled with some binary distributions of arm-none-eabi-gcc). However, you may choose to replace the libc with baselibc for a reduced image size. Baselibc optimizes for size rather than performance, which is usually a more important goal in embedded environments.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/baselibc/#how-to-switch-to-baselibc", 
            "text": "In order to switch from using libc to using baselibc you have to add the baselibc pkg as a dependency in the project pkg. Specifying this dependency ensures that the linker first looks for the functions in baselibc before falling back to libc while creating the executable. For example, project  boot  uses baselibc. Its project description file  boot.yml  looks like the following:  no-highlight\n   project.name: boot\n   project.identities: bootloader\n   project.pkgs:\n       - libs/os\n       - libs/bootutil\n       - libs/nffs\n       - libs/console/stub\n       - libs/util\n       - libs/baselibc", 
            "title": "How to switch to baselibc"
        }, 
        {
            "location": "/os/modules/baselibc/#list-of-functions", 
            "text": "Documentation for libc functions is available from multiple places. One example are the on-line manual pages at  https://www.freebsd.org/cgi/man.cgi .  baselibc supports most libc functionality; malloc(), printf-family, string handling, and conversion routines.  There is some functionality which is not available, e.g. support for floating point numbers, and limited support for 'long long'.", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/elua/elua/", 
            "text": "elua\n\n\nDescription\n\n\nThis package contains a Lua interpreter. See http://lua.org for documentation of the language.\n\n\nYou can execute lua scripts either from console with shell or start the execution programmatically.\n\n\nData structures\n\n\nNotes\n\n\nCurrently we don't have language extension modules which would go together with this one, but those should be added.\n\n\nList of Functions\n\n\n\n\nlua_init\n\n\nlua_main", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/elua/elua/#elua", 
            "text": "", 
            "title": "elua"
        }, 
        {
            "location": "/os/modules/elua/elua/#description", 
            "text": "This package contains a Lua interpreter. See http://lua.org for documentation of the language.  You can execute lua scripts either from console with shell or start the execution programmatically.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/elua/elua/#data-structures", 
            "text": "", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/elua/elua/#notes", 
            "text": "Currently we don't have language extension modules which would go together with this one, but those should be added.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/elua/elua/#list-of-functions", 
            "text": "lua_init  lua_main", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/elua/lua_init/", 
            "text": "lua_init \n\n\n   int\n   lua_init(void)\n\n\n\n\nRegisters 'lua' command with shell. This function should be called while initializing the project, preferably after shell itself has been initialized.\n\n\nArguments\n\n\nN/A\n\n\nReturned values\n\n\nReturns \n\n\nNotes\n\n\nCalling this is meaningful only if you include the shell package in your project.\n\n\nExample\n\n\nint main(int argc, char **argv)\n{\n    ...\n    shell_task_init(SHELL_TASK_PRIO, shell_stack, SHELL_TASK_STACK_SIZE,\n                         SHELL_MAX_INPUT_LEN);\n    ...\n    lua_init();\n    ...\n}", 
            "title": "lua_init"
        }, 
        {
            "location": "/os/modules/elua/lua_init/#lua_init", 
            "text": "int\n   lua_init(void)  Registers 'lua' command with shell. This function should be called while initializing the project, preferably after shell itself has been initialized.", 
            "title": " lua_init "
        }, 
        {
            "location": "/os/modules/elua/lua_init/#arguments", 
            "text": "N/A", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/elua/lua_init/#returned-values", 
            "text": "Returns", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/elua/lua_init/#notes", 
            "text": "Calling this is meaningful only if you include the shell package in your project.", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/elua/lua_init/#example", 
            "text": "int main(int argc, char **argv)\n{\n    ...\n    shell_task_init(SHELL_TASK_PRIO, shell_stack, SHELL_TASK_STACK_SIZE,\n                         SHELL_MAX_INPUT_LEN);\n    ...\n    lua_init();\n    ...\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/elua/lua_main/", 
            "text": "lua_main \n\n\n   int\n   lua_main(int argc, char **argv)\n\n\n\n\nExecutes lua script in current task's context. Arguments given are passed to lua interpreter.\n\n\nArguments\n\n\n\n\n\n\n\n\nArguments\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nargc\n\n\nNumber of elements in argv array\n\n\n\n\n\n\nargv\n\n\nArray of character strings\n\n\n\n\n\n\n\n\nReturned values\n\n\nReturns the return code from the lua interpreter.\n\n\nNotes\n\n\nExample\n\n\nstatic int\nlua_cmd(int argc, char **argv)\n{\n    lua_main(argc, argv);\n    return 0;\n}", 
            "title": "lua_main"
        }, 
        {
            "location": "/os/modules/elua/lua_main/#lua_main", 
            "text": "int\n   lua_main(int argc, char **argv)  Executes lua script in current task's context. Arguments given are passed to lua interpreter.", 
            "title": " lua_main "
        }, 
        {
            "location": "/os/modules/elua/lua_main/#arguments", 
            "text": "Arguments  Description      argc  Number of elements in argv array    argv  Array of character strings", 
            "title": "Arguments"
        }, 
        {
            "location": "/os/modules/elua/lua_main/#returned-values", 
            "text": "Returns the return code from the lua interpreter.", 
            "title": "Returned values"
        }, 
        {
            "location": "/os/modules/elua/lua_main/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/os/modules/elua/lua_main/#example", 
            "text": "static int\nlua_cmd(int argc, char **argv)\n{\n    lua_main(argc, argv);\n    return 0;\n}", 
            "title": "Example"
        }, 
        {
            "location": "/os/modules/json/json/", 
            "text": "JSON\n\n\nInsert synopsis here\n\n\nDescription\n\n\nDescribe module here, special features, how pieces fit together etc.\n\n\nData structures\n\n\nReplace this with the list of data structures used, why, any neat features\n\n\nList of Functions\n\n\n\n\nThe functions available in json are:\n\n\n\n\njson_encode_object_entry\n\n\njson_encode_object_finish\n\n\njson_encode_object_key\n\n\njson_encode_object_start\n\n\njson_encode_value\n\n\njson_internal_read_object\n\n\njson_read_array\n\n\njson_read_object\n\n\njson_target_address", 
            "title": "Overview"
        }, 
        {
            "location": "/os/modules/json/json/#json", 
            "text": "Insert synopsis here", 
            "title": "JSON"
        }, 
        {
            "location": "/os/modules/json/json/#description", 
            "text": "Describe module here, special features, how pieces fit together etc.", 
            "title": "Description"
        }, 
        {
            "location": "/os/modules/json/json/#data-structures", 
            "text": "Replace this with the list of data structures used, why, any neat features", 
            "title": "Data structures"
        }, 
        {
            "location": "/os/modules/json/json/#list-of-functions", 
            "text": "The functions available in json are:   json_encode_object_entry  json_encode_object_finish  json_encode_object_key  json_encode_object_start  json_encode_value  json_internal_read_object  json_read_array  json_read_object  json_target_address", 
            "title": "List of Functions"
        }, 
        {
            "location": "/os/modules/json/json_encode_object_entry/", 
            "text": "", 
            "title": "json_encode_object_entry"
        }, 
        {
            "location": "/os/modules/json/json_encode_object_finish/", 
            "text": "", 
            "title": "json_encode_object_finish"
        }, 
        {
            "location": "/os/modules/json/json_encode_object_key/", 
            "text": "", 
            "title": "json_encode_object_key"
        }, 
        {
            "location": "/os/modules/json/json_encode_object_start/", 
            "text": "", 
            "title": "json_encode_object_start"
        }, 
        {
            "location": "/os/modules/json/json_encode_value/", 
            "text": "", 
            "title": "json_encode_value"
        }, 
        {
            "location": "/os/modules/json/json_internal_read_object/", 
            "text": "", 
            "title": "json_internal_read_object"
        }, 
        {
            "location": "/os/modules/json/json_read_array/", 
            "text": "", 
            "title": "json_read_array"
        }, 
        {
            "location": "/os/modules/json/json_read_object/", 
            "text": "", 
            "title": "json_read_object"
        }, 
        {
            "location": "/os/modules/json/json_target_address/", 
            "text": "", 
            "title": "json_target_address"
        }, 
        {
            "location": "/network/ble/ble_intro/", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/newt/newt_intro/", 
            "text": "Introduction\n\n\nWhat is newt tool?", 
            "title": "Introduction"
        }, 
        {
            "location": "/newt/newt_intro/#introduction", 
            "text": "What is newt tool?", 
            "title": "Introduction"
        }, 
        {
            "location": "/newt/newt_mac/", 
            "text": "Building newt tool on your Mac\n\n\nGetting your Mac Ready\n\n\nIf you want to build the newt tool from its source code you need to install \n\n\nInstalling Homebrew to ease installs on OS X\n\n\n\n\nDo you have Homebrew? If not, open a terminal on your Mac and paste the following at a Terminal prompt. It will ask you for your sudo password.\n\n\n\n\n        $ ruby -e \n$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n\n\n\n\n\nAlternatively, you can just extract (or \ngit clone\n) Homebrew and install it to \n/usr/local\n.\n\n\nInstalling Go\n\n\n\n\n\n\nThe directory structure must be first readied for using Go. Go code must be kept inside a workspace. A workspace is a directory hierarchy with three directories at its root:\n\n\n\n\n\n\nsrc contains Go source files organized into packages (one package per directory),\n\n\n\n\n\n\npkg contains package objects, and\n\n\n\n\n\n\nbin contains executable commands.\n\n\n\n\n\n\nThe GOPATH environment variable specifies the location of your workspace. First create a 'dev' directory and then a 'go' directory under it. Set the GOPATH environment variable to this directory where you will soon clone the newt tool repository.\n\n\n\n\n\n\n        $ cd $HOME\n        $ mkdir -p dev/go  \n        $ cd dev/go\n        $ export GOPATH=`pwd`\n\n\n\n\nNote that you need to add export statements to ~/.bash_profile to export variables permanently. Don't forget to source the file for the change to go into effect.\n\n\n        $ vi ~/.bash_profile\n        $ source ~/.bash_profile\n\n\n\n\n\n\nNext you will use Homebrew to install Go. The summary message at the end of the installation should indicate that it is installed in the /usr/local/Cellar/go/ directory. You will use the Go command 'install' to compile and install packages (called eggs in the Mynewt world) and dependencies. \n\n\n\n\n        $ brew install go\n        ==\n \n        ...\n        ... \n        ==\n *Summary*\n        \ud83c\udf7a  /usr/local/Cellar/go/1.5.1: 5330 files, 273M\n\n\n\n\nAlternatively, you can download the Go package directly from (https://golang.org/dl/) instead of brewing it. Install it in /usr/local directory.\n\n\nCreating local repository\n\n\n\n\nYou are ready to download the newt tool repository. You will use Go to copy the directory (currently the asf incubator directory). Be patient as it may take a minute or two. Check the directories installed.\n\n\n\n\n        $ go get git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ ls\n         bin    pkg    src\n        $ ls src\n        git-wip-us.apache.org   github.com      gopkg.in\n\n\n\n\nIf you run into an \nunrecognized import path\n issue, go to the \n~/dev/go/src/git-wip-us.apache.org/repos/asf\n directory and create a symbolic link. Then run the \ngo get\n command above again to install all packages correctly.\n\n\n        $ ln -s incubator-mynewt-newt.git incubator-mynewt-newt\n\n\n\n\n\n\nCheck that newt.go is in place.\n\n\n\n\n        $ ls $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt  \n        Godeps          README.md       coding_style.txt    newt.go\n        LICENSE         cli             design.txt\n\n\n\n\nBuilding the Newt tool\n\n\n\n\nYou will use Go to run the newt.go program to build the newt tool. The command used is \ngo install\n which compiles and writes the resulting executable to an output file named \nnewt\n. It installs the results along with its dependencies in $GOPATH/bin.\n\n\n\n\n        $ cd $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ go install\n        $ ls \n$GOPATH\n/bin/\n        godep       incubator-mynewt-newt.git     newt\n\n\n\n\n\n\nTry running newt using the compiled binary. For example, check for the version number by typing 'newt version'. See all the possible commands available to a user of newt by typing 'newt -h'.\n\n\n\n\nNote: If you are going to be be modifying the newt tool itself often and wish to compile the program every time you call it, you may want to store the command in a variable in your .bash_profile. So type in \nexport newt=\"go run $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt/newt/go\"\n in your .bash_profile and execute it by calling \n$newt\n at the prompt instead of \nnewt\n. Here, you use \ngo run\n which runs the compiled binary directly without producing an executable. Don't forget to reload the updated bash profile by typing \nsource ~/.bash_profile\n at the prompt! \n\n\n        $ newt version\n        Newt version:  1.0\n        $ newt -h\n        Newt allows you to create your own embedded project based on the Mynewt\n        operating system. Newt provides both build and package management in a\n        single tool, which allows you to compose an embedded workspace, and set\n        of projects, and then build the necessary artifacts from those projects.\n        For more information on the Mynewt operating system, please visit\n        https://www.github.com/mynewt/documentation.\n\n        Please use the newt help command, and specify the name of the command\n        you want help for, for help on how to use a specific command\n\n        Usage:\n         newt [flags]\n         newt [command]\n\n        Examples:\n         newt\n         newt help [\ncommand-name\n]\n           For help on \ncommand-name\n.  If not specified, print this message.\n\n\n        Available Commands:\n         version     Display the Newt version number.\n         target      Set and view target information\n         egg         Commands to list and inspect eggs on a nest\n         nest        Commands to manage nests \n clutches (remote egg repositories)\n         help        Help about any command\n\n        Flags:\n         -h, --help=false: help for newt\n         -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n         -q, --quiet=false: Be quiet; only display error output.\n         -s, --silent=false: Be silent; don't output anything.\n         -v, --verbose=false: Enable verbose output when executing commands.\n\n\n        Use \nnewt help [command]\n for more information about a command.\n\n\n\n\n\n\nWithout creating a project repository you can't do a whole lot with the Newt tool. So you'll have to wait till you have downloaded a nest to try out the tool.", 
            "title": "Install newt from source on Mac"
        }, 
        {
            "location": "/newt/newt_mac/#building-newt-tool-on-your-mac", 
            "text": "", 
            "title": "Building newt tool on your Mac"
        }, 
        {
            "location": "/newt/newt_mac/#getting-your-mac-ready", 
            "text": "If you want to build the newt tool from its source code you need to install", 
            "title": "Getting your Mac Ready"
        }, 
        {
            "location": "/newt/newt_mac/#installing-homebrew-to-ease-installs-on-os-x", 
            "text": "Do you have Homebrew? If not, open a terminal on your Mac and paste the following at a Terminal prompt. It will ask you for your sudo password.           $ ruby -e  $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)   Alternatively, you can just extract (or  git clone ) Homebrew and install it to  /usr/local .", 
            "title": "Installing Homebrew to ease installs on OS X"
        }, 
        {
            "location": "/newt/newt_mac/#installing-go", 
            "text": "The directory structure must be first readied for using Go. Go code must be kept inside a workspace. A workspace is a directory hierarchy with three directories at its root:    src contains Go source files organized into packages (one package per directory),    pkg contains package objects, and    bin contains executable commands.    The GOPATH environment variable specifies the location of your workspace. First create a 'dev' directory and then a 'go' directory under it. Set the GOPATH environment variable to this directory where you will soon clone the newt tool repository.            $ cd $HOME\n        $ mkdir -p dev/go  \n        $ cd dev/go\n        $ export GOPATH=`pwd`  Note that you need to add export statements to ~/.bash_profile to export variables permanently. Don't forget to source the file for the change to go into effect.          $ vi ~/.bash_profile\n        $ source ~/.bash_profile   Next you will use Homebrew to install Go. The summary message at the end of the installation should indicate that it is installed in the /usr/local/Cellar/go/ directory. You will use the Go command 'install' to compile and install packages (called eggs in the Mynewt world) and dependencies.            $ brew install go\n        ==  \n        ...\n        ... \n        ==  *Summary*\n        \ud83c\udf7a  /usr/local/Cellar/go/1.5.1: 5330 files, 273M  Alternatively, you can download the Go package directly from (https://golang.org/dl/) instead of brewing it. Install it in /usr/local directory.", 
            "title": "Installing Go"
        }, 
        {
            "location": "/newt/newt_mac/#creating-local-repository", 
            "text": "You are ready to download the newt tool repository. You will use Go to copy the directory (currently the asf incubator directory). Be patient as it may take a minute or two. Check the directories installed.           $ go get git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ ls\n         bin    pkg    src\n        $ ls src\n        git-wip-us.apache.org   github.com      gopkg.in  If you run into an  unrecognized import path  issue, go to the  ~/dev/go/src/git-wip-us.apache.org/repos/asf  directory and create a symbolic link. Then run the  go get  command above again to install all packages correctly.          $ ln -s incubator-mynewt-newt.git incubator-mynewt-newt   Check that newt.go is in place.           $ ls $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt  \n        Godeps          README.md       coding_style.txt    newt.go\n        LICENSE         cli             design.txt", 
            "title": "Creating local repository"
        }, 
        {
            "location": "/newt/newt_mac/#building-the-newt-tool", 
            "text": "You will use Go to run the newt.go program to build the newt tool. The command used is  go install  which compiles and writes the resulting executable to an output file named  newt . It installs the results along with its dependencies in $GOPATH/bin.           $ cd $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ go install\n        $ ls  $GOPATH /bin/\n        godep       incubator-mynewt-newt.git     newt   Try running newt using the compiled binary. For example, check for the version number by typing 'newt version'. See all the possible commands available to a user of newt by typing 'newt -h'.   Note: If you are going to be be modifying the newt tool itself often and wish to compile the program every time you call it, you may want to store the command in a variable in your .bash_profile. So type in  export newt=\"go run $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt/newt/go\"  in your .bash_profile and execute it by calling  $newt  at the prompt instead of  newt . Here, you use  go run  which runs the compiled binary directly without producing an executable. Don't forget to reload the updated bash profile by typing  source ~/.bash_profile  at the prompt!           $ newt version\n        Newt version:  1.0\n        $ newt -h\n        Newt allows you to create your own embedded project based on the Mynewt\n        operating system. Newt provides both build and package management in a\n        single tool, which allows you to compose an embedded workspace, and set\n        of projects, and then build the necessary artifacts from those projects.\n        For more information on the Mynewt operating system, please visit\n        https://www.github.com/mynewt/documentation.\n\n        Please use the newt help command, and specify the name of the command\n        you want help for, for help on how to use a specific command\n\n        Usage:\n         newt [flags]\n         newt [command]\n\n        Examples:\n         newt\n         newt help [ command-name ]\n           For help on  command-name .  If not specified, print this message.\n\n\n        Available Commands:\n         version     Display the Newt version number.\n         target      Set and view target information\n         egg         Commands to list and inspect eggs on a nest\n         nest        Commands to manage nests   clutches (remote egg repositories)\n         help        Help about any command\n\n        Flags:\n         -h, --help=false: help for newt\n         -l, --loglevel= WARN : Log level, defaults to WARN.\n         -q, --quiet=false: Be quiet; only display error output.\n         -s, --silent=false: Be silent; don't output anything.\n         -v, --verbose=false: Enable verbose output when executing commands.\n\n\n        Use  newt help [command]  for more information about a command.   Without creating a project repository you can't do a whole lot with the Newt tool. So you'll have to wait till you have downloaded a nest to try out the tool.", 
            "title": "Building the Newt tool"
        }, 
        {
            "location": "/newt/newt_linux/", 
            "text": "Building newt tool on Linux\n\n\nGetting your Ubuntu machine Ready\n\n\nInstalling some prerequisites\n\n\n\n\nInstall git, libcurl, and the Go language if you do not have them already.\n\n\n\n\n        $ sudo apt-get install git \n        $ sudo apt-get install libcurl4-gnutls-dev \n        $ sudo apt-get install golang \n\n\n\n\nCreating local repository\n\n\n\n\n\n\nThe directory structure must be first readied for using Go. Go code must be kept inside a workspace. A workspace is a directory hierarchy with three directories at its root:\n\n\n\n\n\n\nsrc contains Go source files organized into packages (one package per directory),\n\n\n\n\n\n\npkg contains package objects, and\n\n\n\n\n\n\nbin contains executable commands.\n\n\n\n\n\n\n\n\n\n\nThe GOPATH environment variable specifies the location of your workspace. First create a 'dev' directory and then a 'go' directory under it. Set the GOPATH environment variable to this directory where you will soon clone the newt tool repository.\n\n\n        $ cd $HOME\n        $ mkdir -p dev/go  \n        $ cd dev/go\n        $ export GOPATH=$PWD\n\n\n\n\nNote that you need to add export statements to ~/.bashrc (or equivalent) to export variables permanently.\n\n\n\n\nYou are ready to download the newt tool repository. You will use Go to copy the directory (currently the asf incubator directory). Be patient as it may take a minute or two. Check the directories installed.\n\n\n\n\n        $ go get git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ ls\n         bin    pkg    src\n        $ ls src\n        git-wip-us.apache.org   github.com      gopkg.in\n\n\n\n\n\n\nCheck that newt is in place.\n\n\n\n\n        $ ls $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt \n        Godeps          README.md       coding_style.txt    newt.go\n        LICENSE         cli             design.txt\n\n\n\n\nBuilding the newt tool\n\n\n\n\nYou will use Go to run the newt.go program to build the newt tool. The command used is  \ngo install\n which compiles and writes the resulting executable to an output file named \nnewt\n. It installs the results along with its dependencies in $GOPATH/bin.\n\n\n\n\n        $ cd $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ go install\n        $ ls \n$GOPATH\n/bin/\n        godep       incubator-mynewt-newt.git     newt\n\n\n\n\n\n\nTry running newt using the compiled binary. For example, check for the version number by typing 'newt version'. See all the possible commands available to a user of newt by typing 'newt -h'.\n\n\n\n\nNote: If you are going to be be modifying the newt tool itself often and wish to compile the program every time you call it, you may want to store the command in a variable in your .bash_profile. So type in \nexport newt=\"go run $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt/newt/go\"\n in your ~/.bashrc (or equivalent) and execute it by calling \n$newt\n at the prompt instead of \nnewt\n. Here, you use \ngo run\n which runs the compiled binary directly without producing an executable.   \n\n\n        $ newt version\n        Newt version:  1.0\n        $ newt -h\n        Newt allows you to create your own embedded project based on the Mynewt\n        operating system. Newt provides both build and package management in a\n        single tool, which allows you to compose an embedded workspace, and set\n        of projects, and then build the necessary artifacts from those projects.\n        For more information on the Mynewt operating system, please visit\n        https://www.github.com/mynewt/documentation.\n\n        Please use the newt help command, and specify the name of the command\n        you want help for, for help on how to use a specific command\n\n        Usage:\n         newt [flags]\n         newt [command]\n\n        Examples:\n         newt\n         newt help [\ncommand-name\n]\n           For help on \ncommand-name\n.  If not specified, print this message.\n\n\n        Available Commands:\n         version     Display the Newt version number.\n         target      Set and view target information\n         egg         Commands to list and inspect eggs on a nest\n         nest        Commands to manage nests \n clutches (remote egg repositories)\n         help        Help about any command\n\n        Flags:\n         -h, --help=false: help for newt\n         -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n         -q, --quiet=false: Be quiet; only display error output.\n         -s, --silent=false: Be silent; don't output anything.\n         -v, --verbose=false: Enable verbose output when executing commands.\n\n\n        Use \nnewt help [command]\n for more information about a command.\n\n\n\n\n\n\nWithout creating a project repository you can't do a whole lot with the Newt tool. So you'll have to wait till you have downloaded a nest to try out the tool.", 
            "title": "Install newt from source on Linux"
        }, 
        {
            "location": "/newt/newt_linux/#building-newt-tool-on-linux", 
            "text": "", 
            "title": "Building newt tool on Linux"
        }, 
        {
            "location": "/newt/newt_linux/#getting-your-ubuntu-machine-ready", 
            "text": "", 
            "title": "Getting your Ubuntu machine Ready"
        }, 
        {
            "location": "/newt/newt_linux/#installing-some-prerequisites", 
            "text": "Install git, libcurl, and the Go language if you do not have them already.           $ sudo apt-get install git \n        $ sudo apt-get install libcurl4-gnutls-dev \n        $ sudo apt-get install golang", 
            "title": "Installing some prerequisites"
        }, 
        {
            "location": "/newt/newt_linux/#creating-local-repository", 
            "text": "The directory structure must be first readied for using Go. Go code must be kept inside a workspace. A workspace is a directory hierarchy with three directories at its root:    src contains Go source files organized into packages (one package per directory),    pkg contains package objects, and    bin contains executable commands.      The GOPATH environment variable specifies the location of your workspace. First create a 'dev' directory and then a 'go' directory under it. Set the GOPATH environment variable to this directory where you will soon clone the newt tool repository.          $ cd $HOME\n        $ mkdir -p dev/go  \n        $ cd dev/go\n        $ export GOPATH=$PWD  Note that you need to add export statements to ~/.bashrc (or equivalent) to export variables permanently.   You are ready to download the newt tool repository. You will use Go to copy the directory (currently the asf incubator directory). Be patient as it may take a minute or two. Check the directories installed.           $ go get git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ ls\n         bin    pkg    src\n        $ ls src\n        git-wip-us.apache.org   github.com      gopkg.in   Check that newt is in place.           $ ls $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt \n        Godeps          README.md       coding_style.txt    newt.go\n        LICENSE         cli             design.txt", 
            "title": "Creating local repository"
        }, 
        {
            "location": "/newt/newt_linux/#building-the-newt-tool", 
            "text": "You will use Go to run the newt.go program to build the newt tool. The command used is   go install  which compiles and writes the resulting executable to an output file named  newt . It installs the results along with its dependencies in $GOPATH/bin.           $ cd $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ go install\n        $ ls  $GOPATH /bin/\n        godep       incubator-mynewt-newt.git     newt   Try running newt using the compiled binary. For example, check for the version number by typing 'newt version'. See all the possible commands available to a user of newt by typing 'newt -h'.   Note: If you are going to be be modifying the newt tool itself often and wish to compile the program every time you call it, you may want to store the command in a variable in your .bash_profile. So type in  export newt=\"go run $GOPATH/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt/newt/go\"  in your ~/.bashrc (or equivalent) and execute it by calling  $newt  at the prompt instead of  newt . Here, you use  go run  which runs the compiled binary directly without producing an executable.             $ newt version\n        Newt version:  1.0\n        $ newt -h\n        Newt allows you to create your own embedded project based on the Mynewt\n        operating system. Newt provides both build and package management in a\n        single tool, which allows you to compose an embedded workspace, and set\n        of projects, and then build the necessary artifacts from those projects.\n        For more information on the Mynewt operating system, please visit\n        https://www.github.com/mynewt/documentation.\n\n        Please use the newt help command, and specify the name of the command\n        you want help for, for help on how to use a specific command\n\n        Usage:\n         newt [flags]\n         newt [command]\n\n        Examples:\n         newt\n         newt help [ command-name ]\n           For help on  command-name .  If not specified, print this message.\n\n\n        Available Commands:\n         version     Display the Newt version number.\n         target      Set and view target information\n         egg         Commands to list and inspect eggs on a nest\n         nest        Commands to manage nests   clutches (remote egg repositories)\n         help        Help about any command\n\n        Flags:\n         -h, --help=false: help for newt\n         -l, --loglevel= WARN : Log level, defaults to WARN.\n         -q, --quiet=false: Be quiet; only display error output.\n         -s, --silent=false: Be silent; don't output anything.\n         -v, --verbose=false: Enable verbose output when executing commands.\n\n\n        Use  newt help [command]  for more information about a command.   Without creating a project repository you can't do a whole lot with the Newt tool. So you'll have to wait till you have downloaded a nest to try out the tool.", 
            "title": "Building the newt tool"
        }, 
        {
            "location": "/newt/tutorials/define_target/", 
            "text": "How to Define a Target\n\n\nWhat newt commands to use?", 
            "title": "Define a target"
        }, 
        {
            "location": "/newt/tutorials/define_target/#how-to-define-a-target", 
            "text": "What newt commands to use?", 
            "title": "How to Define a Target"
        }, 
        {
            "location": "/newt/newt_ops/", 
            "text": "Command Structure\n\n\nIn the newt tool, commands represent actions and flags are modifiers for those actions. A command can have children commands which are also simply referred to as commands. One or more arguments may need to be provided to a command to execute it correctly. \n\n\nIn the example below, the \nnewt\n command has the child command \ntarget set\n. The first argument 'my_target1' is the name of the target whose attributes are being set. The second argument 'arch=cortex_m4' specifies the value to set the attribute (variable) 'arch' to, which in this case is 'cortex_m4'. \n\n\n    newt target set my_target1 arch=cortex_m4\n\n\n\n\nGlobal flags work on all newt commands in the same way. An example is the flag \n-v, --verbose\n to ask for a verbose output while executing a command. The help flag \n-h\n or  \n--help\n is available on all commands but provides command specific output, of course. These flags may be specified in either a long or a short form. \n\n\nA command may additionally take flags specific to it. For example, the \n-b\n flag may be used with \nnewt egg install\n to tell it which branch to install the egg from. \n\n\n    newt egg install -b \nbranchname\n \neggname\n\n\n\n\n\nIn addition to the \nNewt Tool Manual\n in docs, command-line help is available for each command (and child command). Simply use the flag \n-h\n or \n--help\n as shown below:\n\n\n    $ newt target export --help\n    Export build targets from the current nest, and print them to \n    standard output. If the -a (or -export-all) option is specified, \n    then all targets will be exported. Otherwise, \ntarget-name\n \n    must be specified, and only that target will be exported.\n\n    Usage: \n      newt target export [flags]\n\n    Examples:\n      newt target export [-a -export-all] [\ntarget-name\n]\n      newt target export -a \n my_exports.txt\n      newt target export my_target \n my_target_export.txt\n\n    Flags:\n      -a, --export-all=false: If present, export all targets\n      -h, --help=false: help for export\n\n    Global Flags:\n      -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n      -q, --quiet=false: Be quiet; only display error output.\n      -s, --silent=false: Be silent; don't output anything.\n      -v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Command structure"
        }, 
        {
            "location": "/newt/newt_ops/#command-structure", 
            "text": "In the newt tool, commands represent actions and flags are modifiers for those actions. A command can have children commands which are also simply referred to as commands. One or more arguments may need to be provided to a command to execute it correctly.   In the example below, the  newt  command has the child command  target set . The first argument 'my_target1' is the name of the target whose attributes are being set. The second argument 'arch=cortex_m4' specifies the value to set the attribute (variable) 'arch' to, which in this case is 'cortex_m4'.       newt target set my_target1 arch=cortex_m4  Global flags work on all newt commands in the same way. An example is the flag  -v, --verbose  to ask for a verbose output while executing a command. The help flag  -h  or   --help  is available on all commands but provides command specific output, of course. These flags may be specified in either a long or a short form.   A command may additionally take flags specific to it. For example, the  -b  flag may be used with  newt egg install  to tell it which branch to install the egg from.       newt egg install -b  branchname   eggname   In addition to the  Newt Tool Manual  in docs, command-line help is available for each command (and child command). Simply use the flag  -h  or  --help  as shown below:      $ newt target export --help\n    Export build targets from the current nest, and print them to \n    standard output. If the -a (or -export-all) option is specified, \n    then all targets will be exported. Otherwise,  target-name  \n    must be specified, and only that target will be exported.\n\n    Usage: \n      newt target export [flags]\n\n    Examples:\n      newt target export [-a -export-all] [ target-name ]\n      newt target export -a   my_exports.txt\n      newt target export my_target   my_target_export.txt\n\n    Flags:\n      -a, --export-all=false: If present, export all targets\n      -h, --help=false: help for export\n\n    Global Flags:\n      -l, --loglevel= WARN : Log level, defaults to WARN.\n      -q, --quiet=false: Be quiet; only display error output.\n      -s, --silent=false: Be silent; don't output anything.\n      -v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Command Structure"
        }, 
        {
            "location": "/newt/command_list/newt_app/", 
            "text": "newt app \n\n\nUsage:\n\n\n    newt app [command][flags] input1 input2...\n\n\n\n\nAvailable commands:\n\n\n    generate-pkg-list Generate a pkg-list file from the pkgs in the current directory\n    add-pkg-list      Add a remote pkg-list, and put it in the current app\n    list-pkg-listes   List the pkg-listes installed in the current app\n    show-pkg-list     Show an individual pkg-list in the current app\n\n\n\n\nFlags:\n\n\n    -h, --help=false: help for app\n\n\n\n\nGlobal Flags:\n\n\n    -h, --help=false: help for newt\n    -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSub-command\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ngenerate-pkg-list\n\n\nTakes a snapshot of the pkgs in the current local directory and combines them into a pkg-list by the name of \ninput1\n and with the url of \ninput2\n and generates a standard output of the pkg-list details that can be redirected to a \n.yml\n pkg-list file. Typically the pkg-list file name is chosen to match the pkg-list name which means the standard output should be directed to a pkg-list file named \ninput1.yml\n\n\n\n\n\n\nadd-pkg-list\n\n\nDownloads the pkg-list of the name \ninput1\n from the master branch of the github repository \ninput2\n into the current app. A file named \ninput1.yml\n file is added in the \n.app/pkg-lists\n subdirectory inside the current local app. The \n.app/\n directory structure is created automatically if it does not exist.\n\n\n\n\n\n\nlist-pkg-lists\n\n\nLists all the pkg-lists present in the current app, including pkg-lists that may have been added from other apps on github. The output shows all the remote pkg-list names and the total pkgshells in each of the pkg-lists.\n\n\n\n\n\n\nshow-pkg-list\n\n\nShows information about the pkg-list that has the name given in the \ninput1\n argument. Output includes the pkg-list name, url, and all the constituent pkgs with their version numbers.\n\n\n\n\n\n\n\n\nCommand-specific flags\n\n\n\n\n\n\n\n\nSub-command\n\n\nAvailable flags\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nadd-pkg-list\n\n\n-b, --branch=\"\n\"\n\n\nFetches the pkg-list file with name \ninput1\n from the specified branch at \ninput1\n url of the github repository. All subsequent pkg installations will be done from that branch.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ngenerate-pkg-list\n\n\nnewt app generate-pkg-list mypkg-list https://github.com/apache/incubator-mynewt-larva \n mypkg-list.yml\n\n\nTakes a snapshot of the pkgs in the current app to form a pkg-list named mypkg-list with the url https://github.com/apache/incubator-mynewt-larva. The output is written to a file named \nmypkg-list.yml\n and describes the properties and contents of the pkg-list (name, url, pkgs).\n\n\n\n\n\n\nadd-pkg-list\n\n\nnewt app add-pkg-list larva https://github.com/apache/incubator-mynewt-larva\n\n\nAdds the remote pkg-list named larva at https://github.com/apache/incubator-mynewt-larva to the local app.\n\n\n\n\n\n\nlist-pkg-lists\n\n\nnewt app list-pkg-lists\n\n\nShows all the remote pkg-list description files that been downloaded into the current app. Output includes each list with name and summary of included packages e.g. \nRemote package list larva@master (num_pkgs: 44)\n\n\n\n\n\n\nshow-pkg-list\n\n\nnewt app show-pkg-list larva\n\n\nOutputs the details of the pkg-list named larva such as the github url where the remote sits, the constituent pkgs and their versions", 
            "title": "newt app"
        }, 
        {
            "location": "/newt/command_list/newt_app/#newt-app", 
            "text": "", 
            "title": "newt app "
        }, 
        {
            "location": "/newt/command_list/newt_app/#usage", 
            "text": "newt app [command][flags] input1 input2...", 
            "title": "Usage:"
        }, 
        {
            "location": "/newt/command_list/newt_app/#available-commands", 
            "text": "generate-pkg-list Generate a pkg-list file from the pkgs in the current directory\n    add-pkg-list      Add a remote pkg-list, and put it in the current app\n    list-pkg-listes   List the pkg-listes installed in the current app\n    show-pkg-list     Show an individual pkg-list in the current app", 
            "title": "Available commands:"
        }, 
        {
            "location": "/newt/command_list/newt_app/#flags", 
            "text": "-h, --help=false: help for app", 
            "title": "Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_app/#global-flags", 
            "text": "-h, --help=false: help for newt\n    -l, --loglevel= WARN : Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Global Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_app/#description", 
            "text": "Sub-command  Explanation      generate-pkg-list  Takes a snapshot of the pkgs in the current local directory and combines them into a pkg-list by the name of  input1  and with the url of  input2  and generates a standard output of the pkg-list details that can be redirected to a  .yml  pkg-list file. Typically the pkg-list file name is chosen to match the pkg-list name which means the standard output should be directed to a pkg-list file named  input1.yml    add-pkg-list  Downloads the pkg-list of the name  input1  from the master branch of the github repository  input2  into the current app. A file named  input1.yml  file is added in the  .app/pkg-lists  subdirectory inside the current local app. The  .app/  directory structure is created automatically if it does not exist.    list-pkg-lists  Lists all the pkg-lists present in the current app, including pkg-lists that may have been added from other apps on github. The output shows all the remote pkg-list names and the total pkgshells in each of the pkg-lists.    show-pkg-list  Shows information about the pkg-list that has the name given in the  input1  argument. Output includes the pkg-list name, url, and all the constituent pkgs with their version numbers.", 
            "title": "Description"
        }, 
        {
            "location": "/newt/command_list/newt_app/#command-specific-flags", 
            "text": "Sub-command  Available flags  Explanation      add-pkg-list  -b, --branch=\" \"  Fetches the pkg-list file with name  input1  from the specified branch at  input1  url of the github repository. All subsequent pkg installations will be done from that branch.", 
            "title": "Command-specific flags"
        }, 
        {
            "location": "/newt/command_list/newt_app/#examples", 
            "text": "Sub-command  Usage  Explanation      generate-pkg-list  newt app generate-pkg-list mypkg-list https://github.com/apache/incubator-mynewt-larva   mypkg-list.yml  Takes a snapshot of the pkgs in the current app to form a pkg-list named mypkg-list with the url https://github.com/apache/incubator-mynewt-larva. The output is written to a file named  mypkg-list.yml  and describes the properties and contents of the pkg-list (name, url, pkgs).    add-pkg-list  newt app add-pkg-list larva https://github.com/apache/incubator-mynewt-larva  Adds the remote pkg-list named larva at https://github.com/apache/incubator-mynewt-larva to the local app.    list-pkg-lists  newt app list-pkg-lists  Shows all the remote pkg-list description files that been downloaded into the current app. Output includes each list with name and summary of included packages e.g.  Remote package list larva@master (num_pkgs: 44)    show-pkg-list  newt app show-pkg-list larva  Outputs the details of the pkg-list named larva such as the github url where the remote sits, the constituent pkgs and their versions", 
            "title": "Examples"
        }, 
        {
            "location": "/newt/command_list/newt_help/", 
            "text": "newt help \n\n\nUsage:\n\n\n    newt help [input1]\n\n\n\n\nFlags:\n\n\n\n-h, --help=false: help for newt\n-l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n-q, --quiet=false: Be quiet; only display error output.\n-s, --silent=false: Be silent; don't output anything.\n-v, --verbose=false: Enable verbose output when executing commands.\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nhelp\n\n\nnewt help target\n\n\nDisplays the help text for the newt command 'target'\n\n\n\n\n\n\nhelp\n\n\nnewt help\n\n\nDisplays the help text for newt tool", 
            "title": "newt help"
        }, 
        {
            "location": "/newt/command_list/newt_help/#newt-help", 
            "text": "", 
            "title": "newt help "
        }, 
        {
            "location": "/newt/command_list/newt_help/#usage", 
            "text": "newt help [input1]", 
            "title": "Usage:"
        }, 
        {
            "location": "/newt/command_list/newt_help/#flags", 
            "text": "-h, --help=false: help for newt\n-l, --loglevel= WARN : Log level, defaults to WARN.\n-q, --quiet=false: Be quiet; only display error output.\n-s, --silent=false: Be silent; don't output anything.\n-v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_help/#examples", 
            "text": "Sub-command  Usage  Explanation      help  newt help target  Displays the help text for the newt command 'target'    help  newt help  Displays the help text for newt tool", 
            "title": "Examples"
        }, 
        {
            "location": "/newt/command_list/newt_new/", 
            "text": "newt new \n\n\nCreate a new application, specified by \n, from a given skeleton. If the optional \n parameter is specified, then download the skeleton of the application from \nthat URL instead of using the default, and create a new app directory by the name of \n. Currently, the default skeleton is the \ntadpole repository\n in Apache Mynewt. \n\n\nUsage:\n\n\n    newt new [flags] \napp-name\n [, \napp-url\n]\n\n\n\n\nFlags:\n\n\n    -h, --help=false: help for app\n\n\n\n\nGlobal Flags:\n\n\n    -h, --help=false: help for newt\n    -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nnewt new\n\n\nnewt new test_project\n\n\nCreates a new app named \"test_project \" using the default skeleton\n\n\n\n\n\n\n\n\nnewt new myapp \n\n\nCreates a new app named \"myapp\" using the skeleton at the \n specified", 
            "title": "newt new"
        }, 
        {
            "location": "/newt/command_list/newt_new/#newt-new", 
            "text": "Create a new application, specified by  , from a given skeleton. If the optional   parameter is specified, then download the skeleton of the application from \nthat URL instead of using the default, and create a new app directory by the name of  . Currently, the default skeleton is the  tadpole repository  in Apache Mynewt.", 
            "title": "newt new "
        }, 
        {
            "location": "/newt/command_list/newt_new/#usage", 
            "text": "newt new [flags]  app-name  [,  app-url ]", 
            "title": "Usage:"
        }, 
        {
            "location": "/newt/command_list/newt_new/#flags", 
            "text": "-h, --help=false: help for app", 
            "title": "Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_new/#global-flags", 
            "text": "-h, --help=false: help for newt\n    -l, --loglevel= WARN : Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Global Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_new/#examples", 
            "text": "Sub-command  Usage  Explanation      newt new  newt new test_project  Creates a new app named \"test_project \" using the default skeleton     newt new myapp   Creates a new app named \"myapp\" using the skeleton at the   specified", 
            "title": "Examples"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/", 
            "text": "newt pkg \n\n\nProvides sub-commands to search, display and install packages in your current application or workspace.\n\n\nUsage:\n\n\n    newt pkg [command][flag] input1 input2\n\n\n\n\nAvailable Commands:\n\n\n    list        List pkgs in the current app\n    checkdeps   Check pkg dependencies\n    hunt        Search for pkg from pkg-lists\n    show        Show the contents of a pkg.\n    install     Install a pkg\n    remove      Remove a pkg\n\n\n\n\nFlags:\n\n\n    -h, --help=false: help for pkg\n\n#### Global Flags:\n\n    -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSub-command\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nlist\n\n\nList all the pkgs in the current app. The output shows the name, version, path, and any additional attributes of each pkg in the app such as dependencies, capabilities, and linker scripts. The newt command gets the attributes of each pkg from the corresponsing pkg.yml description file.\n\n\n\n\n\n\ncheckdeps\n\n\nResolve all dependencies in the local app. This command goes through all pkgs currently installed, checks their dependencies, and prints any unresolved dependencies between pkgs.\n\n\n\n\n\n\nsearch\n\n\nSearches for a pkg, specified by \ninput1\n. The local app, along with all remote apps (pkg-lists) are searched. All matched pkgs are shown along with the pkg-list informaton. Installed pkgs are called out as such. The command can be invoked from anywhere in the app.\n\n\n\n\n\n\nshow\n\n\nShow the contents of the pkg named \ninput2\n found in the pkg-list named \ninput1\n. The pkg-list name is optional; if only the pkg name is given as the argument it is resolved using all the pkg-lists installed in the current app. If the pkg is present in multiple pkg-lists it will list all of them along with the pkg-list information for each.\n\n\n\n\n\n\ninstall\n\n\nInstall the pkg specified by \ninput2\n from the pkg-list named \ninput1\n. The command downloads the pkg from the github repository using the URL in the pkg-list description file (typically donwloaded as 'input1@\n.yml' in .app/pkg-lists). It also downloads all the dependencies (constituent pkgs) as decribed in the pkg's description file ('pkg.yml') and installs all of them. The pkg-list name is optional. If only the pkg name is given as the argument, the command looks for the pkg name in all the pkg-lists in the local app and installs accordingly. A pkg is installed by this command only if it has not already been installed.\n\n\n\n\n\n\nremove\n\n\nRemove a pkg named \ninput2\n from pkg-list \ninput1\n, if pkg-list is specified. Otherwise only one input required - that of the name of the pkg to be removed from the local app.\n\n\n\n\n\n\n\n\nCommand-specific flags\n\n\n\n\n\n\n\n\nSub-command\n\n\nAvailable flags\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ninstall\n\n\n-b, --branch=\"\n\"\n\n\nInstalls the pkgs from the branch name or tag of the pkg-list specified\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nlist\n\n\nnewt pkg list\n\n\nCList all of the pkgs in the current app and the details of the pkgs.\n\n\n\n\n\n\ncheckdeps\n\n\nnewt pkg checkdeps\n\n\nChecks all the dependencies between pkgs in the app. Lists any unresolved dependencies.\n\n\n\n\n\n\nhunt\n\n\nnewt pkg hunt blinky\n\n\nHunts for the pkg named 'blinky'. The command can be invoked from anywhere in the app. Results show if the pkg is installed and which pkg-list, if any, has the pkg.\n\n\n\n\n\n\nshow\n\n\nnewt pkg show larva libs/os\n\n\nShow the contents of the pkg named 'libs/os' in the pkg-list named larva. The contents are essentially derived from the pkg's 'pkg.yml' file.\n\n\n\n\n\n\ninstall\n\n\nnewt pkg install hw/bsp/stm32f3discovery\n\n\nDownloads and installs the pkg named \"stm32f3discovery\" (specified with its full path name inside the remote app) along with all its dependencies from the remote app on github. Since no pkg-list is specified, the URL for the remote app in the pkg-list description file found in the local app (in .app/pkg-lists for the project) is used.\n\n\n\n\n\n\nremove\n\n\nnewt pkg remove larva blinky\n\n\nRemoves the pkg named blinky only from the pkg-list named larva\n\n\n\n\n\n\nremove\n\n\nnewt pkg remove blinky\n\n\nRemoves the pkg named blinky from the local app", 
            "title": "newt pkg"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#newt-pkg", 
            "text": "Provides sub-commands to search, display and install packages in your current application or workspace.", 
            "title": "newt pkg "
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#usage", 
            "text": "newt pkg [command][flag] input1 input2", 
            "title": "Usage:"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#available-commands", 
            "text": "list        List pkgs in the current app\n    checkdeps   Check pkg dependencies\n    hunt        Search for pkg from pkg-lists\n    show        Show the contents of a pkg.\n    install     Install a pkg\n    remove      Remove a pkg", 
            "title": "Available Commands:"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#flags", 
            "text": "-h, --help=false: help for pkg\n\n#### Global Flags:\n\n    -l, --loglevel= WARN : Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#description", 
            "text": "Sub-command  Explanation      list  List all the pkgs in the current app. The output shows the name, version, path, and any additional attributes of each pkg in the app such as dependencies, capabilities, and linker scripts. The newt command gets the attributes of each pkg from the corresponsing pkg.yml description file.    checkdeps  Resolve all dependencies in the local app. This command goes through all pkgs currently installed, checks their dependencies, and prints any unresolved dependencies between pkgs.    search  Searches for a pkg, specified by  input1 . The local app, along with all remote apps (pkg-lists) are searched. All matched pkgs are shown along with the pkg-list informaton. Installed pkgs are called out as such. The command can be invoked from anywhere in the app.    show  Show the contents of the pkg named  input2  found in the pkg-list named  input1 . The pkg-list name is optional; if only the pkg name is given as the argument it is resolved using all the pkg-lists installed in the current app. If the pkg is present in multiple pkg-lists it will list all of them along with the pkg-list information for each.    install  Install the pkg specified by  input2  from the pkg-list named  input1 . The command downloads the pkg from the github repository using the URL in the pkg-list description file (typically donwloaded as 'input1@ .yml' in .app/pkg-lists). It also downloads all the dependencies (constituent pkgs) as decribed in the pkg's description file ('pkg.yml') and installs all of them. The pkg-list name is optional. If only the pkg name is given as the argument, the command looks for the pkg name in all the pkg-lists in the local app and installs accordingly. A pkg is installed by this command only if it has not already been installed.    remove  Remove a pkg named  input2  from pkg-list  input1 , if pkg-list is specified. Otherwise only one input required - that of the name of the pkg to be removed from the local app.", 
            "title": "Description"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#command-specific-flags", 
            "text": "Sub-command  Available flags  Explanation      install  -b, --branch=\" \"  Installs the pkgs from the branch name or tag of the pkg-list specified", 
            "title": "Command-specific flags"
        }, 
        {
            "location": "/newt/command_list/newt_pkg/#examples", 
            "text": "Sub-command  Usage  Explanation      list  newt pkg list  CList all of the pkgs in the current app and the details of the pkgs.    checkdeps  newt pkg checkdeps  Checks all the dependencies between pkgs in the app. Lists any unresolved dependencies.    hunt  newt pkg hunt blinky  Hunts for the pkg named 'blinky'. The command can be invoked from anywhere in the app. Results show if the pkg is installed and which pkg-list, if any, has the pkg.    show  newt pkg show larva libs/os  Show the contents of the pkg named 'libs/os' in the pkg-list named larva. The contents are essentially derived from the pkg's 'pkg.yml' file.    install  newt pkg install hw/bsp/stm32f3discovery  Downloads and installs the pkg named \"stm32f3discovery\" (specified with its full path name inside the remote app) along with all its dependencies from the remote app on github. Since no pkg-list is specified, the URL for the remote app in the pkg-list description file found in the local app (in .app/pkg-lists for the project) is used.    remove  newt pkg remove larva blinky  Removes the pkg named blinky only from the pkg-list named larva    remove  newt pkg remove blinky  Removes the pkg named blinky from the local app", 
            "title": "Examples"
        }, 
        {
            "location": "/newt/command_list/newt_target/", 
            "text": "newt target \n\n\nProvides commands to create, build, delete, and query targets. \n\n\nUsage:\n\n\n    newt target [command] input1 [flag1] [flag2]\n\n\n\n\nAvailable Commands:\n\n\n    set         Set target configuration variable\n    unset       Unset target configuration variable\n    delete      Delete target\n    create      Create a target\n    show        View target configuration variables\n    build       Build target\n    test        Test target\n    size        Size of the target\n    label       Add image header to target binary\n    download    Download project to target\n    debug       Open debugger session to target\n    export      Export target\n    import      Import target\n\n\n\n\nFlags:\n\n\n    -h, --help=false: help for target\n\n\n\n\nGlobal Flags:\n\n\n    -l, --loglevel=\nWARN\n: Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSub-command\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nset\n\n\nSet attributes of the target. Currently the list of possible attributes are:\narch, compiler, compiler_def, project, bsp, pkg, identities, capabilities, dependencies, cflags, lflags\n. Typically only the first 5 need to be set for a hardware target. For a simulated target, e.g. for software testing purposes, \narch=sim\n, \ncompiler=sim\n, and \npkg=\npkg name to be tested\n. You cannot set both the project and pkg for a target.\n\n\n\n\n\n\nunset\n\n\nUnset attributes of the target in its configuration.\n\n\n\n\n\n\ndelete\n\n\nDeletes only the description for the target. Does not delete the target directory with associated binaries. If you want to clean out the binaries, list files, and executables use\nnewt target build \ntarget-name\n clean\n \nbefore\n deleting the target!\n\n\n\n\n\n\ncreate\n\n\nCreates a target description or build definition by the name \ninput1\n. By default it assigns the sim (simulator) architecture to it which allows you to build new projects and software on your native OS and try it out.\n\n\n\n\n\n\nshow\n\n\nDisplay the configuration defined for the target named \ninput1\n. If no \ninput1\n is specified then show the details for all the targets in the app.\n\n\n\n\n\n\nbuild\n\n\nBuild the source code into an image that can be loaded on the hardware associated with the target named \ninput1\n to do the application enabled by the 'project' associated with that target (via the target definition). It creates 'bin/' and 'bin/\n/' subdirectories inside the base directory for the project, compiles and generates binaries and executables, and places them in 'bin/\n/.\n\n\n\n\n\n\ntest\n\n\nTest a pkg on the target named \ninput1\n. The pkg is either supplied as an argument to the command line invocation of \nnewt target test\n or added as part of the target definition. If only the target is specified as \ninput1\n, then the pkg in the target's definition is automatically chosen to be tested. You currently cannot test an entire project on a hardware target. The test command is envisioned for use if one or two pkgs gets updated and each needs to be tested against a target. Alternatively, a script may be written for a series of tests on several pkgs.\n\n\n\n\n\n\nsize\n\n\nDisplays the memory used (in bytes) by the component libraries that have been compiled and linked to form the executable for the specified target build (input1). The memory usage of the different components is shown by each memory type available in the bsp (board support package) used in the target e.g. RAM, flash, CCM etc.\n\n\n\n\n\n\nlabel\n\n\nAppends an image header to the created binary file for the target named \ninput1\n. Version number in the header is set to the value given as \n[flag1]\n. The manifest.json file in the directory with the binaries (project/\n/bin/\n) reflects the version number. A manifest.json file is created if none exists for the target.\n\n\n\n\n\n\nexport\n\n\nExports the configurations of the specified target \ninput1\n. If -a or -export-all flag is used, then all targets are exported and printed out to standard out. You may redirect the output to a file.\n\n\n\n\n\n\nimport\n\n\nImport one or more target configuration from standard input or a file. Each target starts with \n@target=\ntarget-name\n followed by the attributes. The list of targets should end with \n@endtargets\n.\n\n\n\n\n\n\ndownload\n\n\nDownloads the binary executable \ntarget-name\n.elf.bin\n to the board.\n\n\n\n\n\n\ndebug\n\n\nDownloads the binary executable \ntarget-name\n.elf.bin\n to the board and starts up the openocd/gdb combination session. gdb takes over the terminal.\n\n\n\n\n\n\n\n\nCommand-specific flags\n\n\n\n\n\n\n\n\nSub-command\n\n\nAvailable flags\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nbuild\n\n\nclean\n\n\nAll the binaries and object files for the specified target will be removed. The subdirectory named after the specified target within that project is removed.\n\n\n\n\n\n\nbuild clean\n\n\nall\n\n\nAll the binaries and object files for all targets are removed, and subdirectories of all targets for the project are removed. However, the entire repository is not emptied since any pkgs or projects that the specified target doesn't reference are not touched.\n\n\n\n\n\n\nexport\n\n\n-a, -export-all\n\n\nExport all targets. \ninput1\n is not necessary when this flag is used.\n\n\n\n\n\n\nimport\n\n\n-a, -import-all\n\n\nImport all targets typed into standard input or redirected from a file.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nset\n\n\nnewt target set myblinky compiler=arm-none-eabi-m4\n\n\nSet the compiler for the 'myblinky' target to the gcc compiler for embedded ARM chips.\n\n\n\n\n\n\nunset\n\n\nnewt target unset myblinky compiler\n\n\nRemove the setting for the compiler for the 'myblinky' target.\n\n\n\n\n\n\ndelete\n\n\nnewt target delete myblinky\n\n\nDelete the target description for the target named 'myblinky'. Note that it does not remove any binaries or clean out the directory for this target.\n\n\n\n\n\n\ncreate\n\n\nnewt target create blink_f3disc\n\n\nCreate a new target description by the name 'blink_f3disc'. The architecture is 'sim' by default and can be changed using subcommand 'set' above.\n\n\n\n\n\n\nshow\n\n\nnewt target show myblinky\n\n\nShow the target attributes set for 'myblinky'\n\n\n\n\n\n\nbuild\n\n\nnewt target build blink_f3disc\n\n\nCompile the source code for the target named blink_f3disc and generate binaries that can be loaded into the target hardware.\n\n\n\n\n\n\ntest\n\n\nnewt target test test_target pkg=libs/os\n\n\nTests the pkg named 'libs/os' against the target named 'test_target'\n\n\n\n\n\n\nsize\n\n\nnewt target size -v boot_olimex\n\n\nDisplays the memory footprint in bytes for all object and linked files for the target named boot_olimex. The -v option shows all the steps of loading and inspecting the different pkgs required for the project on this target as well as the different memory locations available. The memory usage for each component is broken up into the different memory types used. An example output is shown for \nnewt target size boot_olimex\n below.\n\n\n\n\n\n\nlabel\n\n\nnewt target label boot_olimex 2.0.1\n\n\nAppends an image header specifying the version number as 2.0.1 to the binary image file for target named boot_olimex. The version number in the manifest.json file for this target is also updated to 2.0.1.\n\n\n\n\n\n\nexport\n\n\nnewt target export -a \n my_exports.txt\n\n\nExport all build targets from the current app, and redirect output to a file named 'my_exports.txt'.\n\n\n\n\n\n\nexport\n\n\nnewt target export -export-all\n\n\nExport all build targets from the current app, and print them to standard output on the screen.\n\n\n\n\n\n\nexport\n\n\nnewt target export my_target\n\n\nExport only target named 'my_target' and print it to standard output on the screen.\n\n\n\n\n\n\nimport\n\n\nnewt target import ex_tgt_1 \n exported_targets.txt\n\n\nImports the target configuration for 'ex_tgt_1' in 'exported_targets.txt'.\n\n\n\n\n\n\nimport\n\n\nnewt target import -a \n in_targets.txt\n\n\nImports all the targets specified in the file named \nin_targets.txt\n. A sample file is shown after this table.\n\n\n\n\n\n\nsize\n\n\nnewt target size blink_nordic\n\n\nInspects and lists the RAM and Flash memory use by each component (object files and libraries) of the target.\n\n\n\n\n\n\ndownload\n\n\nnewt target -v -lVERBOSE download blinky\n\n\nDownloads \nblinky.elf.bin\n to the hardware in verbose mode with logging turned on at VERBOSE level.\n\n\n\n\n\n\ndebug\n\n\nnewt target debug blinky\n\n\nDownloads \nblinky.elf.bin\n to the hardware, opens up a gdb session with \nblinky.elf\n in the terminal, and halts for further input in gdb.\n\n\n\n\n\n\n\n\nExample output for \nnewt target size boot_olimex\n:\n\n\n\n$ newt target size boot_olimex\nInspecting target boot_olimex (project = boot)\n  FLASH     CCM     RAM \n     13       0       3 *fill*\n    239       0       0 boot.o\n    124       0       0 crt0.o\n     84       0      40 crtbegin.o\n      4       0       4 crtend.o\n      8       0       0 crti.o\n     16       0       0 crtn.o\n   1396       0      50 libbaselibc.a\n   2054       0    1104 libbootutil.a\n     84       0       0 libcmsis-core.a\n    266       0       4 libfs.a\n     80       0       0 libg.a\n   1452       0       0 libgcc.a\n    940       0       8 libhal.a\n  12130       0     538 libnffs.a\n   1172    3072      68 libolimex_stm32-e407_devboard.a\n   3654       0     645 libos.a\n   1504       0      32 libstm32f4xx.a\n\n\n\n\nExample content for \nin_targets.txt\n file used for importing targets \ntest3\n and \ntest4\n.\n\n\n\n\n@target=test3\n\nproject=blinked\n\narch=sim\n\ncompiler_def=debug\n\ncompiler=arm-none-eabi-m4\n\n@target=test4\n\nproject=super_blinky\n\narch=sim\n\ncompiler_def=debug\n\ncompiler=arm-none-eabi-m4\n\n@endtargets", 
            "title": "newt target"
        }, 
        {
            "location": "/newt/command_list/newt_target/#newt-target", 
            "text": "Provides commands to create, build, delete, and query targets.", 
            "title": "newt target "
        }, 
        {
            "location": "/newt/command_list/newt_target/#usage", 
            "text": "newt target [command] input1 [flag1] [flag2]", 
            "title": "Usage:"
        }, 
        {
            "location": "/newt/command_list/newt_target/#available-commands", 
            "text": "set         Set target configuration variable\n    unset       Unset target configuration variable\n    delete      Delete target\n    create      Create a target\n    show        View target configuration variables\n    build       Build target\n    test        Test target\n    size        Size of the target\n    label       Add image header to target binary\n    download    Download project to target\n    debug       Open debugger session to target\n    export      Export target\n    import      Import target", 
            "title": "Available Commands:"
        }, 
        {
            "location": "/newt/command_list/newt_target/#flags", 
            "text": "-h, --help=false: help for target", 
            "title": "Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_target/#global-flags", 
            "text": "-l, --loglevel= WARN : Log level, defaults to WARN.\n    -q, --quiet=false: Be quiet; only display error output.\n    -s, --silent=false: Be silent; don't output anything.\n    -v, --verbose=false: Enable verbose output when executing commands.", 
            "title": "Global Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_target/#description", 
            "text": "Sub-command  Explanation      set  Set attributes of the target. Currently the list of possible attributes are: arch, compiler, compiler_def, project, bsp, pkg, identities, capabilities, dependencies, cflags, lflags . Typically only the first 5 need to be set for a hardware target. For a simulated target, e.g. for software testing purposes,  arch=sim ,  compiler=sim , and  pkg= pkg name to be tested . You cannot set both the project and pkg for a target.    unset  Unset attributes of the target in its configuration.    delete  Deletes only the description for the target. Does not delete the target directory with associated binaries. If you want to clean out the binaries, list files, and executables use newt target build  target-name  clean   before  deleting the target!    create  Creates a target description or build definition by the name  input1 . By default it assigns the sim (simulator) architecture to it which allows you to build new projects and software on your native OS and try it out.    show  Display the configuration defined for the target named  input1 . If no  input1  is specified then show the details for all the targets in the app.    build  Build the source code into an image that can be loaded on the hardware associated with the target named  input1  to do the application enabled by the 'project' associated with that target (via the target definition). It creates 'bin/' and 'bin/ /' subdirectories inside the base directory for the project, compiles and generates binaries and executables, and places them in 'bin/ /.    test  Test a pkg on the target named  input1 . The pkg is either supplied as an argument to the command line invocation of  newt target test  or added as part of the target definition. If only the target is specified as  input1 , then the pkg in the target's definition is automatically chosen to be tested. You currently cannot test an entire project on a hardware target. The test command is envisioned for use if one or two pkgs gets updated and each needs to be tested against a target. Alternatively, a script may be written for a series of tests on several pkgs.    size  Displays the memory used (in bytes) by the component libraries that have been compiled and linked to form the executable for the specified target build (input1). The memory usage of the different components is shown by each memory type available in the bsp (board support package) used in the target e.g. RAM, flash, CCM etc.    label  Appends an image header to the created binary file for the target named  input1 . Version number in the header is set to the value given as  [flag1] . The manifest.json file in the directory with the binaries (project/ /bin/ ) reflects the version number. A manifest.json file is created if none exists for the target.    export  Exports the configurations of the specified target  input1 . If -a or -export-all flag is used, then all targets are exported and printed out to standard out. You may redirect the output to a file.    import  Import one or more target configuration from standard input or a file. Each target starts with  @target= target-name  followed by the attributes. The list of targets should end with  @endtargets .    download  Downloads the binary executable  target-name .elf.bin  to the board.    debug  Downloads the binary executable  target-name .elf.bin  to the board and starts up the openocd/gdb combination session. gdb takes over the terminal.", 
            "title": "Description"
        }, 
        {
            "location": "/newt/command_list/newt_target/#command-specific-flags", 
            "text": "Sub-command  Available flags  Explanation      build  clean  All the binaries and object files for the specified target will be removed. The subdirectory named after the specified target within that project is removed.    build clean  all  All the binaries and object files for all targets are removed, and subdirectories of all targets for the project are removed. However, the entire repository is not emptied since any pkgs or projects that the specified target doesn't reference are not touched.    export  -a, -export-all  Export all targets.  input1  is not necessary when this flag is used.    import  -a, -import-all  Import all targets typed into standard input or redirected from a file.", 
            "title": "Command-specific flags"
        }, 
        {
            "location": "/newt/command_list/newt_target/#examples", 
            "text": "Sub-command  Usage  Explanation      set  newt target set myblinky compiler=arm-none-eabi-m4  Set the compiler for the 'myblinky' target to the gcc compiler for embedded ARM chips.    unset  newt target unset myblinky compiler  Remove the setting for the compiler for the 'myblinky' target.    delete  newt target delete myblinky  Delete the target description for the target named 'myblinky'. Note that it does not remove any binaries or clean out the directory for this target.    create  newt target create blink_f3disc  Create a new target description by the name 'blink_f3disc'. The architecture is 'sim' by default and can be changed using subcommand 'set' above.    show  newt target show myblinky  Show the target attributes set for 'myblinky'    build  newt target build blink_f3disc  Compile the source code for the target named blink_f3disc and generate binaries that can be loaded into the target hardware.    test  newt target test test_target pkg=libs/os  Tests the pkg named 'libs/os' against the target named 'test_target'    size  newt target size -v boot_olimex  Displays the memory footprint in bytes for all object and linked files for the target named boot_olimex. The -v option shows all the steps of loading and inspecting the different pkgs required for the project on this target as well as the different memory locations available. The memory usage for each component is broken up into the different memory types used. An example output is shown for  newt target size boot_olimex  below.    label  newt target label boot_olimex 2.0.1  Appends an image header specifying the version number as 2.0.1 to the binary image file for target named boot_olimex. The version number in the manifest.json file for this target is also updated to 2.0.1.    export  newt target export -a   my_exports.txt  Export all build targets from the current app, and redirect output to a file named 'my_exports.txt'.    export  newt target export -export-all  Export all build targets from the current app, and print them to standard output on the screen.    export  newt target export my_target  Export only target named 'my_target' and print it to standard output on the screen.    import  newt target import ex_tgt_1   exported_targets.txt  Imports the target configuration for 'ex_tgt_1' in 'exported_targets.txt'.    import  newt target import -a   in_targets.txt  Imports all the targets specified in the file named  in_targets.txt . A sample file is shown after this table.    size  newt target size blink_nordic  Inspects and lists the RAM and Flash memory use by each component (object files and libraries) of the target.    download  newt target -v -lVERBOSE download blinky  Downloads  blinky.elf.bin  to the hardware in verbose mode with logging turned on at VERBOSE level.    debug  newt target debug blinky  Downloads  blinky.elf.bin  to the hardware, opens up a gdb session with  blinky.elf  in the terminal, and halts for further input in gdb.", 
            "title": "Examples"
        }, 
        {
            "location": "/newt/command_list/newt_target/#example-output-for-newt-target-size-boot_olimex", 
            "text": "$ newt target size boot_olimex\nInspecting target boot_olimex (project = boot)\n  FLASH     CCM     RAM \n     13       0       3 *fill*\n    239       0       0 boot.o\n    124       0       0 crt0.o\n     84       0      40 crtbegin.o\n      4       0       4 crtend.o\n      8       0       0 crti.o\n     16       0       0 crtn.o\n   1396       0      50 libbaselibc.a\n   2054       0    1104 libbootutil.a\n     84       0       0 libcmsis-core.a\n    266       0       4 libfs.a\n     80       0       0 libg.a\n   1452       0       0 libgcc.a\n    940       0       8 libhal.a\n  12130       0     538 libnffs.a\n   1172    3072      68 libolimex_stm32-e407_devboard.a\n   3654       0     645 libos.a\n   1504       0      32 libstm32f4xx.a", 
            "title": "Example output for newt target size boot_olimex:"
        }, 
        {
            "location": "/newt/command_list/newt_target/#example-content-for-in_targetstxt-file-used-for-importing-targets-test3-and-test4", 
            "text": "@target=test3 \nproject=blinked \narch=sim \ncompiler_def=debug \ncompiler=arm-none-eabi-m4 \n@target=test4 \nproject=super_blinky \narch=sim \ncompiler_def=debug \ncompiler=arm-none-eabi-m4 \n@endtargets", 
            "title": "Example content for in_targets.txt file used for importing targets test3 and test4."
        }, 
        {
            "location": "/newt/command_list/newt_version/", 
            "text": "newt version \n\n\nAllows you to query the version of newt installed in your application space.\n\n\nUsage:\n\n\n    newt version [flags]\n\n\n\n\nFlags:\n\n\n    -h, --help=false: help for version\n\n\n\n\nGlobal Flags:\n\n\n    -l, --loglevel string   Log level, defaults to WARN. (default \nWARN\n)\n    -q, --quiet             Be quiet; only display error output.\n    -s, --silent            Be silent; don't output anything.\n    -v, --verbose           Enable verbose output when executing commands.\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nnewt version\n\n\nDisplays the version of newt tool installed", 
            "title": "newt version"
        }, 
        {
            "location": "/newt/command_list/newt_version/#newt-version", 
            "text": "Allows you to query the version of newt installed in your application space.", 
            "title": "newt version "
        }, 
        {
            "location": "/newt/command_list/newt_version/#usage", 
            "text": "newt version [flags]", 
            "title": "Usage:"
        }, 
        {
            "location": "/newt/command_list/newt_version/#flags", 
            "text": "-h, --help=false: help for version", 
            "title": "Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_version/#global-flags", 
            "text": "-l, --loglevel string   Log level, defaults to WARN. (default  WARN )\n    -q, --quiet             Be quiet; only display error output.\n    -s, --silent            Be silent; don't output anything.\n    -v, --verbose           Enable verbose output when executing commands.", 
            "title": "Global Flags:"
        }, 
        {
            "location": "/newt/command_list/newt_version/#examples", 
            "text": "Sub-command  Usage  Explanation      version  newt version  Displays the version of newt tool installed", 
            "title": "Examples"
        }, 
        {
            "location": "/newtmgr/overview/", 
            "text": "Newt Manager\n\n\nNewt Manager (newtmgr) is the application tool that enables a user to communicate with and manage remote instances of Mynewt OS. \n\n\nDescription\n\n\nCommand List\n\n\nAvailable high-level commands\n\n\n    help        Lists commands and flags available \n    conn        Manage newtmgr connection profiles\n    echo        Send data to remote endpoint using newtmgr, and receive data back\n    image       Manage images on remote instance\n    stat        Read statistics from a remote endpoint\n    taskstats   Read statistics from a remote endpoint\n    mpstats     Read statistics from a remote endpoint\n    config      Read or write config value on target\n\n\n\n\nAvailable Flags\n\n\n  -c, --connection string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nnewtmgr -caditi03 taskstats\n\n\n\n\n\n\n\n\n\n\n\n\nhelp\n\n\nUsage:\n\n\n    newtmgr help [input1]\n\n\n\n\nYou can also use \"newtmgr [command] --help\" to display the help text for a newtmgr command.\n\n\nFlags:\n\n\n  -c, --connection string      connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nAvailable Flags\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\ntaskstats\n\n\nnewtmgr -cprofile1 taskstats\n\n\nRun the taskstats subcommand on the device connected via the 'profile1' connection\n\n\n\n\n\n\n\n\nconn\n\n\nUsage:\n\n\n    newtmgr conn [flags]\n    newtmgr conn [command]\n\n\n\n\nAvailable commands: \n\n\n    add         Add a newtmgr connection profile\n    delete      Delete a newtmgr connection profile\n    show        Show newtmgr connection profiles\n\n\n\n\nFlags:\n\n\n  -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSub-command\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nadd\n\n\nAdds a connection profile. A properly defined profile needs a name, a connection type, and the physical or virtual port to be used for communication.\n\n\n\n\n\n\ndelete\n\n\nDeletes a connection profile associated with the given name\n\n\n\n\n\n\nshow\n\n\nList the specified or all the connection profiles with the name, connection type, and the controlling terminal or port.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nadd\n\n\nnewtmgr conn add myserial02 type=serial connstring=/dev/ttys002\n\n\nAdds a newtmgr connection profile for the serial port /dev/ttys002 and names it 'myserial02'\n\n\n\n\n\n\ndelete\n\n\nnewtmgr conn delete myserial02\n\n\nDeletes the connection profile named 'myserial02'\n\n\n\n\n\n\nshow\n\n\nnewtmgr conn show myserial01\n\n\nShows the details of the profile named 'myserial01'\n\n\n\n\n\n\nshow\n\n\nnewtmgr conn show\n\n\nShows all the current profiles defined\n\n\n\n\n\n\n\n\necho\n\n\nUsage:\n\n\n    newtmgr echo [flags] [text]\n\n\n\n\nThis command sends the text to the remote device at the other end of the connection specified with the -c flag and outputs the text when it gets a response from the device. If the device is not responding or if the connection profile is invalid it displays errors. \n\n\nFlags:\n\n\n  -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\necho\n\n\nnewtmgr echo -c profile01 hello\n\n\nSends the string 'hello' to the remote device over the connection profile 'profile01' and receives the string back and displays it.\n\n\n\n\n\n\n\n\nimage\n\n\nUsage:\n\n\n  newtmgr image [flags]\n  newtmgr image [command]\n\n\n\n\nAvailable commands: \n\n\n    list         Show target images\n    upload       Upload image to target\n    boot         Which image to boot\n    fileupload   Upload file to target\n    filedownload Download file from target\n\n\n\n\nFlags:\n\n\n  -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\nSub-command\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nlist\n\n\nAdds a connection profile. A properly defined profile needs a name, a connection type, and the physical or virtual port to be used for communication.\n\n\n\n\n\n\nupload\n\n\nDeletes a connection profile associated with the given name\n\n\n\n\n\n\nboot\n\n\nSpecify the image to boot\n\n\n\n\n\n\nfileupload\n\n\nupload file to the remote target\n\n\n\n\n\n\nfiledownload\n\n\ndownload/retrieve file from remote target\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nlist\n\n\nnewtmgr list\n\n\n\n\n\n\n\n\nupload\n\n\nnewtmgr upload\n\n\n\n\n\n\n\n\nboot\n\n\nnewtmgr boot\n\n\n\n\n\n\n\n\nfileupload\n\n\nnewtmgr fileupload\n\n\n\n\n\n\n\n\nfiledownload\n\n\nnewtmgr filedownload\n\n\n\n\n\n\n\n\n\n\nstat\n\n\nUsage:\n\n\n  newtmgr stat [flags]\n  newtmgr stat [command]\n\n\n\n\nFlags:\n\n\n  -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nstat\n\n\nnewtmgr stat\n\n\n\n\n\n\n\n\n\n\ntaskstats\n\n\nUsage:\n\n\n  newtmgr taskstats [flags]\n  newtmgr taskstats [command]\n\n\n\n\nLists all the tasks running on the remote endpoint at the end of the specified connection and for each task lists statistics such as priority, task id, runtime (how long the task has been running in ms), context switch count, stack size allocated, actual stack usage, last sanity checkin, next sanity check-in. \n\n\nFlags:\n\n\n  -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nSub-command\n\n\nUsage\n\n\nExplanation\n\n\n\n\n\n\n\n\n\n\nstat\n\n\nnewtmgr taskstats -c profile01\n\n\nLists all the tasks running on the remote device at the end of connection named 'profile01'\n\n\n\n\n\n\n\n\nExample output\n\n\n$ newtmgr  -c profile01 taskstats\nReturn Code = 0\n  idle (prio=255 tid=0 runtime=3299340 cswcnt=280342 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  os_sanity (prio=254 tid=1 runtime=0 cswcnt=3287 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  shell (prio=3 tid=2 runtime=0 cswcnt=165 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  uart_poller (prio=0 tid=3 runtime=0 cswcnt=279368 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  newtmgr (prio=4 tid=4 runtime=0 cswcnt=14 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  task1 (prio=1 tid=5 runtime=0 cswcnt=3287 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  task2 (prio=2 tid=6 runtime=0 cswcnt=3287 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)", 
            "title": "Introduction"
        }, 
        {
            "location": "/newtmgr/overview/#newt-manager", 
            "text": "Newt Manager (newtmgr) is the application tool that enables a user to communicate with and manage remote instances of Mynewt OS.", 
            "title": "Newt Manager"
        }, 
        {
            "location": "/newtmgr/overview/#description", 
            "text": "", 
            "title": "Description"
        }, 
        {
            "location": "/newtmgr/overview/#command-list", 
            "text": "", 
            "title": "Command List"
        }, 
        {
            "location": "/newtmgr/overview/#available-high-level-commands", 
            "text": "help        Lists commands and flags available \n    conn        Manage newtmgr connection profiles\n    echo        Send data to remote endpoint using newtmgr, and receive data back\n    image       Manage images on remote instance\n    stat        Read statistics from a remote endpoint\n    taskstats   Read statistics from a remote endpoint\n    mpstats     Read statistics from a remote endpoint\n    config      Read or write config value on target", 
            "title": "Available high-level commands"
        }, 
        {
            "location": "/newtmgr/overview/#available-flags", 
            "text": "-c, --connection string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Examples     Sub-command  Usage  Explanation      newtmgr -caditi03 taskstats", 
            "title": "Available Flags"
        }, 
        {
            "location": "/newtmgr/overview/#help", 
            "text": "", 
            "title": "help"
        }, 
        {
            "location": "/newtmgr/overview/#usage", 
            "text": "newtmgr help [input1]  You can also use \"newtmgr [command] --help\" to display the help text for a newtmgr command.  Flags:    -c, --connection string      connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Examples     Sub-command  Available Flags  Explanation      taskstats  newtmgr -cprofile1 taskstats  Run the taskstats subcommand on the device connected via the 'profile1' connection", 
            "title": "Usage:"
        }, 
        {
            "location": "/newtmgr/overview/#conn", 
            "text": "", 
            "title": "conn"
        }, 
        {
            "location": "/newtmgr/overview/#usage_1", 
            "text": "newtmgr conn [flags]\n    newtmgr conn [command]  Available commands:       add         Add a newtmgr connection profile\n    delete      Delete a newtmgr connection profile\n    show        Show newtmgr connection profiles  Flags:    -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Description     Sub-command  Explanation      add  Adds a connection profile. A properly defined profile needs a name, a connection type, and the physical or virtual port to be used for communication.    delete  Deletes a connection profile associated with the given name    show  List the specified or all the connection profiles with the name, connection type, and the controlling terminal or port.     Examples     Sub-command  Usage  Explanation      add  newtmgr conn add myserial02 type=serial connstring=/dev/ttys002  Adds a newtmgr connection profile for the serial port /dev/ttys002 and names it 'myserial02'    delete  newtmgr conn delete myserial02  Deletes the connection profile named 'myserial02'    show  newtmgr conn show myserial01  Shows the details of the profile named 'myserial01'    show  newtmgr conn show  Shows all the current profiles defined", 
            "title": "Usage:"
        }, 
        {
            "location": "/newtmgr/overview/#echo", 
            "text": "", 
            "title": "echo"
        }, 
        {
            "location": "/newtmgr/overview/#usage_2", 
            "text": "newtmgr echo [flags] [text]  This command sends the text to the remote device at the other end of the connection specified with the -c flag and outputs the text when it gets a response from the device. If the device is not responding or if the connection profile is invalid it displays errors.   Flags:    -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Examples     Sub-command  Usage  Explanation      echo  newtmgr echo -c profile01 hello  Sends the string 'hello' to the remote device over the connection profile 'profile01' and receives the string back and displays it.", 
            "title": "Usage:"
        }, 
        {
            "location": "/newtmgr/overview/#image", 
            "text": "", 
            "title": "image"
        }, 
        {
            "location": "/newtmgr/overview/#usage_3", 
            "text": "newtmgr image [flags]\n  newtmgr image [command]  Available commands:       list         Show target images\n    upload       Upload image to target\n    boot         Which image to boot\n    fileupload   Upload file to target\n    filedownload Download file from target  Flags:    -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Description     Sub-command  Explanation      list  Adds a connection profile. A properly defined profile needs a name, a connection type, and the physical or virtual port to be used for communication.    upload  Deletes a connection profile associated with the given name    boot  Specify the image to boot    fileupload  upload file to the remote target    filedownload  download/retrieve file from remote target     Examples     Sub-command  Usage  Explanation      list  newtmgr list     upload  newtmgr upload     boot  newtmgr boot     fileupload  newtmgr fileupload     filedownload  newtmgr filedownload", 
            "title": "Usage:"
        }, 
        {
            "location": "/newtmgr/overview/#stat", 
            "text": "", 
            "title": "stat"
        }, 
        {
            "location": "/newtmgr/overview/#usage_4", 
            "text": "newtmgr stat [flags]\n  newtmgr stat [command]  Flags:    -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Examples     Sub-command  Usage  Explanation      stat  newtmgr stat", 
            "title": "Usage:"
        }, 
        {
            "location": "/newtmgr/overview/#taskstats", 
            "text": "", 
            "title": "taskstats"
        }, 
        {
            "location": "/newtmgr/overview/#usage_5", 
            "text": "newtmgr taskstats [flags]\n  newtmgr taskstats [command]  Lists all the tasks running on the remote endpoint at the end of the specified connection and for each task lists statistics such as priority, task id, runtime (how long the task has been running in ms), context switch count, stack size allocated, actual stack usage, last sanity checkin, next sanity check-in.   Flags:    -c, --conn string       connection profile to use.\n  -l, --loglevel string   log level to use (default WARN.)  Examples     Sub-command  Usage  Explanation      stat  newtmgr taskstats -c profile01  Lists all the tasks running on the remote device at the end of connection named 'profile01'     Example output  $ newtmgr  -c profile01 taskstats\nReturn Code = 0\n  idle (prio=255 tid=0 runtime=3299340 cswcnt=280342 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  os_sanity (prio=254 tid=1 runtime=0 cswcnt=3287 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  shell (prio=3 tid=2 runtime=0 cswcnt=165 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  uart_poller (prio=0 tid=3 runtime=0 cswcnt=279368 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  newtmgr (prio=4 tid=4 runtime=0 cswcnt=14 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  task1 (prio=1 tid=5 runtime=0 cswcnt=3287 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)\n  task2 (prio=2 tid=6 runtime=0 cswcnt=3287 stksize=1024 stkusage=1000 last_checkin=0 next_checkin=0)", 
            "title": "Usage:"
        }, 
        {
            "location": "/newtmgr/project-slinky/", 
            "text": "Project Slinky\n\n\nObjective\n\n\nThe goal of the project is to enable and demonstate remote communications with a device or target via newt manager (newtmgr). We will first build the project image for a simulated device and then build an image for a hardware target. Next, the tool newtmgr has to be installed and a connection established with the target. Finally, various available commands in newtmgr will be used to query the target, upgrade image, and collect data from the endpoint.\n\n\nWhat you need\n\n\n\n\nSTM32-E407 development board from Olimex. You can order it from \nhttp://www.mouser.com\n, \nhttp://www.digikey.com\n, and other places.\n\n\nARM-USB-TINY-H connector with JTAG interface for debugging ARM microcontrollers (comes with the ribbon cable to hook up to the board)\n\n\nUSB A-B type cable to connect the debugger to your personal computer\n\n\nA USB to TTL Serial Cable with female wiring harness. An example is \nhttp://www.amazon.com/JBtek\u00ae-WINDOWS-Supported-Raspberry-Programming/dp/B00QT7LQ88/ref=lp_464404_1_9?s=pc\nie=UTF8\nqid=1454631303\nsr=1-9\n\n\nPersonal Computer\n\n\n\n\nThe instructions assume the user is using a Bourne-compatible shell (e.g. bash or zsh) on your computer. The given instructions have been tested with the following releases of operating systems:\n\n\n\n\nMac: OS X Yosemite Version 10.10.5\n\n\n\n\nOverview of steps\n\n\n\n\nDefine targets using the newt tool\n\n\nBuild executables for the targets using the newt tool\n\n\nSet up serial connection with the targets - both the physical connection with a hardware target and the connection profile using the newtmgr tool\n\n\nUse the newtmgr tool to communicate with the targets\n\n\n\n\nThe following instructions will walk you through the update of the larva nest and the installation of newtmgr as well.\n\n\nCreating local repository\n\n\nMake sure Mynewt's default nest \nlarva\n is up to date by downloading the latest from the Apache mynewt repository (\nhttps://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva\n).\n\n\n        $ pwd\n        /Users/\nuser\n/dev/larva\n        $ ls -al\n        total 72\n        drwxr-xr-x  18 \nuser\n  staff    612 Feb  3 15:47 .\n        drwxr-xr-x   5 \nuser\n  staff    170 Feb  3 13:32 ..\n        drwxr-xr-x  13 \nuser\n  staff    442 Feb  3 13:32 .git\n        -rw-r--r--   1 \nuser\n  staff     66 Feb  3 13:32 .gitignore\n        -rw-r--r--   1 \nuser\n  staff      0 Feb  3 13:32 .gitmodules\n        drwxr-xr-x   4 \nuser\n  staff    136 Feb  3 16:13 .nest\n        -rw-r--r--   1 \nuser\n  staff  11358 Feb  3 13:32 LICENSE\n        ...\n        ...\n        drwxr-xr-x   5 \nuser\n  staff    170 Feb  3 13:32 sys\n        $ git pull origin master\n\n\n\n\nInstalling Newtmgr\n\n\nYou will first download the source code for newt. Currently, you need to create a symbolic link for all the directory references in the go scripts to work correctly.\n\n\n        $ cd ~/dev\n        $ go get git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ ln -s ~/dev/go/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git ~/dev/go/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt\n\n        $ pwd\n       /Users/\nuser\n/dev/go\n        $ ls\n         bin    pkg    src\n        $ cd src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt/newt\n        $ ls\n        newt    newtmgr    newtvm   util\n        $ cd newtmgr\n        $ go build\n        $ \n\n\n\n\nNote: If the \ngo build\n command results in errors indicating some package cannot be found, do a \ngo get\n to download all the third-party files needed from github.com and then run \ngo build\n again. \n\n\nBuilding Targets\n\n\nYou will create a total of 4 targets. The first one is a simulation target and the second a hardware target (for STM32-E407 Olimex development board). In order to run an image from the flash on the Olimex board, a bootloader is required. You will build two additional targets (bootloader and bin2img) as explained in Project Blinky under \nUsing flash to make LED blink\n and as shown below.\n\n\nHere;'s how to create the target for simulation.\n\n\n        $ newt target create slinky_sim\n        Creating target slinky_sim\n        Target slinky_sim sucessfully created!\n        $ newt target set slinky_sim arch=sim\n        Target slinky_sim successfully set arch to sim\n        $ newt target set slinky_sim compiler=sim\n        Target slinky_sim successfully set compiler to sim\n        $ newt target set slinky_sim project=slinky\n        Target slinky_sim successfully set project to slinky\n        $ newt target set slinky_sim compiler_def=debug\n        Target slinky_sim successfully set compiler_def to debug\n        $ newt target set slinky_sim bsp=hw/bsp/native\n        Target slinky_sim successfully set bsp to hw/bsp/native\n        $ newt target show slinky_sim\n        slinky_sim\n            arch: sim\n            bsp: hw/bsp/native\n            compiler: sim\n            compiler_def: debug\n            name: slinky_sim\n            project: slinky     \n\n\n\n\nRepeat the above steps using the attribute information for each target from the target output shown below to create the remaining three targets. The four target definitions are:\n\n\n        $ newt target show\n        bin2img\n            arch: sim\n            bsp: hw/bsp/native\n            compiler: sim\n            compiler_def: debug\n            name: bin2img\n            project: bin2img\n        boot_olimex\n            arch: cortex_m4\n            bsp: hw/bsp/olimex_stm32-e407_devboard\n            compiler: arm-none-eabi-m4\n            compiler_def: optimized\n            name: boot_olimex\n            project: boot\n        slinky1\n            arch: cortex_m4\n            bsp: hw/bsp/olimex_stm32-e407_devboard\n            compiler: arm-none-eabi-m4\n            compiler_def: debug\n            name: slinky1\n            project: slinky\n        slinky_sim\n            arch: sim\n            bsp: hw/bsp/native\n            compiler: sim\n            compiler_def: debug\n            name: slinky_sim\n            project: slinky\n\n\n\n\nGo ahead and build all the targets. The build command for slinky_sim is shown below.\n\n\n        $ newt target build slinky_sim\n        Building target slinky_sim (project = slinky)\n        Compiling base64.c\n        Compiling cbmem.c\n        ...\n        Archiving libnative.a\n        Compiling main.c\n        Building project slinky\n        Linking slinky.elf\n        Successfully run!\n\n\n\n\nNow run the \nnewt target build\n command for the remaining three targets.\n\n\nUsing newtmgr with a sim target\n\n\n\n\nRun the executable you have build for the simulated environment. The serial port name on which the simulated target is connected is shown in the output.\n\n\n\n\n        $ pwd\n        /Users/\nuser\n/dev/larva/project/slinky\n        $ ./bin/slinky_sim/slinky.elf\n        uart0 at /dev/ttys007\n\n\n\n\n\n\nYou will now set up a connection profile using \nnewtmgr\n for the serial port connection and start communicating with the simulated remote device.\n\n\n\n\n        $ newtmgr conn add sim1 type=serial connstring=/dev/ttys007\n        Connection profile sim1 successfully added\n        $ newtmgr conn show\n        Connection profiles: \n          sim1: type=serial, connstring='/dev/ttys007'\n        $ newtmgr -c sim1 taskstats\n        Return Code = 0\n          uart_poller (prio=0 tid=3 runtime=0 cswcnt=43810 stksize=1024 stkusage=325 last_checkin=0 next_checkin=0)\n          newtmgr (prio=4 tid=4 runtime=0 cswcnt=6 stksize=1024 stkusage=585 last_checkin=0 next_checkin=0)\n          task1 (prio=1 tid=5 runtime=0 cswcnt=551 stksize=1024 stkusage=83 last_checkin=0 next_checkin=0)\n          task2 (prio=2 tid=6 runtime=0 cswcnt=551 stksize=1024 stkusage=85 last_checkin=0 next_checkin=0)\n          idle (prio=255 tid=0 runtime=552525 cswcnt=44005 stksize=1024 stkusage=529 last_checkin=0 next_checkin=0)\n          os_sanity (prio=254 tid=1 runtime=0 cswcnt=551 stksize=1024 stkusage=82 last_checkin=0 next_checkin=0)\n          shell (prio=3 tid=2 runtime=0 cswcnt=20 stksize=1024 stkusage=142 last_checkin=0 next_checkin=0)\n        $ newtmgr -c sim1 stat stat\n        Return Code = 0\n        Stats Name: stat\n          s0: 1\n\n\n\n\nUsing newtmgr with a remote target\n\n\n\n\n\n\nFirst make sure the USB A-B type cable is connected to the ARM-USB-TINY-H debugger connector on the Olimex board. \n\n\nNext go the to project directory and download the slinky project image to the flash of the Olimex board. You will see the executables in the \nslinky1\n directory created for the Olimex target to run the slinky project.\n\n\n\n\n\n\n        $ pwd\n        /Users/\nuser\n/dev/larva/project/slinky\n        $ ls\n        bin     egg.yml     slinky.yml  src\n        $ ls bin\n        slinky1     slinky_sim\n        $ ls bin/slinky1\n        slinky.elf  slinky.elf.bin  slinky.elf.cmd    slinky.elf.img    slinky.elf.lst    slinky.elf.map\n        $ newt target download boot_olimex\n        Downloading with /Users/\nuser\n/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh\n        $ newt target download slinky1\n        Downloading with /Users/\nuser\n/dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh\n\n\n\n\nYou can now disconnect the debugging cable from the board. You should see the green LED blinking. If not, try powercycling the board.\n\n\n\n\n\n\nNow you have to set up the serial connection from your computer to the Olimex board. Locate the PC6/USART6_TX (pin#3), PC7/USART6_RX (pin#4), and GND (pin#2) of the UEXT connector on the Olimex board. More information on the UEXT connector can be found at \nhttps://www.olimex.com/Products/Modules/UEXT/\n. The schematic of the board can be found at \nhttps://www.olimex.com/Products/ARM/ST/STM32-E407/resources/STM32-E407_sch.pdf\n for reference.\n\n\n\n\n\n\nConnect the female RX pin of the USB-TTL serial cable to the TX of the UEXT connector on the board. \n\n\nConnect the female TX pin of the USB-TTL serial cable to the RX of the UEXT connector on the board. \n\n\nConnect the GND pin of the USB-TTL serial cable to the GND of the UEXT connector on the board.\n\n\n\n\n\n\n\n\nLocate the serial connection established in the /dev directory of your computer. It should be of the type \ntty.usbserial-\nsome identifier\n.\n\n\n\n\n\n\n        $ ls /dev/tty.usbserial-AJ03HAQQ \n        /dev/tty.usbserial-AJ03HAQQ\n\n\n\n\n\n\nYou now have to define a connection profile using newtmgr. You can give it any name you want. The example below shows the connection profile being named as the very imaginative \nolimex01\n.\n\n\n\n\n        $ pwd\n        /Users/\nuser\n/dev/larva/project/slinky\n        $ newtmgr conn add olimex01 type=serial connstring=/dev/tty.usbserial-AJ03HAQQ \n        Connection profile olimex01 successfully added\n        $ newtmgr conn show\n        Connection profiles: \n          sim1: type=serial, connstring='/dev/ttys007'\n          olimex01: type=serial, connstring='/dev/tty.usbserial-AJ03HAQQ'\n\n\n\n\n\n\nNow go ahead and query the Olimex board to get responses back. The simplest command is the \necho\n command to ask it to respond with the text you send it. \n\n\n\n\n        $ newtmgr echo -c olimex01 hello\n        {\nr\n: \nhello\n}\n        $ newtmgr image -c olimex01 list\n        Images:\n            0 : 11.22.33.44\n        $ newtmgr -c olimex01 taskstats\n        Return Code = 0\n          shell (prio=3 tid=1 runtime=0 cswcnt=5 stksize=1024 stkusage=60 last_checkin=0 next_checkin=0)\n          newtmgr (prio=4 tid=2 runtime=0 cswcnt=4 stksize=1024 stkusage=256 last_checkin=0 next_checkin=0)\n          task1 (prio=1 tid=3 runtime=0 cswcnt=23 stksize=1024 stkusage=32 last_checkin=0 next_checkin=0)\n          task2 (prio=2 tid=4 runtime=0 cswcnt=24 stksize=1024 stkusage=33 last_checkin=0 next_checkin=0)\n          idle (prio=255 tid=0 runtime=23121 cswcnt=26 stksize=32 stkusage=16 last_checkin=0 next_checkin=0)", 
            "title": "Project Slinky"
        }, 
        {
            "location": "/newtmgr/project-slinky/#project-slinky", 
            "text": "", 
            "title": "Project Slinky"
        }, 
        {
            "location": "/newtmgr/project-slinky/#objective", 
            "text": "The goal of the project is to enable and demonstate remote communications with a device or target via newt manager (newtmgr). We will first build the project image for a simulated device and then build an image for a hardware target. Next, the tool newtmgr has to be installed and a connection established with the target. Finally, various available commands in newtmgr will be used to query the target, upgrade image, and collect data from the endpoint.", 
            "title": "Objective"
        }, 
        {
            "location": "/newtmgr/project-slinky/#what-you-need", 
            "text": "STM32-E407 development board from Olimex. You can order it from  http://www.mouser.com ,  http://www.digikey.com , and other places.  ARM-USB-TINY-H connector with JTAG interface for debugging ARM microcontrollers (comes with the ribbon cable to hook up to the board)  USB A-B type cable to connect the debugger to your personal computer  A USB to TTL Serial Cable with female wiring harness. An example is  http://www.amazon.com/JBtek\u00ae-WINDOWS-Supported-Raspberry-Programming/dp/B00QT7LQ88/ref=lp_464404_1_9?s=pc ie=UTF8 qid=1454631303 sr=1-9  Personal Computer   The instructions assume the user is using a Bourne-compatible shell (e.g. bash or zsh) on your computer. The given instructions have been tested with the following releases of operating systems:   Mac: OS X Yosemite Version 10.10.5", 
            "title": "What you need"
        }, 
        {
            "location": "/newtmgr/project-slinky/#overview-of-steps", 
            "text": "Define targets using the newt tool  Build executables for the targets using the newt tool  Set up serial connection with the targets - both the physical connection with a hardware target and the connection profile using the newtmgr tool  Use the newtmgr tool to communicate with the targets   The following instructions will walk you through the update of the larva nest and the installation of newtmgr as well.", 
            "title": "Overview of steps"
        }, 
        {
            "location": "/newtmgr/project-slinky/#creating-local-repository", 
            "text": "Make sure Mynewt's default nest  larva  is up to date by downloading the latest from the Apache mynewt repository ( https://git-wip-us.apache.org/repos/asf/incubator-mynewt-larva ).          $ pwd\n        /Users/ user /dev/larva\n        $ ls -al\n        total 72\n        drwxr-xr-x  18  user   staff    612 Feb  3 15:47 .\n        drwxr-xr-x   5  user   staff    170 Feb  3 13:32 ..\n        drwxr-xr-x  13  user   staff    442 Feb  3 13:32 .git\n        -rw-r--r--   1  user   staff     66 Feb  3 13:32 .gitignore\n        -rw-r--r--   1  user   staff      0 Feb  3 13:32 .gitmodules\n        drwxr-xr-x   4  user   staff    136 Feb  3 16:13 .nest\n        -rw-r--r--   1  user   staff  11358 Feb  3 13:32 LICENSE\n        ...\n        ...\n        drwxr-xr-x   5  user   staff    170 Feb  3 13:32 sys\n        $ git pull origin master", 
            "title": "Creating local repository"
        }, 
        {
            "location": "/newtmgr/project-slinky/#installing-newtmgr", 
            "text": "You will first download the source code for newt. Currently, you need to create a symbolic link for all the directory references in the go scripts to work correctly.          $ cd ~/dev\n        $ go get git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git/newt\n        $ ln -s ~/dev/go/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt.git ~/dev/go/src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt\n\n        $ pwd\n       /Users/ user /dev/go\n        $ ls\n         bin    pkg    src\n        $ cd src/git-wip-us.apache.org/repos/asf/incubator-mynewt-newt/newt\n        $ ls\n        newt    newtmgr    newtvm   util\n        $ cd newtmgr\n        $ go build\n        $   Note: If the  go build  command results in errors indicating some package cannot be found, do a  go get  to download all the third-party files needed from github.com and then run  go build  again.", 
            "title": "Installing Newtmgr"
        }, 
        {
            "location": "/newtmgr/project-slinky/#building-targets", 
            "text": "You will create a total of 4 targets. The first one is a simulation target and the second a hardware target (for STM32-E407 Olimex development board). In order to run an image from the flash on the Olimex board, a bootloader is required. You will build two additional targets (bootloader and bin2img) as explained in Project Blinky under  Using flash to make LED blink  and as shown below.  Here;'s how to create the target for simulation.          $ newt target create slinky_sim\n        Creating target slinky_sim\n        Target slinky_sim sucessfully created!\n        $ newt target set slinky_sim arch=sim\n        Target slinky_sim successfully set arch to sim\n        $ newt target set slinky_sim compiler=sim\n        Target slinky_sim successfully set compiler to sim\n        $ newt target set slinky_sim project=slinky\n        Target slinky_sim successfully set project to slinky\n        $ newt target set slinky_sim compiler_def=debug\n        Target slinky_sim successfully set compiler_def to debug\n        $ newt target set slinky_sim bsp=hw/bsp/native\n        Target slinky_sim successfully set bsp to hw/bsp/native\n        $ newt target show slinky_sim\n        slinky_sim\n            arch: sim\n            bsp: hw/bsp/native\n            compiler: sim\n            compiler_def: debug\n            name: slinky_sim\n            project: slinky       Repeat the above steps using the attribute information for each target from the target output shown below to create the remaining three targets. The four target definitions are:          $ newt target show\n        bin2img\n            arch: sim\n            bsp: hw/bsp/native\n            compiler: sim\n            compiler_def: debug\n            name: bin2img\n            project: bin2img\n        boot_olimex\n            arch: cortex_m4\n            bsp: hw/bsp/olimex_stm32-e407_devboard\n            compiler: arm-none-eabi-m4\n            compiler_def: optimized\n            name: boot_olimex\n            project: boot\n        slinky1\n            arch: cortex_m4\n            bsp: hw/bsp/olimex_stm32-e407_devboard\n            compiler: arm-none-eabi-m4\n            compiler_def: debug\n            name: slinky1\n            project: slinky\n        slinky_sim\n            arch: sim\n            bsp: hw/bsp/native\n            compiler: sim\n            compiler_def: debug\n            name: slinky_sim\n            project: slinky  Go ahead and build all the targets. The build command for slinky_sim is shown below.          $ newt target build slinky_sim\n        Building target slinky_sim (project = slinky)\n        Compiling base64.c\n        Compiling cbmem.c\n        ...\n        Archiving libnative.a\n        Compiling main.c\n        Building project slinky\n        Linking slinky.elf\n        Successfully run!  Now run the  newt target build  command for the remaining three targets.", 
            "title": "Building Targets"
        }, 
        {
            "location": "/newtmgr/project-slinky/#using-newtmgr-with-a-sim-target", 
            "text": "Run the executable you have build for the simulated environment. The serial port name on which the simulated target is connected is shown in the output.           $ pwd\n        /Users/ user /dev/larva/project/slinky\n        $ ./bin/slinky_sim/slinky.elf\n        uart0 at /dev/ttys007   You will now set up a connection profile using  newtmgr  for the serial port connection and start communicating with the simulated remote device.           $ newtmgr conn add sim1 type=serial connstring=/dev/ttys007\n        Connection profile sim1 successfully added\n        $ newtmgr conn show\n        Connection profiles: \n          sim1: type=serial, connstring='/dev/ttys007'\n        $ newtmgr -c sim1 taskstats\n        Return Code = 0\n          uart_poller (prio=0 tid=3 runtime=0 cswcnt=43810 stksize=1024 stkusage=325 last_checkin=0 next_checkin=0)\n          newtmgr (prio=4 tid=4 runtime=0 cswcnt=6 stksize=1024 stkusage=585 last_checkin=0 next_checkin=0)\n          task1 (prio=1 tid=5 runtime=0 cswcnt=551 stksize=1024 stkusage=83 last_checkin=0 next_checkin=0)\n          task2 (prio=2 tid=6 runtime=0 cswcnt=551 stksize=1024 stkusage=85 last_checkin=0 next_checkin=0)\n          idle (prio=255 tid=0 runtime=552525 cswcnt=44005 stksize=1024 stkusage=529 last_checkin=0 next_checkin=0)\n          os_sanity (prio=254 tid=1 runtime=0 cswcnt=551 stksize=1024 stkusage=82 last_checkin=0 next_checkin=0)\n          shell (prio=3 tid=2 runtime=0 cswcnt=20 stksize=1024 stkusage=142 last_checkin=0 next_checkin=0)\n        $ newtmgr -c sim1 stat stat\n        Return Code = 0\n        Stats Name: stat\n          s0: 1", 
            "title": "Using newtmgr with a sim target"
        }, 
        {
            "location": "/newtmgr/project-slinky/#using-newtmgr-with-a-remote-target", 
            "text": "First make sure the USB A-B type cable is connected to the ARM-USB-TINY-H debugger connector on the Olimex board.   Next go the to project directory and download the slinky project image to the flash of the Olimex board. You will see the executables in the  slinky1  directory created for the Olimex target to run the slinky project.            $ pwd\n        /Users/ user /dev/larva/project/slinky\n        $ ls\n        bin     egg.yml     slinky.yml  src\n        $ ls bin\n        slinky1     slinky_sim\n        $ ls bin/slinky1\n        slinky.elf  slinky.elf.bin  slinky.elf.cmd    slinky.elf.img    slinky.elf.lst    slinky.elf.map\n        $ newt target download boot_olimex\n        Downloading with /Users/ user /dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh\n        $ newt target download slinky1\n        Downloading with /Users/ user /dev/larva/hw/bsp/olimex_stm32-e407_devboard/olimex_stm32-e407_devboard_download.sh  You can now disconnect the debugging cable from the board. You should see the green LED blinking. If not, try powercycling the board.    Now you have to set up the serial connection from your computer to the Olimex board. Locate the PC6/USART6_TX (pin#3), PC7/USART6_RX (pin#4), and GND (pin#2) of the UEXT connector on the Olimex board. More information on the UEXT connector can be found at  https://www.olimex.com/Products/Modules/UEXT/ . The schematic of the board can be found at  https://www.olimex.com/Products/ARM/ST/STM32-E407/resources/STM32-E407_sch.pdf  for reference.    Connect the female RX pin of the USB-TTL serial cable to the TX of the UEXT connector on the board.   Connect the female TX pin of the USB-TTL serial cable to the RX of the UEXT connector on the board.   Connect the GND pin of the USB-TTL serial cable to the GND of the UEXT connector on the board.     Locate the serial connection established in the /dev directory of your computer. It should be of the type  tty.usbserial- some identifier .            $ ls /dev/tty.usbserial-AJ03HAQQ \n        /dev/tty.usbserial-AJ03HAQQ   You now have to define a connection profile using newtmgr. You can give it any name you want. The example below shows the connection profile being named as the very imaginative  olimex01 .           $ pwd\n        /Users/ user /dev/larva/project/slinky\n        $ newtmgr conn add olimex01 type=serial connstring=/dev/tty.usbserial-AJ03HAQQ \n        Connection profile olimex01 successfully added\n        $ newtmgr conn show\n        Connection profiles: \n          sim1: type=serial, connstring='/dev/ttys007'\n          olimex01: type=serial, connstring='/dev/tty.usbserial-AJ03HAQQ'   Now go ahead and query the Olimex board to get responses back. The simplest command is the  echo  command to ask it to respond with the text you send it.            $ newtmgr echo -c olimex01 hello\n        { r :  hello }\n        $ newtmgr image -c olimex01 list\n        Images:\n            0 : 11.22.33.44\n        $ newtmgr -c olimex01 taskstats\n        Return Code = 0\n          shell (prio=3 tid=1 runtime=0 cswcnt=5 stksize=1024 stkusage=60 last_checkin=0 next_checkin=0)\n          newtmgr (prio=4 tid=2 runtime=0 cswcnt=4 stksize=1024 stkusage=256 last_checkin=0 next_checkin=0)\n          task1 (prio=1 tid=3 runtime=0 cswcnt=23 stksize=1024 stkusage=32 last_checkin=0 next_checkin=0)\n          task2 (prio=2 tid=4 runtime=0 cswcnt=24 stksize=1024 stkusage=33 last_checkin=0 next_checkin=0)\n          idle (prio=255 tid=0 runtime=23121 cswcnt=26 stksize=32 stkusage=16 last_checkin=0 next_checkin=0)", 
            "title": "Using newtmgr with a remote target"
        }, 
        {
            "location": "/newtmgr/protocol/", 
            "text": "Newt Manager Protocol\n\n\n \n\n\nDescription\n\n\nHow it works", 
            "title": "Protocol"
        }, 
        {
            "location": "/newtmgr/protocol/#newt-manager-protocol", 
            "text": "", 
            "title": "Newt Manager Protocol"
        }, 
        {
            "location": "/newtmgr/protocol/#description", 
            "text": "", 
            "title": "Description"
        }, 
        {
            "location": "/newtmgr/protocol/#how-it-works", 
            "text": "", 
            "title": "How it works"
        }
    ]
}